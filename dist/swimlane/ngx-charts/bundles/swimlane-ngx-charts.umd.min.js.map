{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/alignment.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/events.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/toggle-entry.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","target","key","descriptor","configurable","enumerable","get","defineProperty","Injectable","ApplicationRef","ComponentFactoryResolver","Injector","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","TooltipContentComponent","renderer","clz","type","cssClass","ngAfterViewInit","position","bind","_this","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","Component","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Input","ViewChild","HostBinding","HostListener","decorators","desc","c","getOwnPropertyDescriptor","Reflect","decorate","__decorate","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","assign","has","set","TooltipService","_super","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","legendLabelToggle","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","Output","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","Directive","NgZone","BaseChartComponent","chartElement","cd","scheme","schemeType","select","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","tick","toString","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","_b","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","StyleTypes","AlignmentTypes","ShowTypes","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","navigator","userAgent","match","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","document","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","formatLabel","escapeLabel","replace","&","'","`","\"","<",">","entryComponents","cache","id","newId","random","pow","CircleSeriesComponent","activate","deactivate","barVisible","ngOnInit","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","isHidden","hiddenEntries","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","t","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","requestAnimationFrame","timestamp","runCount","frameVal","progress","round","finished","val","decimalChecker","abs","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3event","selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","labelToggle","legendEntries","getLegendEntries","items","formattedLabel","this_1","toggle","trackBy","index","LegendEntryComponent","ScaleLegendComponent","sanitizer","gradientValues","gradientString","direction","bypassSecurityTrustStyle","splits","pairs","reverse","forEach","DomSanitizer","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","GridPanelComponent","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","AxesModule","TooltipModule","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","toggleEntry","hidden","AreaChartComponent","legendTitle","canHideSerie","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","isDate","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","onToggle","toggleResult","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","ChartCommonModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","D0Types","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","hasRange","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","sin","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","isIE","test","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","textX","textY","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","PieChartModule","LineChartModule","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","text","getTickPath","smallAngle","lineGenerator","BarChartModule","SVGElement","HTMLDivElement","AreaChartModule","BubbleChartModule","HeatMapModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","fieldType","groupByType","timeFormat","formatter"],"mappings":"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YAGJ,CACEnF,KAAM,QACN+b,YAAY,EACZnH,MAAO,UACPzP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN+b,YAAY,EACZnH,MAAO,UACPzP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,SACN+b,YAAY,EACZnH,MAAO,UACPzP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,UACN+b,YAAY,EACZnH,MAAO,UACPzP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN+b,YAAY,EACZnH,MAAO,UACPzP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,SACN+b,YAAY,EACZnH,MAAO,UACPzP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,QACN+b,YAAY,EACZnH,MAAO,UACPzP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEnF,KAAM,cACN+b,YAAY,EACZnH,MAAO,UACPzP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,2BChPJ,SAAA6W,EAAYnd,EAAQ3G,EAAMiN,EAAQ8W,GACV,iBAAXpd,IACTA,EAASid,GAAU1M,MAAK,SAAA8M,GACtB,OAAOA,EAAGlc,OAASnB,MAGvBnP,KAAKysB,YAActd,EAAOsG,OAC1BzV,KAAKuN,UAAY/E,EACjBxI,KAAKyV,OAASA,EACdzV,KAAKusB,aAAeA,EAEpBvsB,KAAKkU,MAAQlU,KAAK0sB,oBAAoBvd,EAAQ3G,EAAMxI,KAAKyV,eAG3D6W,EAAApsB,UAAAwsB,oBAAA,SAAoBvd,EAAQ3G,EAAMiN,GAMhC,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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum PlacementTypes {\r\n  top = 'top' as any,\r\n  bottom = 'bottom' as any,\r\n  left = 'left' as any,\r\n  right = 'right' as any\r\n}\r\n","import {\r\n  ApplicationRef,\r\n  ComponentFactoryResolver,\r\n  ComponentRef,\r\n  Injectable,\r\n  Injector,\r\n  ViewContainerRef,\r\n  EmbeddedViewRef,\r\n  Type\r\n} from '@angular/core';\r\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\r\n\r\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\r\n  return x.element;\r\n}\r\n\r\n/**\r\n * Injection service is a helper to append components\r\n * dynamically to a known location in the DOM, most\r\n * noteably for dialogs/tooltips appending to body.\r\n *\r\n * @export\r\n */\r\n@Injectable()\r\nexport class InjectionService {\r\n  static globalRootViewContainer: ViewContainerRef = null;\r\n\r\n  /**\r\n   * Sets a default global root view container. This is useful for\r\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\r\n   *\r\n   * @param container\r\n   */\r\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\r\n    InjectionService.globalRootViewContainer = container;\r\n  }\r\n\r\n  private _container: ViewContainerRef;\r\n\r\n  constructor(\r\n    private applicationRef: ApplicationRef,\r\n    private componentFactoryResolver: ComponentFactoryResolver,\r\n    private injector: Injector\r\n  ) {}\r\n\r\n  /**\r\n   * Gets the root view container to inject the component to.\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\r\n    if (this._container) return this._container;\r\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\r\n\r\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\r\n\r\n    throw new Error(\r\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Overrides the default root view container. This is useful for\r\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\r\n   *\r\n   * @param container\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  setRootViewContainer(container: ViewContainerRef): void {\r\n    this._container = container;\r\n  }\r\n\r\n  /**\r\n   * Gets the html element for a component ref.\r\n   *\r\n   * @param componentRef\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\r\n    if (isViewContainerRef(component)) {\r\n      return component.element.nativeElement;\r\n    }\r\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\r\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\r\n    }\r\n\r\n    // the top most component root node has no `hostView`\r\n    return component.location.nativeElement;\r\n  }\r\n\r\n  /**\r\n   * Gets the root component container html element.\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\r\n    return this.getComponentRootNode(component);\r\n  }\r\n\r\n  /**\r\n   * Projects the bindings onto the component\r\n   *\r\n   * @param component\r\n   * @param options\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\r\n    if (bindings) {\r\n      if (bindings.inputs !== undefined) {\r\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\r\n        for (const bindingName of bindingKeys) {\r\n          component.instance[bindingName] = bindings.inputs[bindingName];\r\n        }\r\n      }\r\n\r\n      if (bindings.outputs !== undefined) {\r\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\r\n        for (const eventName of eventKeys) {\r\n          component.instance[eventName] = bindings.outputs[eventName];\r\n        }\r\n      }\r\n    }\r\n\r\n    return component;\r\n  }\r\n\r\n  /**\r\n   * Appends a component to a adjacent location\r\n   *\r\n   * @param componentClass\r\n   * @param [options={}]\r\n   * @param [location]\r\n   *\r\n   * @memberOf InjectionService\r\n   */\r\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\r\n    if (!location) location = this.getRootViewContainer();\r\n    const appendLocation = this.getComponentRootNode(location);\r\n\r\n    const portalHost = new DomPortalHost(\r\n      appendLocation,\r\n      this.componentFactoryResolver,\r\n      this.applicationRef,\r\n      this.injector\r\n    );\r\n\r\n    const portal = new ComponentPortal(componentClass);\r\n\r\n    const componentRef = portalHost.attach(portal);\r\n    this.projectComponentBindings(componentRef, bindings);\r\n    return componentRef;\r\n  }\r\n}\r\n","/**\r\n * Throttle a function\r\n *\r\n */\r\nexport function throttle(func: any, wait: number, options?: any) {\r\n  options = options || {};\r\n  let context;\r\n  let args;\r\n  let result;\r\n  let timeout = null;\r\n  let previous = 0;\r\n\r\n  function later() {\r\n    previous = options.leading === false ? 0 : +new Date();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n  }\r\n\r\n  return function () {\r\n    const now = +new Date();\r\n\r\n    if (!previous && options.leading === false) {\r\n      previous = now;\r\n    }\r\n\r\n    const remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n\r\n    if (remaining <= 0) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Throttle decorator\r\n *\r\n *  class MyClass {\r\n *    throttleable(10)\r\n *    myFn() { ... }\r\n *  }\r\n */\r\nexport function throttleable(duration: number, options?: any) {\r\n  return function innerDecorator(target, key, descriptor) {\r\n    return {\r\n      configurable: true,\r\n      enumerable: descriptor.enumerable,\r\n      get: function getter() {\r\n        Object.defineProperty(this, key, {\r\n          configurable: true,\r\n          enumerable: descriptor.enumerable,\r\n          value: throttle(descriptor.value, duration, options)\r\n        });\r\n\r\n        return this[key];\r\n      }\r\n    };\r\n  };\r\n}\r\n","import { PlacementTypes } from './placement.type';\r\n\r\nconst caretOffset = 7;\r\n\r\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\r\n  if (alignment === 'top') {\r\n    return elDimensions.top - caretOffset;\r\n  }\r\n\r\n  if (alignment === 'bottom') {\r\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\r\n  }\r\n\r\n  if (alignment === 'center') {\r\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\r\n  if (alignment === 'left') {\r\n    return elDimensions.left - caretOffset;\r\n  }\r\n\r\n  if (alignment === 'right') {\r\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\r\n  }\r\n\r\n  if (alignment === 'center') {\r\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Position helper for the popover directive.\r\n *\r\n * @export\r\n */\r\nexport class PositionHelper {\r\n  /**\r\n   * Calculate vertical alignment position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\r\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n\r\n    if (result + popoverDimensions.height > window.innerHeight) {\r\n      result = window.innerHeight - popoverDimensions.height;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate vertical caret position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\r\n    let result;\r\n\r\n    if (alignment === 'top') {\r\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\r\n    }\r\n\r\n    if (alignment === 'bottom') {\r\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\r\n    }\r\n\r\n    if (alignment === 'center') {\r\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\r\n    }\r\n\r\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\r\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\r\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate horz alignment position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\r\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n\r\n    if (result + popoverDimensions.width > window.innerWidth) {\r\n      result = window.innerWidth - popoverDimensions.width;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate horz caret position\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\r\n    let result;\r\n\r\n    if (alignment === 'left') {\r\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\r\n    }\r\n\r\n    if (alignment === 'right') {\r\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\r\n    }\r\n\r\n    if (alignment === 'center') {\r\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\r\n    }\r\n\r\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\r\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\r\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Checks if the element's position should be flipped\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\r\n    let flip = false;\r\n\r\n    if (placement === 'right') {\r\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'left') {\r\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'top') {\r\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    if (placement === 'bottom') {\r\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\r\n        flip = true;\r\n      }\r\n    }\r\n\r\n    return flip;\r\n  }\r\n\r\n  /**\r\n   * Position caret\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\r\n    let top = 0;\r\n    let left = 0;\r\n\r\n    if (placement === PlacementTypes.right) {\r\n      left = -7;\r\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.left) {\r\n      left = elmDim.width;\r\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.top) {\r\n      top = elmDim.height;\r\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    } else if (placement === PlacementTypes.bottom) {\r\n      top = -7;\r\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\r\n    }\r\n\r\n    return { top, left };\r\n  }\r\n\r\n  /**\r\n   * Position content\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\r\n    let top = 0;\r\n    let left = 0;\r\n\r\n    if (placement === PlacementTypes.right) {\r\n      left = hostDim.left + hostDim.width + spacing;\r\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.left) {\r\n      left = hostDim.left - elmDim.width - spacing;\r\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.top) {\r\n      top = hostDim.top - elmDim.height - spacing;\r\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n    } else if (placement === PlacementTypes.bottom) {\r\n      top = hostDim.top + hostDim.height + spacing;\r\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\r\n    }\r\n\r\n    return { top, left };\r\n  }\r\n\r\n  /**\r\n   * Determine placement based on flip\r\n   *\r\n   * @memberOf PositionHelper\r\n   */\r\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\r\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\r\n\r\n    if (shouldFlip) {\r\n      if (placement === PlacementTypes.right) {\r\n        return PlacementTypes.left;\r\n      } else if (placement === PlacementTypes.left) {\r\n        return PlacementTypes.right;\r\n      } else if (placement === PlacementTypes.top) {\r\n        return PlacementTypes.bottom;\r\n      } else if (placement === PlacementTypes.bottom) {\r\n        return PlacementTypes.top;\r\n      }\r\n    }\r\n\r\n    return placement;\r\n  }\r\n}\r\n","import {\r\n  Input,\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ViewChild,\r\n  HostBinding,\r\n  Renderer2\r\n} from '@angular/core';\r\n\r\nimport { throttleable } from '../../utils/throttle';\r\nimport { PositionHelper, PlacementTypes } from './position';\r\n\r\nimport { StyleTypes } from './style.type';\r\nimport { AlignmentTypes } from './alignment.type';\r\n\r\n@Component({\r\n  selector: 'ngx-tooltip-content',\r\n  template: `\r\n    <div>\r\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\r\n      <div class=\"tooltip-content\">\r\n        <span *ngIf=\"!title\">\r\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\r\n        </span>\r\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  styleUrls: ['./tooltip.component.scss']\r\n})\r\nexport class TooltipContentComponent implements AfterViewInit {\r\n  @Input() host: any;\r\n  @Input() showCaret: boolean;\r\n  @Input() type: StyleTypes;\r\n  @Input() placement: PlacementTypes;\r\n  @Input() alignment: AlignmentTypes;\r\n  @Input() spacing: number;\r\n  @Input() cssClass: string;\r\n  @Input() title: string;\r\n  @Input() template: any;\r\n  @Input() context: any;\r\n\r\n  @ViewChild('caretElm') caretElm;\r\n\r\n  @HostBinding('class')\r\n  get cssClasses(): string {\r\n    let clz = 'ngx-charts-tooltip-content';\r\n    clz += ` position-${this.placement}`;\r\n    clz += ` type-${this.type}`;\r\n    clz += ` ${this.cssClass}`;\r\n    return clz;\r\n  }\r\n\r\n  constructor(public element: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(this.position.bind(this));\r\n  }\r\n\r\n  position(): void {\r\n    const nativeElm = this.element.nativeElement;\r\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\r\n\r\n    // if no dims were found, never show\r\n    if (!hostDim.height && !hostDim.width) return;\r\n\r\n    const elmDim = nativeElm.getBoundingClientRect();\r\n    this.checkFlip(hostDim, elmDim);\r\n    this.positionContent(nativeElm, hostDim, elmDim);\r\n\r\n    if (this.showCaret) {\r\n      this.positionCaret(hostDim, elmDim);\r\n    }\r\n\r\n    // animate its entry\r\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\r\n  }\r\n\r\n  positionContent(nativeElm, hostDim, elmDim): void {\r\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\r\n\r\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\r\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\r\n  }\r\n\r\n  positionCaret(hostDim, elmDim): void {\r\n    const caretElm = this.caretElm.nativeElement;\r\n    const caretDimensions = caretElm.getBoundingClientRect();\r\n    const { top, left } = PositionHelper.positionCaret(\r\n      this.placement,\r\n      elmDim,\r\n      hostDim,\r\n      caretDimensions,\r\n      this.alignment\r\n    );\r\n\r\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\r\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\r\n  }\r\n\r\n  checkFlip(hostDim, elmDim): void {\r\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\r\n  }\r\n\r\n  @HostListener('window:resize')\r\n  @throttleable(100)\r\n  onWindowResize(): void {\r\n    this.position();\r\n  }\r\n}\r\n","import { ComponentRef, Type } from '@angular/core';\r\nimport { InjectionService } from './injection.service';\r\n\r\nexport interface PartialBindings {\r\n  inputs?: object;\r\n  outputs?: object;\r\n}\r\n\r\nexport abstract class InjectionRegisteryService<T = any> {\r\n  protected abstract type: Type<T>;\r\n\r\n  protected defaults: PartialBindings = {};\r\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\r\n\r\n  constructor(public injectionService: InjectionService) {}\r\n\r\n  getByType(type: Type<T> = this.type) {\r\n    return this.components.get(type);\r\n  }\r\n\r\n  create(bindings: object): ComponentRef<T> {\r\n    return this.createByType(this.type, bindings);\r\n  }\r\n\r\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\r\n    bindings = this.assignDefaults(bindings);\r\n\r\n    const component = this.injectComponent(type, bindings);\r\n    this.register(type, component);\r\n\r\n    return component;\r\n  }\r\n\r\n  destroy(instance: ComponentRef<T>): void {\r\n    const compsByType = this.components.get(instance.componentType);\r\n\r\n    if (compsByType && compsByType.length) {\r\n      const idx = compsByType.indexOf(instance);\r\n\r\n      if (idx > -1) {\r\n        const component = compsByType[idx];\r\n        component.destroy();\r\n        compsByType.splice(idx, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  destroyAll(): void {\r\n    this.destroyByType(this.type);\r\n  }\r\n\r\n  destroyByType(type: Type<T>): void {\r\n    const comps = this.components.get(type);\r\n\r\n    if (comps && comps.length) {\r\n      let i = comps.length - 1;\r\n      while (i >= 0) {\r\n        this.destroy(comps[i--]);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\r\n    return this.injectionService.appendComponent(type, bindings);\r\n  }\r\n\r\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\r\n    const inputs = { ...this.defaults.inputs };\r\n    const outputs = { ...this.defaults.outputs };\r\n\r\n    if (!bindings.inputs && !bindings.outputs) {\r\n      bindings = { inputs: bindings };\r\n    }\r\n\r\n    if (inputs) {\r\n      bindings.inputs = { ...inputs, ...bindings.inputs };\r\n    }\r\n\r\n    if (outputs) {\r\n      bindings.outputs = { ...outputs, ...bindings.outputs };\r\n    }\r\n\r\n    return bindings;\r\n  }\r\n\r\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\r\n    if (!this.components.has(type)) {\r\n      this.components.set(type, []);\r\n    }\r\n\r\n    const types = this.components.get(type);\r\n    types.push(component);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { InjectionService } from './injection.service';\r\nimport { TooltipContentComponent } from './tooltip.component';\r\nimport { InjectionRegisteryService } from './injection-registery.service';\r\n@Injectable()\r\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\r\n  type: any = TooltipContentComponent;\r\n\r\n  constructor(injectionService: InjectionService) {\r\n    super(injectionService);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  Output,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { TooltipService } from '../tooltip/tooltip.service';\r\n\r\n@Component({\r\n  providers: [TooltipService],\r\n  selector: 'ngx-charts-chart',\r\n  template: `\r\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\r\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\r\n        <ng-content></ng-content>\r\n      </svg>\r\n      <ngx-charts-scale-legend\r\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\r\n        class=\"chart-legend\"\r\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\r\n        [valueRange]=\"legendOptions.domain\"\r\n        [colors]=\"legendOptions.colors\"\r\n        [height]=\"view[1]\"\r\n        [width]=\"legendWidth\"\r\n      >\r\n      </ngx-charts-scale-legend>\r\n      <ngx-charts-legend\r\n        *ngIf=\"showLegend && legendType === 'legend'\"\r\n        class=\"chart-legend\"\r\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\r\n        [data]=\"legendOptions.domain\"\r\n        [title]=\"legendOptions.title\"\r\n        [colors]=\"legendOptions.colors\"\r\n        [height]=\"view[1]\"\r\n        [width]=\"legendWidth\"\r\n        [activeEntries]=\"activeEntries\"\r\n        [hiddenEntries]=\"hiddenEntries\"\r\n        (labelClick)=\"legendLabelClick.emit($event)\"\r\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\r\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\r\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\r\n        (labelToggle)=\"legendLabelToggle.emit($event)\"\r\n      >\r\n      </ngx-charts-legend>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\r\n    ])\r\n  ]\r\n})\r\nexport class ChartComponent implements OnChanges {\r\n  @Input() view;\r\n  @Input() showLegend = false;\r\n  @Input() legendOptions: any;\r\n\r\n  // remove\r\n  @Input() data;\r\n  @Input() legendData;\r\n  @Input() legendType: any;\r\n  @Input() colors: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() hiddenEntries: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() legendLabelToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  chartWidth: any;\r\n  title: any;\r\n  legendWidth: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    let legendColumns = 0;\r\n    if (this.showLegend) {\r\n      this.legendType = this.getLegendType();\r\n\r\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\r\n        if (this.legendType === 'scaleLegend') {\r\n          legendColumns = 1;\r\n        } else {\r\n          legendColumns = 2;\r\n        }\r\n      }\r\n    }\r\n\r\n    const chartColumns = 12 - legendColumns;\r\n\r\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\r\n    this.legendWidth =\r\n      !this.legendOptions || this.legendOptions.position === 'right'\r\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\r\n        : this.chartWidth;\r\n  }\r\n\r\n  getLegendType(): string {\r\n    if (this.legendOptions.scaleType === 'linear') {\r\n      return 'scaleLegend';\r\n    } else {\r\n      return 'legend';\r\n    }\r\n  }\r\n}\r\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\r\n\r\n/**\r\n * Visibility Observer\r\n */\r\n@Directive({\r\n  selector: 'visibility-observer'\r\n})\r\nexport class VisibilityObserver {\r\n  @Output() visible: EventEmitter<any> = new EventEmitter();\r\n\r\n  timeout: any;\r\n  isVisible: boolean = false;\r\n\r\n  constructor(private element: ElementRef, private zone: NgZone) {\r\n    this.runCheck();\r\n  }\r\n\r\n  destroy(): void {\r\n    clearTimeout(this.timeout);\r\n  }\r\n\r\n  onVisibilityChange(): void {\r\n    // trigger zone recalc for columns\r\n    this.zone.run(() => {\r\n      this.isVisible = true;\r\n      this.visible.emit(true);\r\n    });\r\n  }\r\n\r\n  runCheck(): void {\r\n    const check = () => {\r\n      if (!this.element) {\r\n        return;\r\n      }\r\n\r\n      // https://davidwalsh.name/offsetheight-visibility\r\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\r\n\r\n      if (offsetHeight && offsetWidth) {\r\n        clearTimeout(this.timeout);\r\n        this.onVisibilityChange();\r\n      } else {\r\n        clearTimeout(this.timeout);\r\n        this.zone.runOutsideAngular(() => {\r\n          this.timeout = setTimeout(() => check(), 100);\r\n        });\r\n      }\r\n    };\r\n\r\n    this.zone.runOutsideAngular(() => {\r\n      this.timeout = setTimeout(() => check());\r\n    });\r\n  }\r\n}\r\n","import {\r\n  ElementRef,\r\n  NgZone,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  OnDestroy,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\n\r\nimport { fromEvent as observableFromEvent } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { VisibilityObserver } from '../utils/visibility-observer';\r\n\r\n@Component({\r\n  selector: 'base-chart',\r\n  template: ` <div></div> `\r\n})\r\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\r\n  @Input() results: any;\r\n  @Input() view: [number, number];\r\n  @Input() scheme: any = 'cool';\r\n  @Input() schemeType: string = 'ordinal';\r\n  @Input() customColors: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  width: number;\r\n  height: number;\r\n  resizeSubscription: any;\r\n  visibilityObserver: VisibilityObserver;\r\n\r\n  constructor(protected chartElement: ElementRef, protected zone: NgZone, protected cd: ChangeDetectorRef) {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.bindWindowResizeEvent();\r\n\r\n    // listen for visibility of the element for hidden by default scenario\r\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\r\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.unbindEvents();\r\n    if (this.visibilityObserver) {\r\n      this.visibilityObserver.visible.unsubscribe();\r\n      this.visibilityObserver.destroy();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.results) {\r\n      this.results = this.cloneData(this.results);\r\n    } else {\r\n      this.results = [];\r\n    }\r\n\r\n    if (this.view) {\r\n      this.width = this.view[0];\r\n      this.height = this.view[1];\r\n    } else {\r\n      const dims = this.getContainerDims();\r\n      if (dims) {\r\n        this.width = dims.width;\r\n        this.height = dims.height;\r\n      }\r\n    }\r\n\r\n    // default values if width or height are 0 or undefined\r\n    if (!this.width) {\r\n      this.width = 600;\r\n    }\r\n\r\n    if (!this.height) {\r\n      this.height = 400;\r\n    }\r\n\r\n    this.width = Math.floor(this.width);\r\n    this.height = Math.floor(this.height);\r\n\r\n    if (this.cd) {\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  getContainerDims(): any {\r\n    let width;\r\n    let height;\r\n    const hostElem = this.chartElement.nativeElement;\r\n\r\n    if (hostElem.parentNode !== null) {\r\n      // Get the container dimensions\r\n      const dims = hostElem.parentNode.getBoundingClientRect();\r\n      width = dims.width;\r\n      height = dims.height;\r\n    }\r\n\r\n    if (width && height) {\r\n      return { width, height };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Converts all date objects that appear as name\r\n   * into formatted date strings\r\n   */\r\n  formatDates(): void {\r\n    for (let i = 0; i < this.results.length; i++) {\r\n      const g = this.results[i];\r\n      g.label = g.name;\r\n      if (g.label instanceof Date) {\r\n        g.label = g.label.toLocaleDateString();\r\n      }\r\n\r\n      if (g.series) {\r\n        for (let j = 0; j < g.series.length; j++) {\r\n          const d = g.series[j];\r\n          d.label = d.name;\r\n          if (d.label instanceof Date) {\r\n            d.label = d.label.toLocaleDateString();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  protected unbindEvents(): void {\r\n    if (this.resizeSubscription) {\r\n      this.resizeSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  private bindWindowResizeEvent(): void {\r\n    const source = observableFromEvent(window, 'resize');\r\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\r\n      this.update();\r\n      if (this.cd) {\r\n        this.cd.markForCheck();\r\n      }\r\n    });\r\n    this.resizeSubscription = subscription;\r\n  }\r\n\r\n  /**\r\n   * Clones the data into a new object\r\n   *\r\n   * @memberOf BaseChart\r\n   */\r\n  private cloneData(data): any {\r\n    const results = [];\r\n\r\n    for (const item of data) {\r\n      const copy = {\r\n        name: item['name']\r\n      };\r\n\r\n      if (item['value'] !== undefined) {\r\n        copy['value'] = item['value'];\r\n      }\r\n\r\n      if (item['series'] !== undefined) {\r\n        copy['series'] = [];\r\n        for (const seriesItem of item['series']) {\r\n          const seriesItemCopy = Object.assign({}, seriesItem);\r\n          copy['series'].push(seriesItemCopy);\r\n        }\r\n      }\r\n\r\n      if (item['extra'] !== undefined) {\r\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\r\n      }\r\n\r\n      results.push(copy);\r\n    }\r\n\r\n    return results;\r\n  }\r\n}\r\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-axis-label]',\r\n  template: `\r\n    <svg:text\r\n      [attr.stroke-width]=\"strokeWidth\"\r\n      [attr.x]=\"x\"\r\n      [attr.y]=\"y\"\r\n      [attr.text-anchor]=\"textAnchor\"\r\n      [attr.transform]=\"transform\"\r\n    >\r\n      {{ label }}\r\n    </svg:text>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AxisLabelComponent implements OnChanges {\r\n  @Input() orient;\r\n  @Input() label;\r\n  @Input() offset;\r\n  @Input() width;\r\n  @Input() height;\r\n\r\n  x: any;\r\n  y: any;\r\n  transform: any;\r\n  strokeWidth: any;\r\n  textAnchor: any;\r\n  element: ElementRef;\r\n  textHeight = 25;\r\n  margin = 5;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.strokeWidth = '0.01';\r\n    this.textAnchor = 'middle';\r\n    this.transform = '';\r\n\r\n    switch (this.orient) {\r\n      case 'top':\r\n        this.y = this.offset;\r\n        this.x = this.width / 2;\r\n        break;\r\n      case 'bottom':\r\n        this.y = this.offset;\r\n        this.x = this.width / 2;\r\n        break;\r\n      case 'left':\r\n        this.y = -(this.offset + this.textHeight + this.margin);\r\n        this.x = -this.height / 2;\r\n        this.transform = 'rotate(270)';\r\n        break;\r\n      case 'right':\r\n        this.y = this.offset + this.margin;\r\n        this.x = -this.height / 2;\r\n        this.transform = 'rotate(270)';\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n}\r\n","export function trimLabel(s, max = 16): string {\r\n  if (typeof s !== 'string') {\r\n    if (typeof s === 'number') {\r\n      return s + '';\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  s = s.trim();\r\n  if (s.length <= max) {\r\n    return s;\r\n  } else {\r\n    return `${s.slice(0, max)}...`;\r\n  }\r\n}\r\n","export function reduceTicks(ticks, maxTicks) {\r\n  if (ticks.length > maxTicks) {\r\n    const reduced = [];\r\n    const modulus = Math.floor(ticks.length / maxTicks);\r\n    for (let i = 0; i < ticks.length; i++) {\r\n      if (i % modulus === 0) {\r\n        reduced.push(ticks[i]);\r\n      }\r\n    }\r\n    ticks = reduced;\r\n  }\r\n\r\n  return ticks;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ElementRef,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { reduceTicks } from './ticks.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-x-axis-ticks]',\r\n  template: `\r\n    <svg:g #ticksel>\r\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\r\n        <title>{{ tickFormat(tick) }}</title>\r\n        <svg:text\r\n          stroke-width=\"0.01\"\r\n          [attr.text-anchor]=\"textAnchor\"\r\n          [attr.transform]=\"textTransform\"\r\n          [style.font-size]=\"'12px'\"\r\n        >\r\n          {{ tickTrim(tickFormat(tick)) }}\r\n        </svg:text>\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\r\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\r\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\r\n  @Input() scale;\r\n  @Input() orient;\r\n  @Input() tickArguments = [5];\r\n  @Input() tickValues: any[];\r\n  @Input() tickStroke = '#ccc';\r\n  @Input() trimTicks: boolean = true;\r\n  @Input() maxTickLength: number = 16;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() gridLineHeight;\r\n  @Input() width;\r\n  @Input() rotateTicks: boolean = true;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  verticalSpacing: number = 20;\r\n  rotateLabels: boolean = false;\r\n  innerTickSize: number = 6;\r\n  outerTickSize: number = 6;\r\n  tickPadding: number = 3;\r\n  textAnchor: string = 'middle';\r\n  maxTicksLength: number = 0;\r\n  maxAllowedLength: number = 16;\r\n  adjustedScale: any;\r\n  textTransform: any;\r\n  ticks: any;\r\n  tickFormat: (o: any) => any;\r\n  height: number = 0;\r\n\r\n  @ViewChild('ticksel') ticksElement: ElementRef;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  updateDims(): void {\r\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\r\n    if (height !== this.height) {\r\n      this.height = height;\r\n      this.dimensionsChanged.emit({ height });\r\n      setTimeout(() => this.updateDims());\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    const scale = this.scale;\r\n    this.ticks = this.getTicks();\r\n\r\n    if (this.tickFormatting) {\r\n      this.tickFormat = this.tickFormatting;\r\n    } else if (scale.tickFormat) {\r\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\r\n    } else {\r\n      this.tickFormat = function (d) {\r\n        if (d.constructor.name === 'Date') {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\r\n\r\n    this.adjustedScale = this.scale.bandwidth\r\n      ? function (d) {\r\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\r\n        }\r\n      : this.scale;\r\n\r\n    this.textTransform = '';\r\n    if (angle && angle !== 0) {\r\n      this.textTransform = `rotate(${angle})`;\r\n      this.textAnchor = 'end';\r\n      this.verticalSpacing = 10;\r\n    } else {\r\n      this.textAnchor = 'middle';\r\n    }\r\n\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  getRotationAngle(ticks): number {\r\n    let angle = 0;\r\n    this.maxTicksLength = 0;\r\n    for (let i = 0; i < ticks.length; i++) {\r\n      const tick = this.tickFormat(ticks[i]).toString();\r\n      let tickLength = tick.length;\r\n      if (this.trimTicks) {\r\n        tickLength = this.tickTrim(tick).length;\r\n      }\r\n\r\n      if (tickLength > this.maxTicksLength) {\r\n        this.maxTicksLength = tickLength;\r\n      }\r\n    }\r\n\r\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\r\n    const charWidth = 8; // need to measure this\r\n    const wordWidth = len * charWidth;\r\n\r\n    let baseWidth = wordWidth;\r\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\r\n\r\n    // calculate optimal angle\r\n    while (baseWidth > maxBaseWidth && angle > -90) {\r\n      angle -= 30;\r\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  getTicks() {\r\n    let ticks;\r\n    const maxTicks = this.getMaxTicks(20);\r\n    const maxScaleTicks = this.getMaxTicks(100);\r\n\r\n    if (this.tickValues) {\r\n      ticks = this.tickValues;\r\n    } else if (this.scale.ticks) {\r\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\r\n    } else {\r\n      ticks = this.scale.domain();\r\n      ticks = reduceTicks(ticks, maxTicks);\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getMaxTicks(tickWidth: number): number {\r\n    return Math.floor(this.width / tickWidth);\r\n  }\r\n\r\n  tickTransform(tick): string {\r\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\r\n  }\r\n\r\n  gridLineTransform(): string {\r\n    return `translate(0,${-this.verticalSpacing - 5})`;\r\n  }\r\n\r\n  tickTrim(label: string): string {\r\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\n\r\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-x-axis]',\r\n  template: `\r\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\r\n      <svg:g\r\n        ngx-charts-x-axis-ticks\r\n        *ngIf=\"xScale\"\r\n        [trimTicks]=\"trimTicks\"\r\n        [rotateTicks]=\"rotateTicks\"\r\n        [maxTickLength]=\"maxTickLength\"\r\n        [tickFormatting]=\"tickFormatting\"\r\n        [tickArguments]=\"tickArguments\"\r\n        [tickStroke]=\"tickStroke\"\r\n        [scale]=\"xScale\"\r\n        [orient]=\"xOrient\"\r\n        [showGridLines]=\"showGridLines\"\r\n        [gridLineHeight]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n        [tickValues]=\"ticks\"\r\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-axis-label\r\n        *ngIf=\"showLabel\"\r\n        [label]=\"labelText\"\r\n        [offset]=\"labelOffset\"\r\n        [orient]=\"'bottom'\"\r\n        [height]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class XAxisComponent implements OnChanges {\r\n  @Input() xScale;\r\n  @Input() dims;\r\n  @Input() trimTicks: boolean;\r\n  @Input() rotateTicks: boolean = true;\r\n  @Input() maxTickLength: number;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() showLabel;\r\n  @Input() labelText;\r\n  @Input() ticks: any[];\r\n  @Input() xAxisTickInterval;\r\n  @Input() xAxisTickCount: any;\r\n  @Input() xOrient: string = 'bottom';\r\n  @Input() xAxisOffset: number = 0;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  xAxisClassName: string = 'x axis';\r\n\r\n  tickArguments: any;\r\n  transform: any;\r\n  labelOffset: number = 0;\r\n  fill: string = 'none';\r\n  stroke: string = 'stroke';\r\n  tickStroke: string = '#ccc';\r\n  strokeWidth: string = 'none';\r\n  padding: number = 5;\r\n\r\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\r\n\r\n    if (typeof this.xAxisTickCount !== 'undefined') {\r\n      this.tickArguments = [this.xAxisTickCount];\r\n    }\r\n  }\r\n\r\n  emitTicksHeight({ height }): void {\r\n    const newLabelOffset = height + 25 + 5;\r\n    if (newLabelOffset !== this.labelOffset) {\r\n      this.labelOffset = newLabelOffset;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ height });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Generates a rounded rectanglar path\r\n *\r\n * @export\r\n * @param x, y, w, h, r, tl, tr, bl, br\r\n */\r\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\r\n  let retval = '';\r\n\r\n  w = Math.floor(w);\r\n  h = Math.floor(h);\r\n\r\n  w = w === 0 ? 1 : w;\r\n  h = h === 0 ? 1 : h;\r\n\r\n  retval = `M${[x + r, y]}`;\r\n  retval += `h${w - 2 * r}`;\r\n\r\n  if (tr) {\r\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\r\n  } else {\r\n    retval += `h${r}v${r}`;\r\n  }\r\n\r\n  retval += `v${h - 2 * r}`;\r\n\r\n  if (br) {\r\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\r\n  } else {\r\n    retval += `v${r}h${-r}`;\r\n  }\r\n\r\n  retval += `h${2 * r - w}`;\r\n\r\n  if (bl) {\r\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\r\n  } else {\r\n    retval += `h${-r}v${-r}`;\r\n  }\r\n\r\n  retval += `v${2 * r - h}`;\r\n\r\n  if (tl) {\r\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\r\n  } else {\r\n    retval += `v${-r}h${r}`;\r\n  }\r\n\r\n  retval += `z`;\r\n\r\n  return retval;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  ElementRef,\r\n  ViewChild,\r\n  EventEmitter,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { reduceTicks } from './ticks.helper';\r\nimport { roundedRect } from '../../common/shape.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-y-axis-ticks]',\r\n  template: `\r\n    <svg:g #ticksel>\r\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\r\n        <title>{{ tickFormat(tick) }}</title>\r\n        <svg:text\r\n          stroke-width=\"0.01\"\r\n          [attr.dy]=\"dy\"\r\n          [attr.x]=\"x1\"\r\n          [attr.y]=\"y1\"\r\n          [attr.text-anchor]=\"textAnchor\"\r\n          [style.font-size]=\"'12px'\"\r\n        >\r\n          {{ tickTrim(tickFormat(tick)) }}\r\n        </svg:text>\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:path\r\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\r\n      class=\"reference-area\"\r\n      [attr.d]=\"referenceAreaPath\"\r\n      [attr.transform]=\"gridLineTransform()\"\r\n    />\r\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\r\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\r\n        <svg:line\r\n          *ngIf=\"orient === 'left'\"\r\n          class=\"gridline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"gridLineWidth\"\r\n        />\r\n        <svg:line\r\n          *ngIf=\"orient === 'right'\"\r\n          class=\"gridline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"-gridLineWidth\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:g *ngFor=\"let refLine of referenceLines\">\r\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\r\n        <svg:line\r\n          class=\"refline-path gridline-path-horizontal\"\r\n          x1=\"0\"\r\n          [attr.x2]=\"gridLineWidth\"\r\n          [attr.transform]=\"gridLineTransform()\"\r\n        />\r\n        <svg:g *ngIf=\"showRefLabels\">\r\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\r\n          <svg:text\r\n            class=\"refline-label\"\r\n            [attr.dy]=\"dy\"\r\n            [attr.y]=\"-6\"\r\n            [attr.x]=\"gridLineWidth\"\r\n            [attr.text-anchor]=\"textAnchor\"\r\n          >\r\n            {{ refLine.name }}\r\n          </svg:text>\r\n        </svg:g>\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\r\n  @Input() scale;\r\n  @Input() orient;\r\n  @Input() tickArguments = [5];\r\n  @Input() tickValues: any[];\r\n  @Input() tickStroke = '#ccc';\r\n  @Input() trimTicks: boolean = true;\r\n  @Input() maxTickLength: number = 16;\r\n  @Input() tickFormatting;\r\n  @Input() showGridLines = false;\r\n  @Input() gridLineWidth;\r\n  @Input() height;\r\n  @Input() referenceLines;\r\n  @Input() showRefLabels: boolean = false;\r\n  @Input() showRefLines: boolean = false;\r\n\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  innerTickSize: any = 6;\r\n  tickPadding: any = 3;\r\n  tickSpacing: any;\r\n  verticalSpacing: number = 20;\r\n  textAnchor: any = 'middle';\r\n  dy: any;\r\n  x1: any;\r\n  x2: any;\r\n  y1: any;\r\n  y2: any;\r\n  adjustedScale: any;\r\n  transform: (o: any) => string;\r\n  tickFormat: (o: any) => string;\r\n  ticks: any;\r\n  width: number = 0;\r\n  outerTickSize: number = 6;\r\n  rotateLabels: boolean = false;\r\n  refMax: number;\r\n  refMin: number;\r\n  referenceLineLength: number = 0;\r\n  referenceAreaPath: string;\r\n\r\n  @ViewChild('ticksel') ticksElement: ElementRef;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  updateDims(): void {\r\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\r\n    if (width !== this.width) {\r\n      this.width = width;\r\n      this.dimensionsChanged.emit({ width });\r\n      setTimeout(() => this.updateDims());\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    let scale;\r\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\r\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\r\n\r\n    scale = this.scale;\r\n    this.ticks = this.getTicks();\r\n\r\n    if (this.tickFormatting) {\r\n      this.tickFormat = this.tickFormatting;\r\n    } else if (scale.tickFormat) {\r\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\r\n    } else {\r\n      this.tickFormat = function (d) {\r\n        if (d.constructor.name === 'Date') {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    this.adjustedScale = scale.bandwidth\r\n      ? function (d) {\r\n          return scale(d) + scale.bandwidth() * 0.5;\r\n        }\r\n      : scale;\r\n\r\n    if (this.showRefLines && this.referenceLines) {\r\n      this.setReferencelines();\r\n    }\r\n\r\n    switch (this.orient) {\r\n      case 'top':\r\n        this.transform = function (tick) {\r\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\r\n        };\r\n        this.textAnchor = 'middle';\r\n        this.y2 = this.innerTickSize * sign;\r\n        this.y1 = this.tickSpacing * sign;\r\n        this.dy = sign < 0 ? '0em' : '.71em';\r\n        break;\r\n      case 'bottom':\r\n        this.transform = function (tick) {\r\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\r\n        };\r\n        this.textAnchor = 'middle';\r\n        this.y2 = this.innerTickSize * sign;\r\n        this.y1 = this.tickSpacing * sign;\r\n        this.dy = sign < 0 ? '0em' : '.71em';\r\n        break;\r\n      case 'left':\r\n        this.transform = function (tick) {\r\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\r\n        };\r\n        this.textAnchor = 'end';\r\n        this.x2 = this.innerTickSize * -sign;\r\n        this.x1 = this.tickSpacing * -sign;\r\n        this.dy = '.32em';\r\n        break;\r\n      case 'right':\r\n        this.transform = function (tick) {\r\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\r\n        };\r\n        this.textAnchor = 'start';\r\n        this.x2 = this.innerTickSize * -sign;\r\n        this.x1 = this.tickSpacing * -sign;\r\n        this.dy = '.32em';\r\n        break;\r\n      default:\r\n    }\r\n    setTimeout(() => this.updateDims());\r\n  }\r\n\r\n  setReferencelines(): void {\r\n    this.refMin = this.adjustedScale(\r\n      Math.min.apply(\r\n        null,\r\n        this.referenceLines.map(item => item.value)\r\n      )\r\n    );\r\n    this.refMax = this.adjustedScale(\r\n      Math.max.apply(\r\n        null,\r\n        this.referenceLines.map(item => item.value)\r\n      )\r\n    );\r\n    this.referenceLineLength = this.referenceLines.length;\r\n\r\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\r\n      false,\r\n      false,\r\n      false,\r\n      false\r\n    ]);\r\n  }\r\n\r\n  getTicks(): any {\r\n    let ticks;\r\n    const maxTicks = this.getMaxTicks(20);\r\n    const maxScaleTicks = this.getMaxTicks(50);\r\n\r\n    if (this.tickValues) {\r\n      ticks = this.tickValues;\r\n    } else if (this.scale.ticks) {\r\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\r\n    } else {\r\n      ticks = this.scale.domain();\r\n      ticks = reduceTicks(ticks, maxTicks);\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getMaxTicks(tickHeight: number): number {\r\n    return Math.floor(this.height / tickHeight);\r\n  }\r\n\r\n  tickTransform(tick): string {\r\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\r\n  }\r\n\r\n  gridLineTransform(): string {\r\n    return `translate(5,0)`;\r\n  }\r\n\r\n  tickTrim(label: string): string {\r\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ViewChild,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-y-axis]',\r\n  template: `\r\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\r\n      <svg:g\r\n        ngx-charts-y-axis-ticks\r\n        *ngIf=\"yScale\"\r\n        [trimTicks]=\"trimTicks\"\r\n        [maxTickLength]=\"maxTickLength\"\r\n        [tickFormatting]=\"tickFormatting\"\r\n        [tickArguments]=\"tickArguments\"\r\n        [tickValues]=\"ticks\"\r\n        [tickStroke]=\"tickStroke\"\r\n        [scale]=\"yScale\"\r\n        [orient]=\"yOrient\"\r\n        [showGridLines]=\"showGridLines\"\r\n        [gridLineWidth]=\"dims.width\"\r\n        [referenceLines]=\"referenceLines\"\r\n        [showRefLines]=\"showRefLines\"\r\n        [showRefLabels]=\"showRefLabels\"\r\n        [height]=\"dims.height\"\r\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\r\n      />\r\n\r\n      <svg:g\r\n        ngx-charts-axis-label\r\n        *ngIf=\"showLabel\"\r\n        [label]=\"labelText\"\r\n        [offset]=\"labelOffset\"\r\n        [orient]=\"yOrient\"\r\n        [height]=\"dims.height\"\r\n        [width]=\"dims.width\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class YAxisComponent implements OnChanges {\r\n  @Input() yScale;\r\n  @Input() dims;\r\n  @Input() trimTicks: boolean;\r\n  @Input() maxTickLength: number;\r\n  @Input() tickFormatting;\r\n  @Input() ticks: any[];\r\n  @Input() showGridLines = false;\r\n  @Input() showLabel;\r\n  @Input() labelText;\r\n  @Input() yAxisTickInterval;\r\n  @Input() yAxisTickCount: any;\r\n  @Input() yOrient: string = 'left';\r\n  @Input() referenceLines;\r\n  @Input() showRefLines;\r\n  @Input() showRefLabels;\r\n  @Input() yAxisOffset: number = 0;\r\n  @Output() dimensionsChanged = new EventEmitter();\r\n\r\n  yAxisClassName: string = 'y axis';\r\n  tickArguments: any;\r\n  offset: any;\r\n  transform: any;\r\n  labelOffset: number = 15;\r\n  fill: string = 'none';\r\n  stroke: string = '#CCC';\r\n  tickStroke: string = '#CCC';\r\n  strokeWidth: number = 1;\r\n  padding: number = 5;\r\n\r\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.offset = -(this.yAxisOffset + this.padding);\r\n    if (this.yOrient === 'right') {\r\n      this.labelOffset = 65;\r\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\r\n    } else {\r\n      this.offset = this.offset;\r\n      this.transform = `translate(${this.offset} , 0)`;\r\n    }\r\n\r\n    if (this.yAxisTickCount !== undefined) {\r\n      this.tickArguments = [this.yAxisTickCount];\r\n    }\r\n  }\r\n\r\n  emitTicksWidth({ width }): void {\r\n    if (width !== this.labelOffset && this.yOrient === 'right') {\r\n      this.labelOffset = width + this.labelOffset;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ width });\r\n      }, 0);\r\n    } else if (width !== this.labelOffset) {\r\n      this.labelOffset = width;\r\n      setTimeout(() => {\r\n        this.dimensionsChanged.emit({ width });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n","export enum StyleTypes {\r\n  popover = 'popover' as any,\r\n  tooltip = 'tooltip' as any\r\n}\r\n","export enum AlignmentTypes {\r\n  left = 'left' as any,\r\n  center = 'center' as any,\r\n  right = 'right' as any\r\n}\r\n","export enum ShowTypes {\r\n  all = 'all' as any,\r\n  focus = 'focus' as any,\r\n  mouseover = 'mouseover' as any\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AxisLabelComponent } from './axis-label.component';\r\nimport { XAxisComponent } from './x-axis.component';\r\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\r\nimport { YAxisComponent } from './y-axis.component';\r\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\r\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\r\n})\r\nexport class AxesModule {}\r\n","import {\r\n  Directive,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewContainerRef,\r\n  Renderer2,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { PlacementTypes } from './position';\r\nimport { StyleTypes } from './style.type';\r\nimport { AlignmentTypes } from './alignment.type';\r\nimport { ShowTypes } from './show.type';\r\n\r\nimport { TooltipService } from './tooltip.service';\r\n\r\n@Directive({ selector: '[ngx-tooltip]' })\r\nexport class TooltipDirective implements OnDestroy {\r\n  @Input() tooltipCssClass: string = '';\r\n  @Input() tooltipTitle: string = '';\r\n  @Input() tooltipAppendToBody: boolean = true;\r\n  @Input() tooltipSpacing: number = 10;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipShowCaret: boolean = true;\r\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\r\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\r\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\r\n  @Input() tooltipCloseOnClickOutside: boolean = true;\r\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\r\n  @Input() tooltipHideTimeout: number = 300;\r\n  @Input() tooltipShowTimeout: number = 100;\r\n  @Input() tooltipTemplate: any;\r\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\r\n  @Input() tooltipContext: any;\r\n  @Input() tooltipImmediateExit: boolean = false;\r\n\r\n  @Output() show = new EventEmitter();\r\n  @Output() hide = new EventEmitter();\r\n\r\n  private get listensForFocus(): boolean {\r\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\r\n  }\r\n\r\n  private get listensForHover(): boolean {\r\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\r\n  }\r\n\r\n  private component: any;\r\n  private timeout: any;\r\n  private mouseLeaveContentEvent: any;\r\n  private mouseEnterContentEvent: any;\r\n  private documentClickEvent: any;\r\n\r\n  constructor(\r\n    private tooltipService: TooltipService,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private renderer: Renderer2\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.hideTooltip(true);\r\n  }\r\n\r\n  @HostListener('focusin')\r\n  onFocus(): void {\r\n    if (this.listensForFocus) {\r\n      this.showTooltip();\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur(): void {\r\n    if (this.listensForFocus) {\r\n      this.hideTooltip(true);\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    if (this.listensForHover) {\r\n      this.showTooltip();\r\n    }\r\n  }\r\n\r\n  @HostListener('mouseleave', ['$event.target'])\r\n  onMouseLeave(target): void {\r\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\r\n      clearTimeout(this.timeout);\r\n\r\n      if (this.component) {\r\n        const contentDom = this.component.instance.element.nativeElement;\r\n        const contains = contentDom.contains(target);\r\n        if (contains) return;\r\n      }\r\n\r\n      this.hideTooltip(this.tooltipImmediateExit);\r\n    }\r\n  }\r\n\r\n  @HostListener('click')\r\n  onMouseClick() {\r\n    if (this.listensForHover) {\r\n      this.hideTooltip(true);\r\n    }\r\n  }\r\n\r\n  showTooltip(immediate?: boolean): void {\r\n    if (this.component || this.tooltipDisabled) return;\r\n\r\n    const time = immediate\r\n      ? 0\r\n      : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\r\n\r\n    clearTimeout(this.timeout);\r\n    this.timeout = setTimeout(() => {\r\n      this.tooltipService.destroyAll();\r\n\r\n      const options = this.createBoundOptions();\r\n      this.component = this.tooltipService.create(options);\r\n\r\n      // add a tiny timeout to avoid event re-triggers\r\n      setTimeout(() => {\r\n        if (this.component) {\r\n          this.addHideListeners(this.component.instance.element.nativeElement);\r\n        }\r\n      }, 10);\r\n\r\n      this.show.emit(true);\r\n    }, time);\r\n  }\r\n\r\n  addHideListeners(tooltip): void {\r\n    // on mouse enter, cancel the hide triggered by the leave\r\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\r\n      clearTimeout(this.timeout);\r\n    });\r\n\r\n    // content mouse leave listener\r\n    if (this.tooltipCloseOnMouseLeave) {\r\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\r\n        this.hideTooltip(this.tooltipImmediateExit);\r\n      });\r\n    }\r\n\r\n    // content close on click outside\r\n    if (this.tooltipCloseOnClickOutside) {\r\n      this.documentClickEvent = this.renderer.listen(document, 'click', event => {\r\n        const contains = tooltip.contains(event.target);\r\n        if (!contains) this.hideTooltip();\r\n      });\r\n    }\r\n  }\r\n\r\n  hideTooltip(immediate: boolean = false): void {\r\n    if (!this.component) return;\r\n\r\n    const destroyFn = () => {\r\n      // remove events\r\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\r\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\r\n      if (this.documentClickEvent) this.documentClickEvent();\r\n\r\n      // emit events\r\n      this.hide.emit(true);\r\n\r\n      // destroy component\r\n      this.tooltipService.destroy(this.component);\r\n      this.component = undefined;\r\n    };\r\n\r\n    clearTimeout(this.timeout);\r\n    if (!immediate) {\r\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\r\n    } else {\r\n      destroyFn();\r\n    }\r\n  }\r\n\r\n  private createBoundOptions(): any {\r\n    return {\r\n      title: this.tooltipTitle,\r\n      template: this.tooltipTemplate,\r\n      host: this.viewContainerRef.element,\r\n      placement: this.tooltipPlacement,\r\n      alignment: this.tooltipAlignment,\r\n      type: this.tooltipType,\r\n      showCaret: this.tooltipShowCaret,\r\n      cssClass: this.tooltipCssClass,\r\n      spacing: this.tooltipSpacing,\r\n      context: this.tooltipContext\r\n    };\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TooltipDirective } from './tooltip.directive';\r\nimport { TooltipContentComponent } from './tooltip.component';\r\nimport { TooltipService } from './tooltip.service';\r\n\r\nimport { InjectionService } from './injection.service';\r\n\r\n@NgModule({\r\n  declarations: [TooltipContentComponent, TooltipDirective],\r\n  providers: [InjectionService, TooltipService],\r\n  exports: [TooltipContentComponent, TooltipDirective],\r\n  imports: [CommonModule],\r\n  entryComponents: [TooltipContentComponent]\r\n})\r\nexport class TooltipModule {}\r\n","/**\r\n * Formats a label given a date, number or string.\r\n *\r\n * @export\r\n */\r\nexport function formatLabel(label: any): string {\r\n  if (label instanceof Date) {\r\n    label = label.toLocaleDateString();\r\n  } else {\r\n    label = label.toLocaleString();\r\n  }\r\n\r\n  return label;\r\n}\r\n\r\n/**\r\n * Escapes a label.\r\n *\r\n * @export\r\n */\r\nexport function escapeLabel(label: any): string {\r\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\r\n    return {\r\n      '&': '&amp;',\r\n      // tslint:disable-next-line: quotemark\r\n      \"'\": '&#x27;',\r\n      '`': '&#x60;',\r\n      '\"': '&quot;',\r\n      '<': '&lt;',\r\n      '>': '&gt;'\r\n    }[match];\r\n  });\r\n}\r\n","const cache = {};\r\n\r\n/**\r\n * Generates a short id.\r\n *\r\n * Description:\r\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\r\n *   This should only be used for JavaScript specific models.\r\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\r\n *\r\n *   Example: `ebgf`\r\n */\r\nexport function id(): string {\r\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\r\n\r\n  // append a 'a' because neo gets mad\r\n  newId = `a${newId}`;\r\n\r\n  // ensure not already used\r\n  if (!cache[newId]) {\r\n    cache[newId] = true;\r\n    return newId;\r\n  }\r\n\r\n  return id();\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { id } from '../utils/id';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-circle-series]',\r\n  template: `\r\n    <svg:g *ngIf=\"circle\">\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-linear-gradient\r\n          orientation=\"vertical\"\r\n          [name]=\"gradientId\"\r\n          [stops]=\"circle.gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:rect\r\n        *ngIf=\"barVisible && type === 'standard'\"\r\n        [@animationState]=\"'active'\"\r\n        [attr.x]=\"circle.cx - circle.radius\"\r\n        [attr.y]=\"circle.cy\"\r\n        [attr.width]=\"circle.radius * 2\"\r\n        [attr.height]=\"circle.height\"\r\n        [attr.fill]=\"gradientFill\"\r\n        class=\"tooltip-bar\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-circle\r\n        *ngIf=\"!isHidden({ name: circle.seriesName })\"\r\n        class=\"circle\"\r\n        [cx]=\"circle.cx\"\r\n        [cy]=\"circle.cy\"\r\n        [r]=\"circle.radius\"\r\n        [fill]=\"circle.color\"\r\n        [class.active]=\"isActive({ name: circle.seriesName })\"\r\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\r\n        [data]=\"circle.value\"\r\n        [classNames]=\"circle.classNames\"\r\n        (select)=\"onClick(circle.data)\"\r\n        (activate)=\"activateCircle()\"\r\n        (deactivate)=\"deactivateCircle()\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"circle.data\"\r\n        [hidden]=\"isHidden({ name: circle.seriesName })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0\r\n        }),\r\n        animate(250, style({ opacity: 1 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class CircleSeriesComponent implements OnChanges, OnInit {\r\n  @Input() data;\r\n  @Input() type = 'standard';\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors: ColorHelper;\r\n  @Input() scaleType;\r\n  @Input() visibleValue;\r\n  @Input() activeEntries: any[];\r\n  @Input() hiddenEntries: any[];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  areaPath: any;\r\n  circle: any; // active circle\r\n  barVisible: boolean = false;\r\n  gradientId: string;\r\n  gradientFill: string;\r\n\r\n  ngOnInit() {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.circle = this.getActiveCircle();\r\n  }\r\n\r\n  getActiveCircle(): {} {\r\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\r\n      const label = d.name;\r\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\r\n    });\r\n\r\n    if (indexActiveDataPoint === -1) {\r\n      // No valid point is 'active/hovered over' at this moment.\r\n      return undefined;\r\n    }\r\n\r\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\r\n  }\r\n\r\n  mapDataPointToCircle(d: any, i: number): any {\r\n    const seriesName = this.data.name;\r\n\r\n    const value = d.value;\r\n    const label = d.name;\r\n    const tooltipLabel = formatLabel(label);\r\n\r\n    let cx;\r\n    if (this.scaleType === 'time') {\r\n      cx = this.xScale(label);\r\n    } else if (this.scaleType === 'linear') {\r\n      cx = this.xScale(Number(label));\r\n    } else {\r\n      cx = this.xScale(label);\r\n    }\r\n\r\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\r\n    const radius = 5;\r\n    const height = this.yScale.range()[0] - cy;\r\n    const opacity = 1;\r\n\r\n    let color;\r\n    if (this.colors.scaleType === 'linear') {\r\n      if (this.type === 'standard') {\r\n        color = this.colors.getColor(value);\r\n      } else {\r\n        color = this.colors.getColor(d.d1);\r\n      }\r\n    } else {\r\n      color = this.colors.getColor(seriesName);\r\n    }\r\n\r\n    const data = Object.assign({}, d, {\r\n      series: seriesName,\r\n      value,\r\n      name: label\r\n    });\r\n\r\n    return {\r\n      classNames: [`circle-data-${i}`],\r\n      value,\r\n      label,\r\n      data,\r\n      cx,\r\n      cy,\r\n      radius,\r\n      height,\r\n      tooltipLabel,\r\n      color,\r\n      opacity,\r\n      seriesName,\r\n      gradientStops: this.getGradientStops(color),\r\n      min: d.min,\r\n      max: d.max\r\n    };\r\n  }\r\n\r\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\r\n    `;\r\n  }\r\n\r\n  getTooltipMinMaxText(min: any, max: any) {\r\n    if (min !== undefined || max !== undefined) {\r\n      let result = ' (';\r\n      if (min !== undefined) {\r\n        if (max === undefined) {\r\n          result += '≥';\r\n        }\r\n        result += min.toLocaleString();\r\n        if (max !== undefined) {\r\n          result += ' - ';\r\n        }\r\n      } else if (max !== undefined) {\r\n        result += '≤';\r\n      }\r\n      if (max !== undefined) {\r\n        result += max.toLocaleString();\r\n      }\r\n      result += ')';\r\n      return result;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  getGradientStops(color) {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color,\r\n        opacity: 0.2\r\n      },\r\n      {\r\n        offset: 100,\r\n        color,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isHidden(entry): boolean {\r\n    if (!this.hiddenEntries) return false;\r\n    const item = this.hiddenEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  activateCircle(): void {\r\n    this.barVisible = true;\r\n    this.activate.emit({ name: this.data.name });\r\n  }\r\n\r\n  deactivateCircle(): void {\r\n    this.barVisible = false;\r\n    this.circle.opacity = 0;\r\n    this.deactivate.emit({ name: this.data.name });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  HostListener\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-circle]',\r\n  template: `\r\n    <svg:circle\r\n    title=\"hidden\"\r\n      *ngIf=\"!hidden\"\r\n      [attr.cx]=\"cx\"\r\n      [attr.cy]=\"cy\"\r\n      [attr.r]=\"r\"\r\n      [attr.fill]=\"fill\"\r\n      [attr.stroke]=\"stroke\"\r\n      [attr.opacity]=\"circleOpacity\"\r\n      [attr.class]=\"classNames\"\r\n      [attr.pointer-events]=\"pointerEvents\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CircleComponent implements OnChanges {\r\n  @Input() cx;\r\n  @Input() cy;\r\n  @Input() r;\r\n  @Input() fill;\r\n  @Input() stroke;\r\n  @Input() data;\r\n  @Input() classNames;\r\n  @Input() circleOpacity;\r\n  @Input() pointerEvents;\r\n  @Input() hidden: boolean;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\r\n    this.classNames += 'circle';\r\n  }\r\n}\r\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-grid-panel]',\r\n  template: `\r\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridPanelComponent {\r\n  @Input() path;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() x;\r\n  @Input() y;\r\n}\r\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-grid-panel-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-grid-panel\r\n      *ngFor=\"let gridPanel of gridPanels\"\r\n      [height]=\"gridPanel.height\"\r\n      [width]=\"gridPanel.width\"\r\n      [x]=\"gridPanel.x\"\r\n      [y]=\"gridPanel.y\"\r\n      [class.grid-panel]=\"true\"\r\n      [class.odd]=\"gridPanel.class === 'odd'\"\r\n      [class.even]=\"gridPanel.class === 'even'\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GridPanelSeriesComponent implements OnChanges {\r\n  gridPanels: any[];\r\n\r\n  @Input()\r\n  data;\r\n\r\n  @Input()\r\n  dims;\r\n\r\n  @Input()\r\n  xScale;\r\n\r\n  @Input()\r\n  yScale;\r\n\r\n  @Input()\r\n  orient;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.gridPanels = this.getGridPanels();\r\n  }\r\n\r\n  getGridPanels(): any[] {\r\n    return this.data.map(d => {\r\n      let offset;\r\n      let width;\r\n      let height;\r\n      let x;\r\n      let y;\r\n      let className = 'odd';\r\n\r\n      if (this.orient === 'vertical') {\r\n        const position: number = this.xScale(d.name);\r\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\r\n\r\n        if (positionIndex % 2 === 1) {\r\n          className = 'even';\r\n        }\r\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\r\n        width = this.xScale.bandwidth() + offset;\r\n        height = this.dims.height;\r\n        x = this.xScale(d.name) - offset / 2;\r\n        y = 0;\r\n      } else if (this.orient === 'horizontal') {\r\n        const position = this.yScale(d.name);\r\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\r\n\r\n        if (positionIndex % 2 === 1) {\r\n          className = 'even';\r\n        }\r\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\r\n\r\n        width = this.dims.width;\r\n        height = this.yScale.bandwidth() + offset;\r\n        x = 0;\r\n        y = this.yScale(d.name) - offset / 2;\r\n      }\r\n\r\n      return {\r\n        name: d.name,\r\n        class: className,\r\n        height,\r\n        width,\r\n        x,\r\n        y\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-svg-linear-gradient]',\r\n  template: `\r\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\r\n      <svg:stop\r\n        *ngFor=\"let stop of stops\"\r\n        [attr.offset]=\"stop.offset + '%'\"\r\n        [style.stop-color]=\"stop.color\"\r\n        [style.stop-opacity]=\"stop.opacity\"\r\n      />\r\n    </svg:linearGradient>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SvgLinearGradientComponent implements OnChanges {\r\n  @Input() orientation = 'vertical';\r\n  @Input() name;\r\n  @Input() stops: any[];\r\n\r\n  x1: any;\r\n  x2: any;\r\n  y1: any;\r\n  y2: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.x1 = '0%';\r\n    this.x2 = '0%';\r\n    this.y1 = '0%';\r\n    this.y2 = '0%';\r\n\r\n    if (this.orientation === 'horizontal') {\r\n      this.x2 = '100%';\r\n    } else if (this.orientation === 'vertical') {\r\n      this.y1 = '100%';\r\n    }\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-svg-radial-gradient]',\r\n  template: `\r\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\r\n      <svg:stop\r\n        *ngFor=\"let stop of stops\"\r\n        [attr.offset]=\"stop.offset + '%'\"\r\n        [style.stop-color]=\"stop.color\"\r\n        [style.stop-opacity]=\"stop.opacity\"\r\n      />\r\n    </svg:radialGradient>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SvgRadialGradientComponent implements OnChanges {\r\n  @Input() color: string;\r\n  @Input() name: string;\r\n  @Input() startOpacity: number;\r\n  @Input() endOpacity = 1;\r\n  @Input() cx: number = 0;\r\n  @Input() cy: number = 0;\r\n\r\n  @Input()\r\n  get stops(): any[] {\r\n    return this.stopsInput || this.stopsDefault;\r\n  }\r\n\r\n  set stops(value: any[]) {\r\n    this.stopsInput = value;\r\n  }\r\n\r\n  r: string;\r\n\r\n  private stopsInput: any[];\r\n  private stopsDefault: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.r = '30%';\r\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\r\n      this.stopsDefault = [\r\n        {\r\n          offset: 0,\r\n          color: this.color,\r\n          opacity: this.startOpacity\r\n        },\r\n        {\r\n          offset: 100,\r\n          color: this.color,\r\n          opacity: this.endOpacity\r\n        }\r\n      ];\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-area]',\r\n  template: `\r\n    <svg:defs *ngIf=\"gradient\">\r\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n    </svg:defs>\r\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AreaComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() path;\r\n  @Input() startingPath;\r\n  @Input() fill;\r\n  @Input() opacity = 1;\r\n  @Input() startOpacity = 0.5;\r\n  @Input() endOpacity = 1;\r\n  @Input() activeLabel;\r\n  @Input() gradient: boolean = false;\r\n  @Input() stops: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  gradientId: string;\r\n  gradientFill: string;\r\n  areaPath: string;\r\n  initialized: boolean = false;\r\n  gradientStops: any[];\r\n  hasGradient: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.initialized) {\r\n      this.loadAnimation();\r\n      this.initialized = true;\r\n    } else {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n\r\n    if (this.gradient || this.stops) {\r\n      this.gradientStops = this.getGradient();\r\n      this.hasGradient = true;\r\n    } else {\r\n      this.hasGradient = false;\r\n    }\r\n\r\n    this.updatePathEl();\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    this.areaPath = this.startingPath;\r\n    setTimeout(this.update.bind(this), 100);\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element).select('.area');\r\n\r\n    if (this.animations) {\r\n      node.transition().duration(750).attr('d', this.path);\r\n    } else {\r\n      node.attr('d', this.path);\r\n    }\r\n  }\r\n\r\n  getGradient() {\r\n    if (this.stops) {\r\n      return this.stops;\r\n    }\r\n\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.startOpacity\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: this.endOpacity\r\n      }\r\n    ];\r\n  }\r\n}\r\n","// Robert Penner's easeOutExpo\r\nfunction easeOutExpo(t, b, c, d) {\r\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\r\n}\r\n\r\n/**\r\n * Counts from a number to the end incrementally.\r\n */\r\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\r\n  const startVal = Number(countFrom);\r\n  const endVal = Number(countTo);\r\n  const countDown = startVal > endVal;\r\n  const decimals = Math.max(0, countDecimals);\r\n  const dec = Math.pow(10, decimals);\r\n  const duration = Number(countDuration) * 1000;\r\n  let startTime;\r\n\r\n  function runCount(timestamp) {\r\n    let frameVal;\r\n    const progress = timestamp - startTime;\r\n\r\n    if (countDown) {\r\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\r\n    } else {\r\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\r\n    }\r\n\r\n    if (countDown) {\r\n      frameVal = frameVal < endVal ? endVal : frameVal;\r\n    } else {\r\n      frameVal = frameVal > endVal ? endVal : frameVal;\r\n    }\r\n\r\n    frameVal = Math.round(frameVal * dec) / dec;\r\n\r\n    const tick = progress < duration;\r\n    callback({\r\n      value: frameVal,\r\n      progress,\r\n      timestamp,\r\n      finished: !tick\r\n    });\r\n\r\n    if (tick) {\r\n      return requestAnimationFrame(val => runCount(val));\r\n    }\r\n  }\r\n\r\n  return requestAnimationFrame(timestamp => {\r\n    startTime = timestamp;\r\n    return runCount(timestamp);\r\n  });\r\n}\r\n\r\n/**\r\n * Determine decimals places\r\n *\r\n * @export\r\n */\r\nexport function decimalChecker(countTo) {\r\n  const endVal = Number(countTo);\r\n\r\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\r\n    return 2;\r\n  }\r\n\r\n  return 0;\r\n}\r\n","declare let global: any;\r\n\r\n// If we don't check whether 'window' and 'global' variables are defined,\r\n// code will fail in browser/node with 'variable is undefined' error.\r\nlet root: any;\r\nif (typeof window !== 'undefined') {\r\n  root = window;\r\n} else if (typeof global !== 'undefined') {\r\n  root = global;\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\r\n  prototype?: MouseEvent;\r\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\r\n};\r\n\r\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\r\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\r\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\r\n  if (typeof MouseEvent === 'function') {\r\n    // Sane browsers\r\n    return new MouseEvent(name, { bubbles, cancelable });\r\n  } else {\r\n    // IE\r\n    const event = document.createEvent('MouseEvent');\r\n    event.initEvent(name, bubbles, cancelable);\r\n    return event;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\r\nimport { count, decimalChecker } from './count.helper';\r\n\r\n/**\r\n * Count up component\r\n *\r\n * Loosely inspired by:\r\n *  - https://github.com/izupet/angular2-counto\r\n *  - https://inorganik.github.io/countUp.js/\r\n *\r\n * @export\r\n */\r\n@Component({\r\n  selector: '[ngx-charts-count-up]',\r\n  template: ` {{ value }} `\r\n})\r\nexport class CountUpDirective implements OnDestroy {\r\n  @Input() countDuration: number = 1;\r\n  @Input() countPrefix: string = '';\r\n  @Input() countSuffix: string = '';\r\n  @Input() valueFormatting: any;\r\n\r\n  @Input()\r\n  set countDecimals(val: number) {\r\n    this._countDecimals = val;\r\n  }\r\n\r\n  get countDecimals(): number {\r\n    if (this._countDecimals) return this._countDecimals;\r\n    return decimalChecker(this.countTo);\r\n  }\r\n\r\n  @Input()\r\n  set countTo(val) {\r\n    this._countTo = parseFloat(val);\r\n    this.start();\r\n  }\r\n\r\n  get countTo(): any {\r\n    return this._countTo;\r\n  }\r\n\r\n  @Input()\r\n  set countFrom(val) {\r\n    this._countFrom = parseFloat(val);\r\n    this.start();\r\n  }\r\n\r\n  get countFrom(): any {\r\n    return this._countFrom;\r\n  }\r\n\r\n  @Output() countChange = new EventEmitter();\r\n  @Output() countFinish = new EventEmitter();\r\n\r\n  nativeElement: any;\r\n\r\n  value: any = '';\r\n  formattedValue: string;\r\n\r\n  private animationReq: any;\r\n\r\n  private _countDecimals: number = 0;\r\n  private _countTo: number = 0;\r\n  private _countFrom: number = 0;\r\n\r\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\r\n    this.nativeElement = element.nativeElement;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n  }\r\n\r\n  start(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n\r\n    const valueFormatting =\r\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\r\n\r\n    const callback = ({ value, progress, finished }) => {\r\n      this.value = valueFormatting(value);\r\n      this.cd.markForCheck();\r\n      if (!finished) this.countChange.emit({ value: this.value, progress });\r\n      if (finished) this.countFinish.emit({ value: this.value, progress });\r\n    };\r\n\r\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { createMouseEvent } from '../events';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tooltip-area]',\r\n  template: `\r\n    <svg:g>\r\n      <svg:rect\r\n        class=\"tooltip-area\"\r\n        [attr.x]=\"0\"\r\n        y=\"0\"\r\n        [attr.width]=\"dims.width\"\r\n        [attr.height]=\"dims.height\"\r\n        style=\"opacity: 0; cursor: 'auto';\"\r\n        (mousemove)=\"mouseMove($event)\"\r\n        (mouseleave)=\"hideTooltip()\"\r\n      />\r\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\r\n        <xhtml:div class=\"area-tooltip-container\">\r\n          <ng-container *ngFor=\"let tooltipItem of model\">\r\n            <xhtml:div *ngIf=\"!isHidden(tooltipItem)\" class=\"tooltip-item\">\r\n              <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\r\n              {{ getToolTipText(tooltipItem) }}\r\n            </xhtml:div>\r\n          </ng-container>\r\n        </xhtml:div>\r\n      </ng-template>\r\n      <svg:rect\r\n        #tooltipAnchor\r\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\r\n        class=\"tooltip-anchor\"\r\n        [attr.x]=\"anchorPos\"\r\n        y=\"0\"\r\n        [attr.width]=\"1\"\r\n        [attr.height]=\"dims.height\"\r\n        [style.opacity]=\"anchorOpacity\"\r\n        [style.pointer-events]=\"'none'\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'right'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipSpacing]=\"15\"\r\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\r\n        [tooltipContext]=\"anchorValues\"\r\n        [tooltipImmediateExit]=\"true\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition('inactive => active', [\r\n        style({\r\n          opacity: 0\r\n        }),\r\n        animate(250, style({ opacity: 0.7 }))\r\n      ]),\r\n      transition('active => inactive', [\r\n        style({\r\n          opacity: 0.7\r\n        }),\r\n        animate(250, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class TooltipArea {\r\n  anchorOpacity: number = 0;\r\n  anchorPos: number = -1;\r\n  anchorValues: any[] = [];\r\n  lastAnchorPos: number;\r\n\r\n  @Input() dims;\r\n  @Input() xSet;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() results;\r\n  @Input() colors;\r\n  @Input() showPercentage: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() hiddenEntries: any[];\r\n\r\n  @Output() hover = new EventEmitter();\r\n\r\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\r\n\r\n  getValues(xVal): any[] {\r\n    const results = [];\r\n\r\n    for (const group of this.results) {\r\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\r\n      let groupName = group.name;\r\n      if (groupName instanceof Date) {\r\n        groupName = groupName.toLocaleDateString();\r\n      }\r\n\r\n      if (item) {\r\n        const label = item.name;\r\n        let val = item.value;\r\n        if (this.showPercentage) {\r\n          val = (item.d1 - item.d0).toFixed(2) + '%';\r\n        }\r\n        let color;\r\n        if (this.colors.scaleType === 'linear') {\r\n          let v = val;\r\n          if (item.d1) {\r\n            v = item.d1;\r\n          }\r\n          color = this.colors.getColor(v);\r\n        } else {\r\n          color = this.colors.getColor(group.name);\r\n        }\r\n\r\n        const data = Object.assign({}, item, {\r\n          value: val,\r\n          name: label,\r\n          series: groupName,\r\n          min: item.min,\r\n          max: item.max,\r\n          color\r\n        });\r\n\r\n        results.push(data);\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  mouseMove(event) {\r\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\r\n\r\n    const closestIndex = this.findClosestPointIndex(xPos);\r\n    const closestPoint = this.xSet[closestIndex];\r\n    this.anchorPos = this.xScale(closestPoint);\r\n    this.anchorPos = Math.max(0, this.anchorPos);\r\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\r\n\r\n    this.anchorValues = this.getValues(closestPoint);\r\n    if (this.anchorPos !== this.lastAnchorPos) {\r\n      const ev = createMouseEvent('mouseleave');\r\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\r\n      this.anchorOpacity = 0.7;\r\n      this.hover.emit({\r\n        value: closestPoint\r\n      });\r\n      this.showTooltip();\r\n\r\n      this.lastAnchorPos = this.anchorPos;\r\n    }\r\n  }\r\n\r\n  findClosestPointIndex(xPos) {\r\n    let minIndex = 0;\r\n    let maxIndex = this.xSet.length - 1;\r\n    let minDiff = Number.MAX_VALUE;\r\n    let closestIndex = 0;\r\n\r\n    while (minIndex <= maxIndex) {\r\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\r\n      const currentElement = this.xScale(this.xSet[currentIndex]);\r\n\r\n      const curDiff = Math.abs(currentElement - xPos);\r\n\r\n      if (curDiff < minDiff) {\r\n        minDiff = curDiff;\r\n        closestIndex = currentIndex;\r\n      }\r\n\r\n      if (currentElement < xPos) {\r\n        minIndex = currentIndex + 1;\r\n      } else if (currentElement > xPos) {\r\n        maxIndex = currentIndex - 1;\r\n      } else {\r\n        minDiff = 0;\r\n        closestIndex = currentIndex;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return closestIndex;\r\n  }\r\n\r\n  showTooltip(): void {\r\n    const event = createMouseEvent('mouseenter');\r\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\r\n  }\r\n\r\n  hideTooltip(): void {\r\n    const event = createMouseEvent('mouseleave');\r\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\r\n    this.anchorOpacity = 0;\r\n    this.lastAnchorPos = -1;\r\n  }\r\n\r\n  getToolTipText(tooltipItem: any): string {\r\n    let result: string = '';\r\n    if (tooltipItem.series !== undefined) {\r\n      result += tooltipItem.series;\r\n    } else {\r\n      result += '???';\r\n    }\r\n    result += ': ';\r\n    if (tooltipItem.value !== undefined) {\r\n      result += tooltipItem.value.toLocaleString();\r\n    }\r\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\r\n      result += ' (';\r\n      if (tooltipItem.min !== undefined) {\r\n        if (tooltipItem.max === undefined) {\r\n          result += '≥';\r\n        }\r\n        result += tooltipItem.min.toLocaleString();\r\n        if (tooltipItem.max !== undefined) {\r\n          result += ' - ';\r\n        }\r\n      } else if (tooltipItem.max !== undefined) {\r\n        result += '≤';\r\n      }\r\n      if (tooltipItem.max !== undefined) {\r\n        result += tooltipItem.max.toLocaleString();\r\n      }\r\n      result += ')';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  isHidden(tooltipItem) {\r\n    if (!this.hiddenEntries) return false;\r\n    const item = this.hiddenEntries.find(d => {\r\n      return tooltipItem.series === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { brushX } from 'd3-brush';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { select, event as d3event } from 'd3-selection';\r\nimport { id } from '../..//utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-timeline]',\r\n  template: `\r\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\r\n      <svg:filter [attr.id]=\"filterId\">\r\n        <svg:feColorMatrix\r\n          in=\"SourceGraphic\"\r\n          type=\"matrix\"\r\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\r\n        />\r\n      </svg:filter>\r\n      <svg:g class=\"embedded-chart\">\r\n        <ng-content></ng-content>\r\n      </svg:g>\r\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\r\n      <svg:g class=\"brush\"></svg:g>\r\n    </svg:g>\r\n  `,\r\n  styleUrls: ['./timeline.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class Timeline implements OnChanges {\r\n  @Input() view;\r\n  @Input() state;\r\n  @Input() results;\r\n  @Input() scheme;\r\n  @Input() customColors;\r\n  @Input() legend;\r\n  @Input() miniChart;\r\n  @Input() autoScale;\r\n  @Input() scaleType;\r\n  @Input() height: number = 50;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() onDomainChange = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  dims: any;\r\n  xDomain: any[];\r\n  xScale: any;\r\n  brush: any;\r\n  transform: string;\r\n  initialized: boolean = false;\r\n  filterId: any;\r\n  filter: any;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n\r\n    if (!this.initialized) {\r\n      this.addBrush();\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    this.dims = this.getDims();\r\n    this.height = this.dims.height;\r\n    const offsetY = this.view[1] - this.height;\r\n\r\n    this.xDomain = this.getXDomain();\r\n    this.xScale = this.getXScale();\r\n\r\n    if (this.brush) {\r\n      this.updateBrush();\r\n    }\r\n\r\n    this.transform = `translate(0 , ${offsetY})`;\r\n\r\n    this.filterId = 'filter' + id().toString();\r\n    this.filter = `url(#${this.filterId})`;\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.name)) {\r\n          values.push(d.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    let domain = [];\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n    } else {\r\n      domain = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getXScale() {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\r\n    }\r\n\r\n    return scale;\r\n  }\r\n\r\n  addBrush(): void {\r\n    if (this.brush) return;\r\n\r\n    const height = this.height;\r\n    const width = this.view[0];\r\n\r\n    this.brush = brushX()\r\n      .extent([\r\n        [0, 0],\r\n        [width, height]\r\n      ])\r\n      .on('brush end', () => {\r\n        const selection = d3event.selection || this.xScale.range();\r\n        const newDomain = selection.map(this.xScale.invert);\r\n\r\n        this.onDomainChange.emit(newDomain);\r\n        this.cd.markForCheck();\r\n      });\r\n\r\n    select(this.element).select('.brush').call(this.brush);\r\n  }\r\n\r\n  updateBrush(): void {\r\n    if (!this.brush) return;\r\n\r\n    const height = this.height;\r\n    const width = this.view[0];\r\n\r\n    this.brush.extent([\r\n      [0, 0],\r\n      [width, height]\r\n    ]);\r\n    select(this.element).select('.brush').call(this.brush);\r\n\r\n    // clear hardcoded properties so they can be defined by CSS\r\n    select(this.element)\r\n      .select('.selection')\r\n      .attr('fill', undefined)\r\n      .attr('stroke', undefined)\r\n      .attr('fill-opacity', undefined);\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getDims(): any {\r\n    const width = this.view[0];\r\n\r\n    const dims = {\r\n      width,\r\n      height: this.height\r\n    };\r\n\r\n    return dims;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectorRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { formatLabel } from '../label.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-legend',\r\n  template: `\r\n    <div [style.width.px]=\"width\">\r\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\r\n        <span class=\"legend-title-text\">{{ title }}</span>\r\n      </header>\r\n      <div class=\"legend-wrap\">\r\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\r\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\" [style.opacity]=\"isHidden(entry) ? '0.2' : ''\">\r\n            <ngx-charts-legend-entry\r\n              [label]=\"entry.label\"\r\n              [formattedLabel]=\"entry.formattedLabel\"\r\n              [color]=\"entry.color\"\r\n              [isActive]=\"isActive(entry)\"\r\n              (select)=\"labelClick.emit($event)\"\r\n              (activate)=\"activate($event)\"\r\n              (deactivate)=\"deactivate($event)\"\r\n              (toggle)=\"toggle($event)\"\r\n            >\r\n            </ngx-charts-legend-entry>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LegendComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() title;\r\n  @Input() colors;\r\n  @Input() height;\r\n  @Input() width;\r\n  @Input() activeEntries;\r\n  @Input() hiddenEntries;\r\n  @Input() horizontal = false;\r\n\r\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() labelToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  legendEntries: any[] = [];\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.cd.markForCheck();\r\n    this.legendEntries = this.getLegendEntries();\r\n  }\r\n\r\n  getLegendEntries(): any[] {\r\n    const items = [];\r\n\r\n    for (const label of this.data) {\r\n      const formattedLabel = formatLabel(label);\r\n\r\n      const idx = items.findIndex(i => {\r\n        return i.label === formattedLabel;\r\n      });\r\n\r\n      if (idx === -1) {\r\n        items.push({\r\n          label,\r\n          formattedLabel,\r\n          color: this.colors.getColor(label)\r\n        });\r\n      }\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.label === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isHidden(entry): boolean {\r\n    if (!this.hiddenEntries) return false;\r\n    const item = this.hiddenEntries.find(d => {\r\n      return entry.label === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n  \r\n  activate(item) {\r\n    this.labelActivate.emit(item);\r\n  }\r\n\r\n  deactivate(item) {\r\n    this.labelDeactivate.emit(item);\r\n  }\r\n\r\n  toggle(item) {\r\n    this.labelToggle.emit(item)\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.label;\r\n  }\r\n}\r\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-legend-entry',\r\n  template: `\r\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\r\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit({ name: formattedLabel })\"> </span>\r\n      <span class=\"legend-label-text\">\r\n        {{ trimmedLabel }}\r\n      </span>\r\n    </span>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LegendEntryComponent {\r\n  @Input() color: string;\r\n  @Input() label: any;\r\n  @Input() formattedLabel: string;\r\n  @Input() isActive: boolean = false;\r\n\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  get trimmedLabel(): string {\r\n    return this.formattedLabel || '(empty)';\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit({ name: this.label });\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit({ name: this.label });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-scale-legend',\r\n  template: `\r\n    <div\r\n      class=\"scale-legend\"\r\n      [class.horizontal-legend]=\"horizontal\"\r\n      [style.height.px]=\"horizontal ? undefined : height\"\r\n      [style.width.px]=\"width\"\r\n    >\r\n      <div class=\"scale-legend-label\">\r\n        <span>{{ valueRange[1].toLocaleString() }}</span>\r\n      </div>\r\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\r\n      <div class=\"scale-legend-label\">\r\n        <span>{{ valueRange[0].toLocaleString() }}</span>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./scale-legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ScaleLegendComponent implements OnChanges {\r\n  @Input() valueRange;\r\n  @Input() colors;\r\n  @Input() height;\r\n  @Input() width;\r\n  @Input() horizontal = false;\r\n\r\n  gradient: any;\r\n\r\n  constructor(private sanitizer: DomSanitizer) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\r\n    const direction = this.horizontal ? 'right' : 'bottom';\r\n    this.gradient = this.sanitizer.bypassSecurityTrustStyle(`linear-gradient(to ${direction}, ${gradientValues})`);\r\n  }\r\n\r\n  /**\r\n   * Generates the string used in the gradient stylesheet properties\r\n   * @param colors array of colors\r\n   * @param splits array of splits on a scale of (0, 1)\r\n   */\r\n  gradientString(colors, splits): string {\r\n    // add the 100%\r\n    splits.push(1);\r\n    const pairs = [];\r\n    colors.reverse().forEach((c, i) => {\r\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\r\n    });\r\n\r\n    return pairs.join(', ');\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { trimLabel } from '../trim-label.helper';\r\nimport { formatLabel } from '../label.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-advanced-legend',\r\n  template: `\r\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\r\n      <div\r\n        *ngIf=\"animations\"\r\n        class=\"total-value\"\r\n        ngx-charts-count-up\r\n        [countTo]=\"roundedTotal\"\r\n        [valueFormatting]=\"valueFormatting\"\r\n      ></div>\r\n      <div class=\"total-value\" *ngIf=\"!animations\">\r\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\r\n      </div>\r\n      <div class=\"total-label\">\r\n        {{ label }}\r\n      </div>\r\n      <div class=\"legend-items-container\">\r\n        <div class=\"legend-items\">\r\n          <div\r\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\r\n            tabindex=\"-1\"\r\n            class=\"legend-item\"\r\n            (mouseenter)=\"activate.emit(legendItem.data)\"\r\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\r\n            (click)=\"select.emit(legendItem.data)\"\r\n          >\r\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\r\n            <div\r\n              *ngIf=\"animations\"\r\n              class=\"item-value\"\r\n              ngx-charts-count-up\r\n              [countTo]=\"legendItem._value\"\r\n              [valueFormatting]=\"valueFormatting\"\r\n            ></div>\r\n            <div *ngIf=\"!animations\" class=\"item-value\">\r\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\r\n            </div>\r\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\r\n            <div\r\n              *ngIf=\"animations\"\r\n              class=\"item-percent\"\r\n              ngx-charts-count-up\r\n              [countTo]=\"legendItem.percentage\"\r\n              [countSuffix]=\"'%'\"\r\n            ></div>\r\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./advanced-legend.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AdvancedLegendComponent implements OnChanges {\r\n  @Input() width: number;\r\n  @Input() data;\r\n  @Input() colors;\r\n  @Input() label: string = 'Total';\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select: EventEmitter<any> = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  legendItems: any[] = [];\r\n  total: number;\r\n  roundedTotal: number;\r\n\r\n  @Input() valueFormatting: (value: number) => any;\r\n  @Input() labelFormatting: (value: string) => any = label => label;\r\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\r\n\r\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getTotal(): number {\r\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n  }\r\n\r\n  update(): void {\r\n    this.total = this.getTotal();\r\n    this.roundedTotal = this.total;\r\n\r\n    this.legendItems = this.getLegendItems();\r\n  }\r\n\r\n  getLegendItems(): any {\r\n    return this.data.map(d => {\r\n      const label = formatLabel(d.name);\r\n      const value = d.value;\r\n      const color = this.colors.getColor(label);\r\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\r\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\r\n\r\n      return {\r\n        _value: value,\r\n        data: d,\r\n        value,\r\n        color,\r\n        label: formattedLabel,\r\n        displayLabel: trimLabel(formattedLabel, 20),\r\n        origialLabel: d.name,\r\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\r\n      };\r\n    });\r\n  }\r\n\r\n  trackBy(item) {\r\n    return item.formattedLabel;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ChartComponent } from './charts/chart.component';\r\nimport { BaseChartComponent } from './base-chart.component';\r\nimport { AxesModule } from './axes/axes.module';\r\nimport { TooltipModule } from './tooltip/tooltip.module';\r\nimport { CircleSeriesComponent } from './circle-series.component';\r\nimport { CircleComponent } from './circle.component';\r\nimport { GridPanelComponent } from './grid-panel.component';\r\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\r\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\r\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\r\nimport { AreaComponent } from './area.component';\r\nimport { CountUpDirective } from './count/count.directive';\r\nimport { TooltipArea } from './tooltip-area.component';\r\nimport { Timeline } from './timeline/timeline.component';\r\nimport { VisibilityObserver } from '../utils/visibility-observer';\r\nimport { LegendComponent } from './legend/legend.component';\r\nimport { LegendEntryComponent } from './legend/legend-entry.component';\r\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\r\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\r\n\r\nconst COMPONENTS = [\r\n  AreaComponent,\r\n  BaseChartComponent,\r\n  CountUpDirective,\r\n  TooltipArea,\r\n  ChartComponent,\r\n  LegendComponent,\r\n  LegendEntryComponent,\r\n  ScaleLegendComponent,\r\n  CircleComponent,\r\n  CircleSeriesComponent,\r\n  GridPanelComponent,\r\n  GridPanelSeriesComponent,\r\n  SvgLinearGradientComponent,\r\n  SvgRadialGradientComponent,\r\n  Timeline,\r\n  AdvancedLegendComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [CommonModule, AxesModule, TooltipModule],\r\n  declarations: [...COMPONENTS, VisibilityObserver],\r\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\r\n})\r\nexport class ChartCommonModule {}\r\n","export interface ViewDimensions {\r\n  width: number;\r\n  height: number;\r\n  xOffset: number;\r\n}\r\n\r\nexport function calculateViewDimensions({\r\n  width,\r\n  height,\r\n  margins,\r\n  showXAxis = false,\r\n  showYAxis = false,\r\n  xAxisHeight = 0,\r\n  yAxisWidth = 0,\r\n  showXLabel = false,\r\n  showYLabel = false,\r\n  showLegend = false,\r\n  legendType = 'ordinal',\r\n  legendPosition = 'right',\r\n  columns = 12\r\n}): ViewDimensions {\r\n  let xOffset = margins[3];\r\n  let chartWidth = width;\r\n  let chartHeight = height - margins[0] - margins[2];\r\n\r\n  if (showLegend && legendPosition === 'right') {\r\n    if (legendType === 'ordinal') {\r\n      columns -= 2;\r\n    } else {\r\n      columns -= 1;\r\n    }\r\n  }\r\n\r\n  chartWidth = (chartWidth * columns) / 12;\r\n\r\n  chartWidth = chartWidth - margins[1] - margins[3];\r\n\r\n  if (showXAxis) {\r\n    chartHeight -= 5;\r\n    chartHeight -= xAxisHeight;\r\n\r\n    if (showXLabel) {\r\n      // text height + spacing between axis label and tick labels\r\n      const offset = 25 + 5;\r\n      chartHeight -= offset;\r\n    }\r\n  }\r\n\r\n  if (showYAxis) {\r\n    chartWidth -= 5;\r\n    chartWidth -= yAxisWidth;\r\n    xOffset += yAxisWidth;\r\n    xOffset += 10;\r\n\r\n    if (showYLabel) {\r\n      // text height + spacing between axis label and tick labels\r\n      const offset = 25 + 5;\r\n      chartWidth -= offset;\r\n      xOffset += offset;\r\n    }\r\n  }\r\n\r\n  chartWidth = Math.max(0, chartWidth);\r\n  chartHeight = Math.max(0, chartHeight);\r\n\r\n  return {\r\n    width: Math.floor(chartWidth),\r\n    height: Math.floor(chartHeight),\r\n    xOffset: Math.floor(xOffset)\r\n  };\r\n}\r\n","export let colorSets = [\r\n  {\r\n    name: 'vivid',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#647c8a',\r\n      '#3f51b5',\r\n      '#2196f3',\r\n      '#00b862',\r\n      '#afdf0a',\r\n      '#a7b61a',\r\n      '#f3e562',\r\n      '#ff9800',\r\n      '#ff5722',\r\n      '#ff4514'\r\n    ]\r\n  },\r\n  {\r\n    name: 'natural',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#bf9d76',\r\n      '#e99450',\r\n      '#d89f59',\r\n      '#f2dfa7',\r\n      '#a5d7c6',\r\n      '#7794b1',\r\n      '#afafaf',\r\n      '#707160',\r\n      '#ba9383',\r\n      '#d9d5c3'\r\n    ]\r\n  },\r\n  {\r\n    name: 'cool',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#a8385d',\r\n      '#7aa3e5',\r\n      '#a27ea8',\r\n      '#aae3f5',\r\n      '#adcded',\r\n      '#a95963',\r\n      '#8796c0',\r\n      '#7ed3ed',\r\n      '#50abcc',\r\n      '#ad6886'\r\n    ]\r\n  },\r\n  {\r\n    name: 'fire',\r\n    selectable: true,\r\n    group: 'Ordinal',\r\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\r\n  },\r\n  {\r\n    name: 'solar',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#fff8e1',\r\n      '#ffecb3',\r\n      '#ffe082',\r\n      '#ffd54f',\r\n      '#ffca28',\r\n      '#ffc107',\r\n      '#ffb300',\r\n      '#ffa000',\r\n      '#ff8f00',\r\n      '#ff6f00'\r\n    ]\r\n  },\r\n  {\r\n    name: 'air',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#e1f5fe',\r\n      '#b3e5fc',\r\n      '#81d4fa',\r\n      '#4fc3f7',\r\n      '#29b6f6',\r\n      '#03a9f4',\r\n      '#039be5',\r\n      '#0288d1',\r\n      '#0277bd',\r\n      '#01579b'\r\n    ]\r\n  },\r\n  {\r\n    name: 'aqua',\r\n    selectable: true,\r\n    group: 'Continuous',\r\n    domain: [\r\n      '#e0f7fa',\r\n      '#b2ebf2',\r\n      '#80deea',\r\n      '#4dd0e1',\r\n      '#26c6da',\r\n      '#00bcd4',\r\n      '#00acc1',\r\n      '#0097a7',\r\n      '#00838f',\r\n      '#006064'\r\n    ]\r\n  },\r\n  {\r\n    name: 'flame',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#A10A28',\r\n      '#D3342D',\r\n      '#EF6D49',\r\n      '#FAAD67',\r\n      '#FDDE90',\r\n      '#DBED91',\r\n      '#A9D770',\r\n      '#6CBA67',\r\n      '#2C9653',\r\n      '#146738'\r\n    ]\r\n  },\r\n  {\r\n    name: 'ocean',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#1D68FB',\r\n      '#33C0FC',\r\n      '#4AFFFE',\r\n      '#AFFFFF',\r\n      '#FFFC63',\r\n      '#FDBD2D',\r\n      '#FC8A25',\r\n      '#FA4F1E',\r\n      '#FA141B',\r\n      '#BA38D1'\r\n    ]\r\n  },\r\n  {\r\n    name: 'forest',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#55C22D',\r\n      '#C1F33D',\r\n      '#3CC099',\r\n      '#AFFFFF',\r\n      '#8CFC9D',\r\n      '#76CFFA',\r\n      '#BA60FB',\r\n      '#EE6490',\r\n      '#C42A1C',\r\n      '#FC9F32'\r\n    ]\r\n  },\r\n  {\r\n    name: 'horizon',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#2597FB',\r\n      '#65EBFD',\r\n      '#99FDD0',\r\n      '#FCEE4B',\r\n      '#FEFCFA',\r\n      '#FDD6E3',\r\n      '#FCB1A8',\r\n      '#EF6F7B',\r\n      '#CB96E8',\r\n      '#EFDEE0'\r\n    ]\r\n  },\r\n  {\r\n    name: 'neons',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#FF3333',\r\n      '#FF33FF',\r\n      '#CC33FF',\r\n      '#0000FF',\r\n      '#33CCFF',\r\n      '#33FFFF',\r\n      '#33FF66',\r\n      '#CCFF33',\r\n      '#FFCC00',\r\n      '#FF6600'\r\n    ]\r\n  },\r\n  {\r\n    name: 'picnic',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#FAC51D',\r\n      '#66BD6D',\r\n      '#FAA026',\r\n      '#29BB9C',\r\n      '#E96B56',\r\n      '#55ACD2',\r\n      '#B7332F',\r\n      '#2C83C9',\r\n      '#9166B8',\r\n      '#92E7E8'\r\n    ]\r\n  },\r\n  {\r\n    name: 'night',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#2B1B5A',\r\n      '#501356',\r\n      '#183356',\r\n      '#28203F',\r\n      '#391B3C',\r\n      '#1E2B3C',\r\n      '#120634',\r\n      '#2D0432',\r\n      '#051932',\r\n      '#453080',\r\n      '#75267D',\r\n      '#2C507D',\r\n      '#4B3880',\r\n      '#752F7D',\r\n      '#35547D'\r\n    ]\r\n  },\r\n  {\r\n    name: 'nightLights',\r\n    selectable: false,\r\n    group: 'Ordinal',\r\n    domain: [\r\n      '#4e31a5',\r\n      '#9c25a7',\r\n      '#3065ab',\r\n      '#57468b',\r\n      '#904497',\r\n      '#46648b',\r\n      '#32118d',\r\n      '#a00fb3',\r\n      '#1052a2',\r\n      '#6e51bd',\r\n      '#b63cc3',\r\n      '#6c97cb',\r\n      '#8671c1',\r\n      '#b455be',\r\n      '#7496c3'\r\n    ]\r\n  }\r\n];\r\n","import { range } from 'd3-array';\r\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\r\n\r\nimport { colorSets } from '../utils/color-sets';\r\n\r\nexport class ColorHelper {\r\n  scale: any;\r\n  scaleType: any;\r\n  colorDomain: any[];\r\n  domain: any;\r\n  customColors: any;\r\n\r\n  constructor(scheme, type, domain, customColors?) {\r\n    if (typeof scheme === 'string') {\r\n      scheme = colorSets.find(cs => {\r\n        return cs.name === scheme;\r\n      });\r\n    }\r\n    this.colorDomain = scheme.domain;\r\n    this.scaleType = type;\r\n    this.domain = domain;\r\n    this.customColors = customColors;\r\n\r\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\r\n  }\r\n\r\n  generateColorScheme(scheme, type, domain) {\r\n    if (typeof scheme === 'string') {\r\n      scheme = colorSets.find(cs => {\r\n        return cs.name === scheme;\r\n      });\r\n    }\r\n    let colorScale;\r\n    if (type === 'quantile') {\r\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\r\n    } else if (type === 'ordinal') {\r\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\r\n    } else if (type === 'linear') {\r\n      // linear schemes must have at least 2 colors\r\n      const colorDomain = [...scheme.domain];\r\n      if (colorDomain.length === 1) {\r\n        colorDomain.push(colorDomain[0]);\r\n        this.colorDomain = colorDomain;\r\n      }\r\n\r\n      const points = range(0, 1, 1.0 / colorDomain.length);\r\n      colorScale = scaleLinear().domain(points).range(colorDomain);\r\n    }\r\n\r\n    return colorScale;\r\n  }\r\n\r\n  getColor(value) {\r\n    if (value === undefined || value === null) {\r\n      throw new Error('Value can not be null');\r\n    }\r\n    if (this.scaleType === 'linear') {\r\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\r\n\r\n      return this.scale(valueScale(value));\r\n    } else {\r\n      if (typeof this.customColors === 'function') {\r\n        return this.customColors(value);\r\n      }\r\n\r\n      const formattedValue = value.toString();\r\n      let found: any; // todo type customColors\r\n      if (this.customColors && this.customColors.length > 0) {\r\n        found = this.customColors.find(mapping => {\r\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\r\n        });\r\n      }\r\n\r\n      if (found) {\r\n        return found.value;\r\n      } else {\r\n        return this.scale(value);\r\n      }\r\n    }\r\n  }\r\n\r\n  getLinearGradientStops(value, start) {\r\n    if (start === undefined) {\r\n      start = this.domain[0];\r\n    }\r\n\r\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\r\n\r\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\r\n\r\n    const endColor = this.getColor(value);\r\n\r\n    // generate the stops\r\n    const startVal = valueScale(start);\r\n    const startColor = this.getColor(start);\r\n\r\n    const endVal = valueScale(value);\r\n    let i = 1;\r\n    let currentVal = startVal;\r\n    const stops = [];\r\n\r\n    stops.push({\r\n      color: startColor,\r\n      offset: startVal,\r\n      originalOffset: startVal,\r\n      opacity: 1\r\n    });\r\n\r\n    while (currentVal < endVal && i < this.colorDomain.length) {\r\n      const color = this.colorDomain[i];\r\n      const offset = colorValueScale(color);\r\n      if (offset <= startVal) {\r\n        i++;\r\n        continue;\r\n      }\r\n\r\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\r\n        break;\r\n      }\r\n\r\n      stops.push({\r\n        color,\r\n        offset,\r\n        opacity: 1\r\n      });\r\n      currentVal = offset;\r\n      i++;\r\n    }\r\n\r\n    if (stops[stops.length - 1].offset < 100) {\r\n      stops.push({\r\n        color: endColor,\r\n        offset: endVal,\r\n        opacity: 1\r\n      });\r\n    }\r\n\r\n    if (endVal === startVal) {\r\n      stops[0].offset = 0;\r\n      stops[1].offset = 100;\r\n    } else {\r\n      // normalize the offsets into percentages\r\n      if (stops[stops.length - 1].offset !== 100) {\r\n        for (const s of stops) {\r\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\r\n        }\r\n      }\r\n    }\r\n\r\n    return stops;\r\n  }\r\n}\r\n","/**\r\n * Based on the data, return an array with unique values.\r\n *\r\n * @export\r\n * @returns array\r\n */\r\nexport function getUniqueXDomainValues(results: any[]): any[] {\r\n  const valueSet = new Set();\r\n  for (const result of results) {\r\n    for (const d of result.series) {\r\n      valueSet.add(d.name);\r\n    }\r\n  }\r\n  return Array.from(valueSet);\r\n}\r\n\r\n/**\r\n * Get the scaleType of enumerable of values.\r\n * @returns  'time', 'linear' or 'ordinal'\r\n */\r\nexport function getScaleType(values: any[], checkDateType = true): string {\r\n  if (checkDateType) {\r\n    const allDates = values.every(value => value instanceof Date);\r\n    if (allDates) {\r\n      return 'time';\r\n    }\r\n  }\r\n\r\n  const allNumbers = values.every(value => typeof value === 'number');\r\n  if (allNumbers) {\r\n    return 'linear';\r\n  }\r\n\r\n  return 'ordinal';\r\n}\r\n","/**\r\n * Adds an entry to hidden entries if not exists, or removes it from hidden entries if exists\r\n * \r\n * @export\r\n * \r\n * @param item\r\n * @param hiddenEntries \r\n * \r\n * @returns {Object} Returns back object containing the hiddenEntries and hidden properties\r\n */\r\nexport function toggleEntry(item: any, hiddenEntries: any[]): { hidden: boolean, hiddenEntries: any[] } {\r\n  let hidden: boolean;\r\n  const idx = hiddenEntries.findIndex(d => {\r\n    return d.name === item.name && d.value === item.value;\r\n  });\r\n  if(idx > -1) {\r\n    hiddenEntries.splice(idx, 1);\r\n    hidden = false;\r\n  } else {\r\n    hiddenEntries.push(item);\r\n    hidden = true;\r\n  }\r\n  return { hidden, hiddenEntries: [...hiddenEntries] };\r\n}","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\nimport { toggleEntry } from '../common/toggle-entry.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [hiddenEntries]=\"hiddenEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n      (legendLabelToggle)=\"onToggle($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [baseValue]=\"baseValue\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [hiddenEntries]=\"hiddenEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [gradient]=\"gradient\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [hiddenEntries]=\"hiddenEntries\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [hiddenEntries]=\"hiddenEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [baseValue]=\"baseValue\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() canHideSerie: boolean = false;\r\n  @Input() state;\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() baseValue: any = 'auto';\r\n  @Input() autoScale;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() hiddenEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xSet: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  scaleType: string;\r\n  series: any;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const values = [...domain];\r\n    if (!this.autoScale) {\r\n      values.push(0);\r\n    }\r\n    if (this.baseValue !== 'auto') {\r\n      values.push(this.baseValue);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getScaleType(values): string {\r\n    let date = true;\r\n    let num = true;\r\n    for (const value of values) {\r\n      if (!this.isDate(value)) {\r\n        date = false;\r\n      }\r\n      if (typeof value !== 'number') {\r\n        num = false;\r\n      }\r\n    }\r\n\r\n    if (date) {\r\n      return 'time';\r\n    }\r\n\r\n    if (num) {\r\n      return 'linear';\r\n    }\r\n\r\n    return 'ordinal';\r\n  }\r\n\r\n  isDate(value): boolean {\r\n    if (value instanceof Date) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  onToggle(item) {\r\n    if(!this.canHideSerie) return;\r\n    const toggleResult = toggleEntry(item, this.hiddenEntries);\r\n    this.hiddenEntries = toggleResult.hiddenEntries;\r\n    this.toggle.emit({ value: item, hidden: toggleResult.hidden, hiddenEntries: this.hiddenEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\nimport { toggleEntry } from '../common/toggle-entry.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [hiddenEntries]=\"hiddenEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n      (legendLabelToggle)=\"onToggle($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [scaleType]=\"scaleType\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [hiddenEntries]=\"hiddenEntries\"\r\n              [gradient]=\"gradient\"\r\n              normalized=\"true\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [hiddenEntries]=\"hiddenEntries\"\r\n              [showPercentage]=\"true\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                type=\"stacked\"\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [hiddenEntries]=\"hiddenEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            normalized=\"true\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() canHideSerie: boolean = false;\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() hiddenEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  scaleType: string;\r\n  xDomain: any[];\r\n  xSet: any[]; // the set of all values on the X Axis\r\n  yDomain: any[];\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  tooltipAreas: any[];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let d0 = 0;\r\n\r\n      let total = 0;\r\n      for (const group of this.results) {\r\n        const d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n        if (d) {\r\n          total += d.value;\r\n        }\r\n      }\r\n\r\n      for (const group of this.results) {\r\n        let d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          d.d0 = d0;\r\n          d.d1 = d0 + d.value;\r\n          d0 += d.value;\r\n        } else {\r\n          d = {\r\n            name: val,\r\n            value: 0,\r\n            d0,\r\n            d1: d0\r\n          };\r\n          group.series.push(d);\r\n        }\r\n\r\n        if (total > 0) {\r\n          d.d0 = (d.d0 * 100) / total;\r\n          d.d1 = (d.d1 * 100) / total;\r\n        } else {\r\n          d.d0 = 0;\r\n          d.d1 = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    return [0, 100];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  onToggle(item) {\r\n    if(!this.canHideSerie) return;\r\n    const toggleResult = toggleEntry(item, this.hiddenEntries);\r\n    this.hiddenEntries = toggleResult.hiddenEntries;\r\n    this.toggle.emit({ value: item, hidden: toggleResult.hidden, hiddenEntries: this.hiddenEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\nimport { toggleEntry } from '../common/toggle-entry.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-area-chart-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [hiddenEntries]=\"hiddenEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n      (legendLabelToggle)=\"onToggle($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n            <svg:g\r\n              ngx-charts-area-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [scaleType]=\"scaleType\"\r\n              [gradient]=\"gradient\"\r\n              [activeEntries]=\"activeEntries\"d\r\n              [hiddenEntries]=\"hiddenEntries\"\r\n              stacked=\"true\"\r\n              [curve]=\"curve\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [hiddenEntries]=\"hiddenEntries\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                type=\"stacked\"\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [hiddenEntries]=\"hiddenEntries\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event, series)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [legend]=\"legend\"\r\n        [scaleType]=\"scaleType\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-area-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [gradient]=\"gradient\"\r\n            stacked=\"true\"\r\n            [curve]=\"curve\"\r\n            [animations]=\"animations\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class AreaChartStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() canHideSerie: boolean = false;\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() timeline;\r\n  @Input() gradient;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() hiddenEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  scaleType: string;\r\n  xDomain: any[];\r\n  xSet: any[]; // the set of all values on the X Axis\r\n  yDomain: any[];\r\n  seriesDomain: any;\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  clipPathId: string;\r\n  clipPath: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let d0 = 0;\r\n      for (const group of this.results) {\r\n        let d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          d.d0 = d0;\r\n          d.d1 = d0 + d.value;\r\n          d0 += d.value;\r\n        } else {\r\n          d = {\r\n            name: val,\r\n            value: 0,\r\n            d0,\r\n            d1: d0\r\n          };\r\n          group.series.push(d);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (let i = 0; i < this.xSet.length; i++) {\r\n      const val = this.xSet[i];\r\n      let sum = 0;\r\n      for (const group of this.results) {\r\n        const d = group.series.find(item => {\r\n          let a = item.name;\r\n          let b = val;\r\n          if (this.scaleType === 'time') {\r\n            a = a.valueOf();\r\n            b = b.valueOf();\r\n          }\r\n          return a === b;\r\n        });\r\n\r\n        if (d) {\r\n          sum += d.value;\r\n        }\r\n      }\r\n\r\n      domain.push(sum);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime();\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear();\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().padding(0.1);\r\n    }\r\n\r\n    scale.range([0, width]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item) {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  onToggle(item) {\r\n    if(!this.canHideSerie) return;\r\n    const toggleResult = toggleEntry(item, this.hiddenEntries);\r\n    this.hiddenEntries = toggleResult.hiddenEntries;\r\n    this.toggle.emit({ value: item, hidden: toggleResult.hidden, hiddenEntries: this.hiddenEntries });\r\n  }\r\n}\r\n","export function sortLinear(data, property, direction = 'asc') {\r\n  return data.sort((a, b) => {\r\n    if (direction === 'asc') {\r\n      return a[property] - b[property];\r\n    } else {\r\n      return b[property] - a[property];\r\n    }\r\n  });\r\n}\r\n\r\nexport function sortByDomain(data, property, direction = 'asc', domain) {\r\n  return data.sort((a, b) => {\r\n    const aVal = a[property];\r\n    const bVal = b[property];\r\n\r\n    const aIdx = domain.indexOf(aVal);\r\n    const bIdx = domain.indexOf(bVal);\r\n\r\n    if (direction === 'asc') {\r\n      return aIdx - bIdx;\r\n    } else {\r\n      return bIdx - aIdx;\r\n    }\r\n  });\r\n}\r\n\r\nexport function sortByTime(data, property, direction = 'asc') {\r\n  return data.sort((a, b) => {\r\n    const aDate = a[property].getTime();\r\n    const bDate = b[property].getTime();\r\n\r\n    if (direction === 'asc') {\r\n      if (aDate > bDate) return 1;\r\n      if (bDate > aDate) return -1;\r\n      return 0;\r\n    } else {\r\n      if (aDate > bDate) return -1;\r\n      if (bDate > aDate) return 1;\r\n      return 0;\r\n    }\r\n  });\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { area } from 'd3-shape';\r\n\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-area-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-area\r\n      *ngIf=\"!isHidden(data)\"\r\n      class=\"area-series\"\r\n      [data]=\"data\"\r\n      [path]=\"path\"\r\n      [fill]=\"colors.getColor(data.name)\"\r\n      [stops]=\"gradientStops\"\r\n      [startingPath]=\"startingPath\"\r\n      [opacity]=\"opacity\"\r\n      [gradient]=\"gradient || hasGradient\"\r\n      [animations]=\"animations\"\r\n      [class.active]=\"isActive(data)\"\r\n      [class.inactive]=\"isInactive(data)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AreaSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() baseValue: any = 'auto';\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() stacked: boolean = false;\r\n  @Input() normalized: boolean = false;\r\n  @Input() gradient;\r\n  @Input() curve;\r\n  @Input() activeEntries: any[];\r\n  @Input() hiddenEntries: any[];\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  opacity: number;\r\n  path: string;\r\n  startingPath: string;\r\n\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradient();\r\n\r\n    let currentArea;\r\n    let startingArea;\r\n\r\n    const xProperty = d => {\r\n      const label = d.name;\r\n      return this.xScale(label);\r\n    };\r\n\r\n    if (this.stacked || this.normalized) {\r\n      currentArea = area<any>()\r\n        .x(xProperty)\r\n        .y0((d, i) => this.yScale(d.d0))\r\n        .y1((d, i) => this.yScale(d.d1));\r\n\r\n      startingArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(d => this.yScale.range()[0])\r\n        .y1(d => this.yScale.range()[0]);\r\n    } else {\r\n      currentArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\r\n        .y1(d => this.yScale(d.value));\r\n\r\n      startingArea = area<any>()\r\n        .x(xProperty)\r\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\r\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\r\n    }\r\n\r\n    currentArea.curve(this.curve);\r\n    startingArea.curve(this.curve);\r\n\r\n    this.opacity = 0.8;\r\n\r\n    let data = this.data.series;\r\n    if (this.scaleType === 'linear') {\r\n      data = sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      data = sortByTime(data, 'name');\r\n    } else {\r\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n    }\r\n\r\n    this.path = currentArea(data);\r\n    this.startingPath = startingArea(data);\r\n  }\r\n\r\n  updateGradient() {\r\n    if (this.colors.scaleType === 'linear') {\r\n      this.hasGradient = true;\r\n      if (this.stacked || this.normalized) {\r\n        const d0values = this.data.series.map(d => d.d0);\r\n        const d1values = this.data.series.map(d => d.d1);\r\n        const max = Math.max(...d1values);\r\n        const min = Math.min(...d0values);\r\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n      } else {\r\n        const values = this.data.series.map(d => d.value);\r\n        const max = Math.max(...values);\r\n        this.gradientStops = this.colors.getLinearGradientStops(max);\r\n      }\r\n    } else {\r\n      this.hasGradient = false;\r\n      this.gradientStops = undefined;\r\n    }\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n\r\n  isHidden(entry): boolean {\r\n    if (!this.hiddenEntries || this.hiddenEntries.length === 0) return false;\r\n    const item = this.hiddenEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AreaChartComponent } from './area-chart.component';\r\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\r\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\r\nimport { AreaSeriesComponent } from './area-series.component';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\r\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\r\n})\r\nexport class AreaChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\nimport { roundedRect } from '../common/shape.helper';\r\nimport { id } from '../utils/id';\r\n\r\n/* tslint:disable-next-line */\r\nimport { transition } from 'd3-transition';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bar]',\r\n  template: `\r\n    <svg:defs *ngIf=\"hasGradient\">\r\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n    </svg:defs>\r\n    <svg:path\r\n      class=\"bar\"\r\n      stroke=\"none\"\r\n      role=\"img\"\r\n      tabIndex=\"-1\"\r\n      [class.active]=\"isActive\"\r\n      [class.hidden]=\"hideBar\"\r\n      [attr.d]=\"path\"\r\n      [attr.aria-label]=\"ariaLabel\"\r\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\r\n      (click)=\"select.emit(data)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BarComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() data: any;\r\n  @Input() width: number;\r\n  @Input() height: number;\r\n  @Input() x: number;\r\n  @Input() y: number;\r\n  @Input() orientation;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() offset = 0;\r\n  @Input() isActive: boolean = false;\r\n  @Input() stops: any[];\r\n  @Input() animations: boolean = true;\r\n  @Input() ariaLabel: string;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: any;\r\n  path: any;\r\n  gradientId: any;\r\n  gradientFill: any;\r\n  startOpacity: any;\r\n  gradientStops: any[];\r\n  hasGradient: boolean = false;\r\n  hideBar: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.roundEdges) {\r\n      this.loadAnimation();\r\n    }\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientFill = `url(#${this.gradientId})`;\r\n\r\n    if (this.gradient || this.stops) {\r\n      this.gradientStops = this.getGradient();\r\n      this.hasGradient = true;\r\n    } else {\r\n      this.hasGradient = false;\r\n    }\r\n\r\n    this.updatePathEl();\r\n    this.checkToHideBar();\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    this.path = this.getStartingPath();\r\n    setTimeout(this.update.bind(this), 100);\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element).select('.bar');\r\n    const path = this.getPath();\r\n    if (this.animations) {\r\n      node.transition().duration(500).attr('d', path);\r\n    } else {\r\n      node.attr('d', path);\r\n    }\r\n  }\r\n\r\n  getGradient() {\r\n    if (this.stops) {\r\n      return this.stops;\r\n    }\r\n\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.getStartOpacity()\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  getStartingPath() {\r\n    if (!this.animations) {\r\n      return this.getPath();\r\n    }\r\n\r\n    let radius = this.getRadius();\r\n    let path;\r\n\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        radius = Math.min(this.height, radius);\r\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        radius = Math.min(this.width, radius);\r\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\r\n      }\r\n    } else {\r\n      if (this.orientation === 'vertical') {\r\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\r\n      }\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  getPath() {\r\n    let radius = this.getRadius();\r\n    let path;\r\n\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        radius = Math.min(this.height, radius);\r\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n      } else if (this.orientation === 'horizontal') {\r\n        radius = Math.min(this.width, radius);\r\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n      }\r\n    } else {\r\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  getRadius(): number {\r\n    let radius = 0;\r\n\r\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\r\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\r\n    }\r\n\r\n    return radius;\r\n  }\r\n\r\n  getStartOpacity(): number {\r\n    if (this.roundEdges) {\r\n      return 0.2;\r\n    } else {\r\n      return 0.5;\r\n    }\r\n  }\r\n\r\n  get edges() {\r\n    let edges = [false, false, false, false];\r\n    if (this.roundEdges) {\r\n      if (this.orientation === 'vertical') {\r\n        if (this.data.value > 0) {\r\n          edges = [true, true, false, false];\r\n        } else {\r\n          edges = [false, false, true, true];\r\n        }\r\n      } else if (this.orientation === 'horizontal') {\r\n        if (this.data.value > 0) {\r\n          edges = [false, true, false, true];\r\n        } else {\r\n          edges = [true, false, true, false];\r\n        }\r\n      }\r\n    }\r\n    return edges;\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n\r\n  private checkToHideBar() {\r\n    this.hideBar =\r\n      this.noBarWhenZero &&\r\n      ((this.orientation === 'vertical' && this.height === 0) ||\r\n        (this.orientation === 'horizontal' && this.width === 0));\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-horizontal\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"results\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\r\n        ></svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarHorizontalComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() xScaleMax: number;\r\n  @Input() xScaleMin: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  yScale: any;\r\n  xScale: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getXScale(): any {\r\n    this.xDomain = this.getXDomain();\r\n\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getYScale(): any {\r\n    this.yDomain = this.getYDomain();\r\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    const values = this.results.map(d => d.value);\r\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\r\n\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\r\n    return [min, max];\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.yDomain;\r\n    } else {\r\n      domain = this.xDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.xDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (event.index === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-2d',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-grid-panel-series\r\n          [xScale]=\"valueScale\"\r\n          [yScale]=\"groupScale\"\r\n          [data]=\"results\"\r\n          [dims]=\"dims\"\r\n          orient=\"horizontal\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"valueScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"groupScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            [xScale]=\"valueScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [yScale]=\"innerScale\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [roundEdges]=\"roundEdges\"\r\n            [animations]=\"animations\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontal2DComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() groupPadding = 16;\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() xScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valuesDomain: any[];\r\n  groupScale: any;\r\n  innerScale: any;\r\n  valueScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valuesDomain = this.getValueDomain();\r\n\r\n    this.groupScale = this.getGroupScale();\r\n    this.innerScale = this.getInnerScale();\r\n    this.valueScale = this.getValueScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.height])\r\n      .paddingInner(spacing)\r\n      .paddingOuter(spacing / 2)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getInnerScale(): any {\r\n    const height = this.groupScale.bandwidth();\r\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\r\n  }\r\n\r\n  getValueScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(0, ${this.groupScale(group.label)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valuesDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valuesDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            type=\"normalized\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    return [0, 100];\r\n  }\r\n\r\n  getYScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group): string {\r\n    return `translate(0, ${this.yScale(group.name)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-horizontal-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-horizontal\r\n            type=\"stacked\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() xScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\r\n    }\r\n\r\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n    let smallest = 0;\r\n    let biggest = 0;\r\n    for (const group of this.results) {\r\n      let smallestSum = 0;\r\n      let biggestSum = 0;\r\n      for (const d of group.series) {\r\n        if (d.value < 0) {\r\n          smallestSum += d.value;\r\n        } else {\r\n          biggestSum += d.value;\r\n        }\r\n        smallest = d.value < smallest ? d.value : smallest;\r\n        biggest = d.value > biggest ? d.value : biggest;\r\n      }\r\n      domain.push(smallestSum);\r\n      domain.push(biggestSum);\r\n    }\r\n    domain.push(smallest);\r\n    domain.push(biggest);\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getYScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group): string {\r\n    return `translate(0, ${this.yScale(group.name)})`;\r\n  }\r\n\r\n  onClick(data, group?): void {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxWidthChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\r\n    } else {\r\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  Output,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-vertical\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"results\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n          (select)=\"onClick($event)\"\r\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\r\n        ></svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class BarVerticalComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() yScaleMax: number;\r\n  @Input() yScaleMin: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xScale: any;\r\n  yScale: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin: any[] = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  getXScale(): any {\r\n    this.xDomain = this.getXDomain();\r\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\r\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    this.yDomain = this.getYDomain();\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  getYDomain(): [number, number] {\r\n    const values = this.results.map(d => d.value);\r\n\r\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\r\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\r\n      min = Math.min(min, ...this.yAxisTicks);\r\n    }\r\n\r\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\r\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\r\n      max = Math.max(max, ...this.yAxisTicks);\r\n    }\r\n    return [min, max];\r\n  }\r\n\r\n  onClick(data: DataItem) {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.xDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.xDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (event.index === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-2d',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-grid-panel-series\r\n          [xScale]=\"groupScale\"\r\n          [yScale]=\"valueScale\"\r\n          [data]=\"results\"\r\n          [dims]=\"dims\"\r\n          orient=\"vertical\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"groupScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"valueScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-series-vertical\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [xScale]=\"innerScale\"\r\n          [yScale]=\"valueScale\"\r\n          [colors]=\"colors\"\r\n          [series]=\"group.series\"\r\n          [dims]=\"dims\"\r\n          [gradient]=\"gradient\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [showDataLabel]=\"showDataLabel\"\r\n          [dataLabelFormatting]=\"dataLabelFormatting\"\r\n          [seriesName]=\"group.name\"\r\n          [roundEdges]=\"roundEdges\"\r\n          [animations]=\"animations\"\r\n          [noBarWhenZero]=\"noBarWhenZero\"\r\n          (select)=\"onClick($event, group)\"\r\n          (activate)=\"onActivate($event, group)\"\r\n          (deactivate)=\"onDeactivate($event, group)\"\r\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVertical2DComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() scaleType = 'ordinal';\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() groupPadding = 16;\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() roundEdges: boolean = true;\r\n  @Input() yScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valuesDomain: any[];\r\n  groupScale: any;\r\n  innerScale: any;\r\n  valueScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valuesDomain = this.getValueDomain();\r\n\r\n    this.groupScale = this.getGroupScale();\r\n    this.innerScale = this.getInnerScale();\r\n    this.valueScale = this.getValueScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  getGroupScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\r\n\r\n    return scaleBand()\r\n      .rangeRound([0, this.dims.width])\r\n      .paddingInner(spacing)\r\n      .paddingOuter(spacing / 2)\r\n      .domain(this.groupDomain);\r\n  }\r\n\r\n  getInnerScale(): any {\r\n    const width = this.groupScale.bandwidth();\r\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\r\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\r\n  }\r\n\r\n  getValueScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.groupScale(group.label)}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valuesDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valuesDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-normalized',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-vertical\r\n            type=\"normalized\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    return [0, 100];\r\n  }\r\n\r\n  getXScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\r\n\r\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.xScale(group.name)}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\nexport enum D0Types {\r\n  positive = 'positive',\r\n  negative = 'negative'\r\n}\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-series-vertical]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-bar\r\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\r\n      [@animationState]=\"'active'\"\r\n      [@.disabled]=\"!animations\"\r\n      [width]=\"bar.width\"\r\n      [height]=\"bar.height\"\r\n      [x]=\"bar.x\"\r\n      [y]=\"bar.y\"\r\n      [fill]=\"bar.color\"\r\n      [stops]=\"bar.gradientStops\"\r\n      [data]=\"bar.data\"\r\n      [orientation]=\"'vertical'\"\r\n      [roundEdges]=\"bar.roundEdges\"\r\n      [gradient]=\"gradient\"\r\n      [ariaLabel]=\"bar.ariaLabel\"\r\n      [isActive]=\"isActive(bar.data)\"\r\n      (select)=\"onClick($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"tooltipPlacement\"\r\n      [tooltipType]=\"tooltipType\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"bar.data\"\r\n      [noBarWhenZero]=\"noBarWhenZero\"\r\n      [animations]=\"animations\"\r\n    ></svg:g>\r\n    <svg:g *ngIf=\"showDataLabel\">\r\n      <svg:g\r\n        ngx-charts-bar-label\r\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\r\n        [barX]=\"b.x\"\r\n        [barY]=\"b.y\"\r\n        [barWidth]=\"b.width\"\r\n        [barHeight]=\"b.height\"\r\n        [value]=\"b.total\"\r\n        [valueFormatting]=\"dataLabelFormatting\"\r\n        [orientation]=\"'vertical'\"\r\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(500, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SeriesVerticalComponent implements OnChanges {\r\n  @Input() dims;\r\n  @Input() type = 'standard';\r\n  @Input() series;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() seriesName: string;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() roundEdges: boolean;\r\n  @Input() animations: boolean = true;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dataLabelHeightChanged = new EventEmitter();\r\n\r\n  tooltipPlacement: string;\r\n  tooltipType: string;\r\n\r\n  bars: any;\r\n  x: any;\r\n  y: any;\r\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\r\n\r\n  ngOnChanges(changes): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateTooltipSettings();\r\n    let width;\r\n    if (this.series.length) {\r\n      width = this.xScale.bandwidth();\r\n    }\r\n    width = Math.round(width);\r\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\r\n\r\n    const d0 = {\r\n      [D0Types.positive]: 0,\r\n      [D0Types.negative]: 0\r\n    };\r\n    let d0Type = D0Types.positive;\r\n\r\n    let total;\r\n    if (this.type === 'normalized') {\r\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n    }\r\n\r\n    this.bars = this.series.map((d, index) => {\r\n      let value = d.value;\r\n      const label = this.getLabel(d);\r\n      const formattedLabel = formatLabel(label);\r\n      const roundEdges = this.roundEdges;\r\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\r\n\r\n      const bar: any = {\r\n        value,\r\n        label,\r\n        roundEdges,\r\n        data: d,\r\n        width,\r\n        formattedLabel,\r\n        height: 0,\r\n        x: 0,\r\n        y: 0\r\n      };\r\n\r\n      if (this.type === 'standard') {\r\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\r\n        bar.x = this.xScale(label);\r\n\r\n        if (value < 0) {\r\n          bar.y = this.yScale(0);\r\n        } else {\r\n          bar.y = this.yScale(value);\r\n        }\r\n      } else if (this.type === 'stacked') {\r\n        const offset0 = d0[d0Type];\r\n        const offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\r\n        bar.x = 0;\r\n        bar.y = this.yScale(offset1);\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n      } else if (this.type === 'normalized') {\r\n        let offset0 = d0[d0Type];\r\n        let offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        if (total > 0) {\r\n          offset0 = (offset0 * 100) / total;\r\n          offset1 = (offset1 * 100) / total;\r\n        } else {\r\n          offset0 = 0;\r\n          offset1 = 0;\r\n        }\r\n\r\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\r\n        bar.x = 0;\r\n        bar.y = this.yScale(offset1);\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n        value = (offset1 - offset0).toFixed(2) + '%';\r\n      }\r\n\r\n      if (this.colors.scaleType === 'ordinal') {\r\n        bar.color = this.colors.getColor(label);\r\n      } else {\r\n        if (this.type === 'standard') {\r\n          bar.color = this.colors.getColor(value);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\r\n        } else {\r\n          bar.color = this.colors.getColor(bar.offset1);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\r\n        }\r\n      }\r\n\r\n      let tooltipLabel = formattedLabel;\r\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\r\n      if (this.seriesName) {\r\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\r\n        bar.data.series = this.seriesName;\r\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\r\n      }\r\n\r\n      bar.tooltipText = this.tooltipDisabled\r\n        ? undefined\r\n        : `\r\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\r\n        <span class=\"tooltip-val\">${\r\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\r\n        }</span>\r\n      `;\r\n\r\n      return bar;\r\n    });\r\n\r\n    this.updateDataLabels();\r\n  }\r\n\r\n  updateDataLabels() {\r\n    if (this.type === 'stacked') {\r\n      this.barsForDataLabels = [];\r\n      const section: any = {};\r\n      section.series = this.seriesName;\r\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\r\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\r\n      section.total = totalPositive + totalNegative;\r\n      section.x = 0;\r\n      section.y = 0;\r\n      if (section.total > 0) {\r\n        section.height = this.yScale(totalPositive);\r\n      } else {\r\n        section.height = this.yScale(totalNegative);\r\n      }\r\n      section.width = this.xScale.bandwidth();\r\n      this.barsForDataLabels.push(section);\r\n    } else {\r\n      this.barsForDataLabels = this.series.map(d => {\r\n        const section: any = {};\r\n        section.series = this.seriesName ? this.seriesName : d.label;\r\n        section.total = d.value;\r\n        section.x = this.xScale(d.label);\r\n        section.y = this.yScale(0);\r\n        section.height = this.yScale(section.total) - this.yScale(0);\r\n        section.width = this.xScale.bandwidth();\r\n        return section;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateTooltipSettings() {\r\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\r\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getLabel(dataItem): string {\r\n    if (dataItem.label) {\r\n      return dataItem.label;\r\n    }\r\n    return dataItem.name;\r\n  }\r\n\r\n  trackBy(index, bar): string {\r\n    return bar.label;\r\n  }\r\n\r\n  trackDataLabelBy(index, barLabel) {\r\n    return index + '#' + barLabel.series + '#' + barLabel.total;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleBand, scaleLinear } from 'd3-scale';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bar-vertical-stacked',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\r\n          [@animationState]=\"'active'\"\r\n          [attr.transform]=\"groupTransform(group)\"\r\n        >\r\n          <svg:g\r\n            ngx-charts-series-vertical\r\n            type=\"stacked\"\r\n            [xScale]=\"xScale\"\r\n            [yScale]=\"yScale\"\r\n            [activeEntries]=\"activeEntries\"\r\n            [colors]=\"colors\"\r\n            [series]=\"group.series\"\r\n            [dims]=\"dims\"\r\n            [gradient]=\"gradient\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [showDataLabel]=\"showDataLabel\"\r\n            [dataLabelFormatting]=\"dataLabelFormatting\"\r\n            [seriesName]=\"group.name\"\r\n            [animations]=\"animations\"\r\n            [noBarWhenZero]=\"noBarWhenZero\"\r\n            (select)=\"onClick($event, group)\"\r\n            (activate)=\"onActivate($event, group)\"\r\n            (deactivate)=\"onDeactivate($event, group)\"\r\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1,\r\n          transform: '*'\r\n        }),\r\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BarVerticalStackedComponent extends BaseChartComponent {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() barPadding = 8;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() yScaleMax: number;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  groupDomain: any[];\r\n  innerDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  transform: string;\r\n  tickFormatting: (label: string) => string;\r\n  colors: ColorHelper;\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showDataLabel) {\r\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\r\n    }\r\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.showDataLabel) {\r\n      this.dims.height -= this.dataLabelMaxHeight.negative;\r\n    }\r\n\r\n    this.formatDates();\r\n\r\n    this.groupDomain = this.getGroupDomain();\r\n    this.innerDomain = this.getInnerDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\r\n  }\r\n\r\n  getGroupDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.label)) {\r\n        domain.push(group.label);\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getInnerDomain() {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.label)) {\r\n          domain.push(d.label);\r\n        }\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain() {\r\n    const domain = [];\r\n    let smallest = 0;\r\n    let biggest = 0;\r\n    for (const group of this.results) {\r\n      let smallestSum = 0;\r\n      let biggestSum = 0;\r\n      for (const d of group.series) {\r\n        if (d.value < 0) {\r\n          smallestSum += d.value;\r\n        } else {\r\n          biggestSum += d.value;\r\n        }\r\n        smallest = d.value < smallest ? d.value : smallest;\r\n        biggest = d.value > biggest ? d.value : biggest;\r\n      }\r\n      domain.push(smallestSum);\r\n      domain.push(biggestSum);\r\n    }\r\n    domain.push(smallest);\r\n    domain.push(biggest);\r\n\r\n    const min = Math.min(0, ...domain);\r\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\r\n    return [min, max];\r\n  }\r\n\r\n  getXScale(): any {\r\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\r\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  onDataLabelMaxHeightChanged(event, groupIndex) {\r\n    if (event.size.negative) {\r\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\r\n    } else {\r\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\r\n    }\r\n    if (groupIndex === this.results.length - 1) {\r\n      setTimeout(() => this.update());\r\n    }\r\n  }\r\n\r\n  groupTransform(group) {\r\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\r\n  }\r\n\r\n  onClick(data, group?) {\r\n    if (group) {\r\n      data.series = group.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.innerDomain;\r\n    } else {\r\n      domain = this.valueDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.innerDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.valueDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }) {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }) {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { D0Types } from './series-vertical.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-series-horizontal]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-bar\r\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\r\n      [@animationState]=\"'active'\"\r\n      [width]=\"bar.width\"\r\n      [height]=\"bar.height\"\r\n      [x]=\"bar.x\"\r\n      [y]=\"bar.y\"\r\n      [fill]=\"bar.color\"\r\n      [stops]=\"bar.gradientStops\"\r\n      [data]=\"bar.data\"\r\n      [orientation]=\"'horizontal'\"\r\n      [roundEdges]=\"bar.roundEdges\"\r\n      (select)=\"click($event)\"\r\n      [gradient]=\"gradient\"\r\n      [isActive]=\"isActive(bar.data)\"\r\n      [ariaLabel]=\"bar.ariaLabel\"\r\n      [animations]=\"animations\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"tooltipPlacement\"\r\n      [tooltipType]=\"tooltipType\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"bar.data\"\r\n      [noBarWhenZero]=\"noBarWhenZero\"\r\n    ></svg:g>\r\n    <svg:g *ngIf=\"showDataLabel\">\r\n      <svg:g\r\n        ngx-charts-bar-label\r\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\r\n        [barX]=\"b.x\"\r\n        [barY]=\"b.y\"\r\n        [barWidth]=\"b.width\"\r\n        [barHeight]=\"b.height\"\r\n        [value]=\"b.total\"\r\n        [valueFormatting]=\"dataLabelFormatting\"\r\n        [orientation]=\"'horizontal'\"\r\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(500, style({ opacity: 0 }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SeriesHorizontal implements OnChanges {\r\n  bars: any;\r\n  x: any;\r\n  y: any;\r\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\r\n\r\n  @Input() dims;\r\n  @Input() type = 'standard';\r\n  @Input() series;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() seriesName: string;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() roundEdges: boolean;\r\n  @Input() animations: boolean = true;\r\n  @Input() showDataLabel: boolean = false;\r\n  @Input() dataLabelFormatting: any;\r\n  @Input() noBarWhenZero: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dataLabelWidthChanged = new EventEmitter();\r\n\r\n  tooltipPlacement: string;\r\n  tooltipType: string;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateTooltipSettings();\r\n    const d0 = {\r\n      [D0Types.positive]: 0,\r\n      [D0Types.negative]: 0\r\n    };\r\n    let d0Type: D0Types;\r\n    d0Type = D0Types.positive;\r\n    let total;\r\n    if (this.type === 'normalized') {\r\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n    }\r\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\r\n\r\n    this.bars = this.series.map((d, index) => {\r\n      let value = d.value;\r\n      const label = this.getLabel(d);\r\n      const formattedLabel = formatLabel(label);\r\n      const roundEdges = this.roundEdges;\r\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\r\n\r\n      const bar: any = {\r\n        value,\r\n        label,\r\n        roundEdges,\r\n        data: d,\r\n        formattedLabel\r\n      };\r\n\r\n      bar.height = this.yScale.bandwidth();\r\n\r\n      if (this.type === 'standard') {\r\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\r\n        if (value < 0) {\r\n          bar.x = this.xScale(value);\r\n        } else {\r\n          bar.x = this.xScale(xScaleMin);\r\n        }\r\n        bar.y = this.yScale(label);\r\n      } else if (this.type === 'stacked') {\r\n        const offset0 = d0[d0Type];\r\n        const offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\r\n        bar.x = this.xScale(offset0);\r\n        bar.y = 0;\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n      } else if (this.type === 'normalized') {\r\n        let offset0 = d0[d0Type];\r\n        let offset1 = offset0 + value;\r\n        d0[d0Type] += value;\r\n\r\n        if (total > 0) {\r\n          offset0 = (offset0 * 100) / total;\r\n          offset1 = (offset1 * 100) / total;\r\n        } else {\r\n          offset0 = 0;\r\n          offset1 = 0;\r\n        }\r\n\r\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\r\n        bar.x = this.xScale(offset0);\r\n        bar.y = 0;\r\n        bar.offset0 = offset0;\r\n        bar.offset1 = offset1;\r\n        value = (offset1 - offset0).toFixed(2) + '%';\r\n      }\r\n\r\n      if (this.colors.scaleType === 'ordinal') {\r\n        bar.color = this.colors.getColor(label);\r\n      } else {\r\n        if (this.type === 'standard') {\r\n          bar.color = this.colors.getColor(value);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\r\n        } else {\r\n          bar.color = this.colors.getColor(bar.offset1);\r\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\r\n        }\r\n      }\r\n\r\n      let tooltipLabel = formattedLabel;\r\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\r\n      if (this.seriesName) {\r\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\r\n        bar.data.series = this.seriesName;\r\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\r\n      }\r\n\r\n      bar.tooltipText = this.tooltipDisabled\r\n        ? undefined\r\n        : `\r\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\r\n        <span class=\"tooltip-val\">${\r\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\r\n        }</span>\r\n      `;\r\n\r\n      return bar;\r\n    });\r\n\r\n    this.updateDataLabels();\r\n  }\r\n\r\n  updateDataLabels() {\r\n    if (this.type === 'stacked') {\r\n      this.barsForDataLabels = [];\r\n      const section: any = {};\r\n      section.series = this.seriesName;\r\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\r\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\r\n      section.total = totalPositive + totalNegative;\r\n      section.x = 0;\r\n      section.y = 0;\r\n      // if total is positive then we show it on the right, otherwise on the left\r\n      if (section.total > 0) {\r\n        section.width = this.xScale(totalPositive);\r\n      } else {\r\n        section.width = this.xScale(totalNegative);\r\n      }\r\n      section.height = this.yScale.bandwidth();\r\n      this.barsForDataLabels.push(section);\r\n    } else {\r\n      this.barsForDataLabels = this.series.map(d => {\r\n        const section: any = {};\r\n        section.series = this.seriesName ? this.seriesName : d.label;\r\n        section.total = d.value;\r\n        section.x = this.xScale(0);\r\n        section.y = this.yScale(d.label);\r\n        section.width = this.xScale(section.total) - this.xScale(0);\r\n        section.height = this.yScale.bandwidth();\r\n        return section;\r\n      });\r\n    }\r\n  }\r\n\r\n  updateTooltipSettings() {\r\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\r\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  getLabel(dataItem): string {\r\n    if (dataItem.label) {\r\n      return dataItem.label;\r\n    }\r\n    return dataItem.name;\r\n  }\r\n\r\n  trackBy(index, bar) {\r\n    return bar.label;\r\n  }\r\n\r\n  trackDataLabelBy(index, barLabel) {\r\n    return index + '#' + barLabel.series + '#' + barLabel.total;\r\n  }\r\n\r\n  click(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { formatLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bar-label]',\r\n  template: `\r\n    <svg:text\r\n      class=\"textDataLabel\"\r\n      alignment-baseline=\"middle\"\r\n      [attr.text-anchor]=\"textAnchor\"\r\n      [attr.transform]=\"transform\"\r\n      [attr.x]=\"x\"\r\n      [attr.y]=\"y\"\r\n    >\r\n      {{ formatedValue }}\r\n    </svg:text>\r\n  `,\r\n  styleUrls: ['./bar-label.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BarLabelComponent implements OnChanges {\r\n  @Input() value;\r\n  @Input() valueFormatting: any;\r\n  @Input() barX;\r\n  @Input() barY;\r\n  @Input() barWidth;\r\n  @Input() barHeight;\r\n  @Input() orientation;\r\n\r\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\r\n\r\n  element: any;\r\n  x: number;\r\n  y: number;\r\n  horizontalPadding: number = 2;\r\n  verticalPadding: number = 5;\r\n  formatedValue: string;\r\n  transform: string;\r\n  textAnchor: string;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getSize(): any {\r\n    const h = this.element.getBoundingClientRect().height;\r\n    const w = this.element.getBoundingClientRect().width;\r\n    return { height: h, width: w, negative: this.value < 0 };\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dimensionsChanged.emit(this.getSize());\r\n  }\r\n\r\n  update(): void {\r\n    if (this.valueFormatting) {\r\n      this.formatedValue = this.valueFormatting(this.value);\r\n    } else {\r\n      this.formatedValue = formatLabel(this.value);\r\n    }\r\n\r\n    if (this.orientation === 'horizontal') {\r\n      this.x = this.barX + this.barWidth;\r\n      // if the value is negative then it's on the left of the x0.\r\n      // we need to put the data label in front of the bar\r\n      if (this.value < 0) {\r\n        this.x = this.x - this.horizontalPadding;\r\n        this.textAnchor = 'end';\r\n      } else {\r\n        this.x = this.x + this.horizontalPadding;\r\n        this.textAnchor = 'start';\r\n      }\r\n      this.y = this.barY + this.barHeight / 2;\r\n    } else {\r\n      // orientation must be \"vertical\"\r\n      this.x = this.barX + this.barWidth / 2;\r\n      this.y = this.barY + this.barHeight;\r\n\r\n      if (this.value < 0) {\r\n        this.y = this.y + this.verticalPadding;\r\n        this.textAnchor = 'end';\r\n      } else {\r\n        this.y = this.y - this.verticalPadding;\r\n        this.textAnchor = 'start';\r\n      }\r\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { BarComponent } from './bar.component';\r\nimport { BarHorizontalComponent } from './bar-horizontal.component';\r\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\r\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\r\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\r\nimport { BarVerticalComponent } from './bar-vertical.component';\r\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\r\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\r\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\r\nimport { SeriesHorizontal } from './series-horizontal.component';\r\nimport { SeriesVerticalComponent } from './series-vertical.component';\r\nimport { BarLabelComponent } from './bar-label.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [\r\n    BarComponent,\r\n    BarHorizontalComponent,\r\n    BarHorizontal2DComponent,\r\n    BarHorizontalNormalizedComponent,\r\n    BarHorizontalStackedComponent,\r\n    BarVerticalComponent,\r\n    BarVertical2DComponent,\r\n    BarVerticalNormalizedComponent,\r\n    BarVerticalStackedComponent,\r\n    BarLabelComponent,\r\n    SeriesHorizontal,\r\n    SeriesVerticalComponent\r\n  ],\r\n  exports: [\r\n    BarComponent,\r\n    BarHorizontalComponent,\r\n    BarHorizontal2DComponent,\r\n    BarHorizontalNormalizedComponent,\r\n    BarHorizontalStackedComponent,\r\n    BarVerticalComponent,\r\n    BarVertical2DComponent,\r\n    BarVerticalNormalizedComponent,\r\n    BarVerticalStackedComponent,\r\n    BarLabelComponent,\r\n    SeriesHorizontal,\r\n    SeriesVerticalComponent\r\n  ]\r\n})\r\nexport class BarChartModule {}\r\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\r\n\r\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\r\n  let domain: number[] = [];\r\n  if (scaleType === 'linear') {\r\n    values = values.map(v => Number(v));\r\n    if (!autoScale) {\r\n      values.push(0);\r\n    }\r\n  }\r\n\r\n  if (scaleType === 'time' || scaleType === 'linear') {\r\n    const min = minVal ? minVal : Math.min(...values);\r\n    const max = maxVal ? maxVal : Math.max(...values);\r\n\r\n    domain = [min, max];\r\n  } else {\r\n    domain = values;\r\n  }\r\n\r\n  return domain;\r\n}\r\n\r\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\r\n  let scale: any;\r\n\r\n  if (scaleType === 'time') {\r\n    scale = scaleTime().range(range).domain(domain);\r\n  } else if (scaleType === 'linear') {\r\n    scale = scaleLinear().range(range).domain(domain);\r\n\r\n    if (roundDomains) {\r\n      scale = scale.nice();\r\n    }\r\n  } else if (scaleType === 'ordinal') {\r\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\r\n  }\r\n\r\n  return scale;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostListener,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { getScaleType } from '../common/domain.helper';\r\nimport { getDomain, getScale } from './bubble-chart.utils';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-bubble-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [dims]=\"dims\"\r\n          [xScale]=\"xScale\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        />\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        />\r\n        <svg:rect\r\n          class=\"bubble-chart-area\"\r\n          x=\"0\"\r\n          y=\"0\"\r\n          [attr.width]=\"dims.width\"\r\n          [attr.height]=\"dims.height\"\r\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\r\n          (mouseenter)=\"deactivateAll()\"\r\n        />\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-bubble-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [rScale]=\"rScale\"\r\n              [xScaleType]=\"xScaleType\"\r\n              [yScaleType]=\"yScaleType\"\r\n              [xAxisLabel]=\"xAxisLabel\"\r\n              [yAxisLabel]=\"yAxisLabel\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              (select)=\"onClick($event, series)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n            />\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BubbleChartComponent extends BaseChartComponent {\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis: boolean = true;\r\n  @Input() yAxis: boolean = true;\r\n  @Input() showXAxisLabel: boolean;\r\n  @Input() showYAxisLabel: boolean;\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() maxRadius = 10;\r\n  @Input() minRadius = 3;\r\n  @Input() autoScale: boolean;\r\n  @Input() schemeType = 'ordinal';\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: any;\r\n  @Input() yScaleMax: any;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  colors: ColorHelper;\r\n  scaleType = 'linear';\r\n  margin = [10, 20, 10, 20];\r\n  bubblePadding = [0, 0, 0, 0];\r\n  data: any;\r\n\r\n  legendOptions: any;\r\n  transform: string;\r\n\r\n  clipPath: string;\r\n  clipPathId: string;\r\n\r\n  seriesDomain: any[];\r\n  xDomain: any[];\r\n  yDomain: any[];\r\n  rDomain: number[];\r\n\r\n  xScaleType: string;\r\n  yScaleType: string;\r\n\r\n  yScale: any;\r\n  xScale: any;\r\n  rScale: any;\r\n\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n\r\n  activeEntries: any[] = [];\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.seriesDomain = this.results.map(d => d.name);\r\n    this.rDomain = this.getRDomain();\r\n    this.xDomain = this.getXDomain();\r\n    this.yDomain = this.getYDomain();\r\n\r\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\r\n\r\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\r\n\r\n    this.data = this.results;\r\n\r\n    this.minRadius = Math.max(this.minRadius, 1);\r\n    this.maxRadius = Math.max(this.maxRadius, 1);\r\n\r\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\r\n\r\n    this.bubblePadding = [0, 0, 0, 0];\r\n    this.setScales();\r\n\r\n    this.bubblePadding = this.getBubblePadding();\r\n    this.setScales();\r\n\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getBubblePadding() {\r\n    let yMin = 0;\r\n    let xMin = 0;\r\n    let yMax = this.dims.height;\r\n    let xMax = this.dims.width;\r\n\r\n    for (const s of this.data) {\r\n      for (const d of s.series) {\r\n        const r = this.rScale(d.r);\r\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\r\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\r\n        xMin = Math.max(r - cx, xMin);\r\n        yMin = Math.max(r - cy, yMin);\r\n        yMax = Math.max(cy + r, yMax);\r\n        xMax = Math.max(cx + r, xMax);\r\n      }\r\n    }\r\n\r\n    xMax = Math.max(xMax - this.dims.width, 0);\r\n    yMax = Math.max(yMax - this.dims.height, 0);\r\n\r\n    return [yMin, xMax, yMax, xMin];\r\n  }\r\n\r\n  setScales() {\r\n    let width = this.dims.width;\r\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\r\n      width = width - this.bubblePadding[1];\r\n    }\r\n    let height = this.dims.height;\r\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\r\n      height = height - this.bubblePadding[2];\r\n    }\r\n    this.xScale = this.getXScale(this.xDomain, width);\r\n    this.yScale = this.getYScale(this.yDomain, height);\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\r\n  }\r\n\r\n  getRScale(domain, range): any {\r\n    const scale = scaleLinear().range(range).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  getLegendOptions(): any {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      position: this.legendPosition,\r\n      title: undefined\r\n    };\r\n\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.rDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n\r\n    return opts;\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    const values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.x)) {\r\n          values.push(d.x);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.xScaleType = getScaleType(values);\r\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const values = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.y)) {\r\n          values.push(d.y);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.yScaleType = getScaleType(values);\r\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\r\n  }\r\n\r\n  getRDomain(): number[] {\r\n    let min = Infinity;\r\n    let max = -Infinity;\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        const value = Number(d.r) || 1;\r\n        min = Math.min(min, value);\r\n        max = Math.max(max, value);\r\n      }\r\n    }\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-bubble-series]',\r\n  template: `\r\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\r\n      <svg:g [attr.transform]=\"circle.transform\">\r\n        <svg:g\r\n          ngx-charts-circle\r\n          [@animationState]=\"'active'\"\r\n          class=\"circle\"\r\n          [cx]=\"0\"\r\n          [cy]=\"0\"\r\n          [r]=\"circle.radius\"\r\n          [fill]=\"circle.color\"\r\n          [style.opacity]=\"circle.opacity\"\r\n          [class.active]=\"circle.isActive\"\r\n          [pointerEvents]=\"'all'\"\r\n          [data]=\"circle.value\"\r\n          [classNames]=\"circle.classNames\"\r\n          (select)=\"onClick(circle.data)\"\r\n          (activate)=\"activateCircle(circle)\"\r\n          (deactivate)=\"deactivateCircle(circle)\"\r\n          ngx-tooltip\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipPlacement]=\"'top'\"\r\n          [tooltipType]=\"'tooltip'\"\r\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipContext]=\"circle.data\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          opacity: 0,\r\n          transform: 'scale(0)'\r\n        }),\r\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class BubbleSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() rScale;\r\n  @Input() xScaleType;\r\n  @Input() yScaleType;\r\n  @Input() colors;\r\n  @Input() visibleValue;\r\n  @Input() activeEntries: any[];\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  areaPath: any;\r\n  circles: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.circles = this.getCircles();\r\n  }\r\n\r\n  getCircles(): any[] {\r\n    const seriesName = this.data.name;\r\n\r\n    return this.data.series\r\n      .map((d, i) => {\r\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\r\n          const y = d.y;\r\n          const x = d.x;\r\n          const r = d.r;\r\n\r\n          const radius = this.rScale(r || 1);\r\n          const tooltipLabel = formatLabel(d.name);\r\n\r\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\r\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\r\n\r\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\r\n\r\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\r\n          const opacity = isActive ? 1 : 0.3;\r\n\r\n          const data = Object.assign({}, d, {\r\n            series: seriesName,\r\n            name: d.name,\r\n            value: d.y,\r\n            x: d.x,\r\n            radius: d.r\r\n          });\r\n\r\n          return {\r\n            data,\r\n            x,\r\n            y,\r\n            r,\r\n            classNames: [`circle-data-${i}`],\r\n            value: y,\r\n            label: x,\r\n            cx,\r\n            cy,\r\n            radius,\r\n            tooltipLabel,\r\n            color,\r\n            opacity,\r\n            seriesName,\r\n            isActive,\r\n            transform: `translate(${cx},${cy})`\r\n          };\r\n        }\r\n      })\r\n      .filter(circle => circle !== undefined);\r\n  }\r\n\r\n  getTooltipText(circle): string {\r\n    const hasRadius = typeof circle.r !== 'undefined';\r\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\r\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\r\n\r\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\r\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\r\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\r\n    const x = formatLabel(circle.x);\r\n    const y = formatLabel(circle.y);\r\n    const name =\r\n      hasSeriesName && hasTooltipLabel\r\n        ? `${circle.seriesName} • ${circle.tooltipLabel}`\r\n        : circle.seriesName + circle.tooltipLabel;\r\n    const tooltipTitle =\r\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\r\n\r\n    return `\r\n      ${tooltipTitle}\r\n      <span class=\"tooltip-label\">\r\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\r\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\r\n      </span>\r\n      <span class=\"tooltip-val\">\r\n        ${escapeLabel(radiusValue)}\r\n      </span>\r\n    `;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isVisible(circle): boolean {\r\n    if (this.activeEntries.length > 0) {\r\n      return this.isActive({ name: circle.seriesName });\r\n    }\r\n\r\n    return circle.opacity !== 0;\r\n  }\r\n\r\n  activateCircle(circle): void {\r\n    circle.barVisible = true;\r\n    this.activate.emit({ name: this.data.name });\r\n  }\r\n\r\n  deactivateCircle(circle): void {\r\n    circle.barVisible = false;\r\n    this.deactivate.emit({ name: this.data.name });\r\n  }\r\n\r\n  trackBy(index, circle): string {\r\n    return `${circle.data.series} ${circle.data.name}`;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { BubbleChartComponent } from './bubble-chart.component';\r\nimport { BubbleSeriesComponent } from './bubble-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\r\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\r\n})\r\nexport class BubbleChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  ElementRef,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  HostListener\r\n} from '@angular/core';\r\nimport { select } from 'd3-selection';\r\n\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-heat-map-cell]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\r\n      <defs *ngIf=\"gradient\">\r\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n      </defs>\r\n      <svg:rect\r\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\r\n        rx=\"3\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        class=\"cell\"\r\n        style=\"cursor: pointer\"\r\n        (click)=\"onClick()\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HeatMapCellComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() data;\r\n  @Input() label;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  transform: string;\r\n  activeRange: any[];\r\n  startOpacity: number;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  gradientStops: any[];\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.transform = `translate(${this.x} , ${this.y})`;\r\n\r\n    this.startOpacity = 0.3;\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n    this.gradientStops = this.getGradientStops();\r\n\r\n    if (this.animations) {\r\n      this.loadAnimation();\r\n    }\r\n  }\r\n\r\n  getGradientStops() {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: this.startOpacity\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element).select('.cell');\r\n    node.attr('opacity', 0);\r\n    this.animateToCurrentForm();\r\n  }\r\n\r\n  animateToCurrentForm(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    node.transition().duration(750).attr('opacity', 1);\r\n  }\r\n\r\n  onClick() {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    this.activate.emit(this.data);\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    this.deactivate.emit(this.data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  OnInit,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-heat-map-cell-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-heat-map-cell\r\n      *ngFor=\"let c of cells; trackBy: trackBy\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [fill]=\"c.fill\"\r\n      [data]=\"c.data\"\r\n      (select)=\"onClick(c.cell)\"\r\n      (activate)=\"activate.emit(c.cell)\"\r\n      (deactivate)=\"deactivate.emit(c.cell)\"\r\n      [gradient]=\"gradient\"\r\n      [animations]=\"animations\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\r\n  @Input() data;\r\n  @Input() colors;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() gradient: boolean;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  cells: any[];\r\n\r\n  ngOnInit() {\r\n    if (!this.tooltipText) {\r\n      this.tooltipText = this.getTooltipText;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.cells = this.getCells();\r\n  }\r\n\r\n  getCells() {\r\n    const cells = [];\r\n\r\n    this.data.map(row => {\r\n      row.series.map(cell => {\r\n        const value = cell.value;\r\n        cell.series = row.name;\r\n\r\n        cells.push({\r\n          row,\r\n          cell,\r\n          x: this.xScale(row.name),\r\n          y: this.yScale(cell.name),\r\n          width: this.xScale.bandwidth(),\r\n          height: this.yScale.bandwidth(),\r\n          fill: this.colors.getColor(value),\r\n          data: value,\r\n          label: formatLabel(cell.name),\r\n          series: row.name\r\n        });\r\n      });\r\n    });\r\n\r\n    return cells;\r\n  }\r\n\r\n  getTooltipText({ label, data, series }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.tooltipText;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { scaleBand } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { getScaleType } from '../common/domain.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-heat-map',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [animations]=\"animations\"\r\n      [legendOptions]=\"legendOptions\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:rect\r\n          *ngFor=\"let rect of rects\"\r\n          [attr.x]=\"rect.x\"\r\n          [attr.y]=\"rect.y\"\r\n          [attr.rx]=\"rect.rx\"\r\n          [attr.width]=\"rect.width\"\r\n          [attr.height]=\"rect.height\"\r\n          [attr.fill]=\"rect.fill\"\r\n        />\r\n        <svg:g\r\n          ngx-charts-heat-map-cell-series\r\n          [xScale]=\"xScale\"\r\n          [yScale]=\"yScale\"\r\n          [colors]=\"colors\"\r\n          [data]=\"results\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipText]=\"tooltipText\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event, undefined)\"\r\n          (deactivate)=\"onDeactivate($event, undefined)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class HeatMapComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() gradient: boolean;\r\n  @Input() innerPadding: number | number[] = 8;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() min: any;\r\n  @Input() max: any;\r\n  @Input() activeEntries: any[] = [];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xDomain: any[];\r\n  yDomain: any[];\r\n  valueDomain: any[];\r\n  xScale: any;\r\n  yScale: any;\r\n  color: any;\r\n  colors: ColorHelper;\r\n  colorScale: any;\r\n  transform: string;\r\n  rects: any[];\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  legendOptions: any;\r\n  scaleType: string = 'linear';\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.formatDates();\r\n\r\n    this.xDomain = this.getXDomain();\r\n    this.yDomain = this.getYDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n\r\n    this.scaleType = getScaleType(this.valueDomain, false);\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.scaleType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.scaleType === 'linear') {\r\n      let min = this.min;\r\n      let max = this.max;\r\n      if (!this.min) {\r\n        min = Math.min(0, ...this.valueDomain);\r\n      }\r\n      if (!this.max) {\r\n        max = Math.max(...this.valueDomain);\r\n      }\r\n      this.valueDomain = [min, max];\r\n    }\r\n\r\n    this.xScale = this.getXScale();\r\n    this.yScale = this.getYScale();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n    this.rects = this.getRects();\r\n  }\r\n\r\n  getXDomain(): any {\r\n    const domain = [];\r\n    for (const group of this.results) {\r\n      if (!domain.includes(group.name)) {\r\n        domain.push(group.name);\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.name)) {\r\n          domain.push(d.name);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const domain = [];\r\n\r\n    for (const group of this.results) {\r\n      for (const d of group.series) {\r\n        if (!domain.includes(d.value)) {\r\n          domain.push(d.value);\r\n        }\r\n      }\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  /**\r\n   * Converts the input to gap paddingInner in fraction\r\n   * Supports the following inputs:\r\n   *    Numbers: 8\r\n   *    Strings: \"8\", \"8px\", \"8%\"\r\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\r\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\r\n   *\r\n   * @memberOf HeatMapComponent\r\n   */\r\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\r\n    if (typeof value === 'string') {\r\n      value = value\r\n        .replace('[', '')\r\n        .replace(']', '')\r\n        .replace('px', '')\r\n        // tslint:disable-next-line: quotemark\r\n        .replace(\"'\", '');\r\n\r\n      if (value.includes(',')) {\r\n        value = value.split(',');\r\n      }\r\n    }\r\n    if (Array.isArray(value) && typeof index === 'number') {\r\n      return this.getDimension(value[index], null, N, L);\r\n    }\r\n    if (typeof value === 'string' && value.includes('%')) {\r\n      return +value.replace('%', '') / 100;\r\n    }\r\n    return N / (L / +value + 1);\r\n  }\r\n\r\n  getXScale(): any {\r\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\r\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\r\n  }\r\n\r\n  getYScale(): any {\r\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\r\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\r\n  }\r\n\r\n  getRects(): any[] {\r\n    const rects = [];\r\n\r\n    this.xDomain.map(xVal => {\r\n      this.yDomain.map(yVal => {\r\n        rects.push({\r\n          x: this.xScale(xVal),\r\n          y: this.yScale(yVal),\r\n          rx: 3,\r\n          width: this.xScale.bandwidth(),\r\n          height: this.yScale.bandwidth(),\r\n          fill: 'rgba(200,200,200,0.03)'\r\n        });\r\n      });\r\n    });\r\n\r\n    return rects;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    return {\r\n      scaleType: this.scaleType,\r\n      domain: this.valueDomain,\r\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\r\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    const items = this.results\r\n      .map(g => g.series)\r\n      .flat()\r\n      .filter(i => {\r\n        if (fromLegend) {\r\n          return i.label === item.name;\r\n        } else {\r\n          return i.name === item.name && i.series === item.series;\r\n        }\r\n      });\r\n\r\n    this.activeEntries = [...items];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(event, group, fromLegend = false) {\r\n    const item = Object.assign({}, event);\r\n    if (group) {\r\n      item.series = group.name;\r\n    }\r\n\r\n    this.activeEntries = this.activeEntries.filter(i => {\r\n      if (fromLegend) {\r\n        return i.label !== item.name;\r\n      } else {\r\n        return !(i.name === item.name && i.series === item.series);\r\n      }\r\n    });\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { HeatMapCellComponent } from './heat-map-cell.component';\r\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\r\nimport { HeatMapComponent } from './heat-map.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\r\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\r\n})\r\nexport class HeatMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ElementRef,\r\n  ChangeDetectionStrategy,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { select } from 'd3-selection';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-line]',\r\n  template: `\r\n    <svg:path\r\n      [@animationState]=\"'active'\"\r\n      class=\"line\"\r\n      [attr.d]=\"initialPath\"\r\n      [attr.fill]=\"fill\"\r\n      [attr.stroke]=\"stroke\"\r\n      stroke-width=\"1.5px\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':enter', [\r\n        style({\r\n          strokeDasharray: 2000,\r\n          strokeDashoffset: 2000\r\n        }),\r\n        animate(\r\n          1000,\r\n          style({\r\n            strokeDashoffset: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class LineComponent implements OnChanges {\r\n  @Input() path;\r\n  @Input() stroke;\r\n  @Input() data;\r\n  @Input() fill: string = 'none';\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  initialized: boolean = false;\r\n  initialPath: string;\r\n\r\n  constructor(private element: ElementRef) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!this.initialized) {\r\n      this.initialized = true;\r\n      this.initialPath = this.path;\r\n    } else {\r\n      this.updatePathEl();\r\n    }\r\n  }\r\n\r\n  updatePathEl(): void {\r\n    const node = select(this.element.nativeElement).select('.line');\r\n\r\n    if (this.animations) {\r\n      node.transition().duration(750).attr('d', this.path);\r\n    } else {\r\n      node.attr('d', this.path);\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  HostListener,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { curveLinear } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { id } from '../utils/id';\r\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\r\nimport { toggleEntry } from '../common/toggle-entry.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-line-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [hiddenEntries]=\"hiddenEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n      (legendLabelToggle)=\"onToggle($event)\"\r\n    >\r\n      <svg:defs>\r\n        <svg:clipPath [attr.id]=\"clipPathId\">\r\n          <svg:rect\r\n            [attr.width]=\"dims.width + 10\"\r\n            [attr.height]=\"dims.height + 10\"\r\n            [attr.transform]=\"'translate(-5, -5)'\"\r\n          />\r\n        </svg:clipPath>\r\n      </svg:defs>\r\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\r\n        <svg:g\r\n          ngx-charts-x-axis\r\n          *ngIf=\"xAxis\"\r\n          [xScale]=\"xScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showXAxisLabel\"\r\n          [labelText]=\"xAxisLabel\"\r\n          [trimTicks]=\"trimXAxisTicks\"\r\n          [rotateTicks]=\"rotateXAxisTicks\"\r\n          [maxTickLength]=\"maxXAxisTickLength\"\r\n          [tickFormatting]=\"xAxisTickFormatting\"\r\n          [ticks]=\"xAxisTicks\"\r\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yScale\"\r\n          [dims]=\"dims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          [ticks]=\"yAxisTicks\"\r\n          [referenceLines]=\"referenceLines\"\r\n          [showRefLines]=\"showRefLines\"\r\n          [showRefLabels]=\"showRefLabels\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g [attr.clip-path]=\"clipPath\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-line-series\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [hiddenEntries]=\"hiddenEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [curve]=\"curve\"\r\n              [rangeFillOpacity]=\"rangeFillOpacity\"\r\n              [hasRange]=\"hasRange\"\r\n              [animations]=\"animations\"\r\n            />\r\n          </svg:g>\r\n\r\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\r\n            <svg:g\r\n              ngx-charts-tooltip-area\r\n              [dims]=\"dims\"\r\n              [xSet]=\"xSet\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [results]=\"results\"\r\n              [colors]=\"colors\"\r\n              [hiddenEntries]=\"hiddenEntries\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\r\n              (hover)=\"updateHoveredVertical($event)\"\r\n            />\r\n\r\n            <svg:g *ngFor=\"let series of results\">\r\n              <svg:g\r\n                ngx-charts-circle-series\r\n                [xScale]=\"xScale\"\r\n                [yScale]=\"yScale\"\r\n                [colors]=\"colors\"\r\n                [data]=\"series\"\r\n                [scaleType]=\"scaleType\"\r\n                [visibleValue]=\"hoveredVertical\"\r\n                [activeEntries]=\"activeEntries\"\r\n                [hiddenEntries]=\"hiddenEntries\"\r\n                [tooltipDisabled]=\"tooltipDisabled\"\r\n                [tooltipTemplate]=\"tooltipTemplate\"\r\n                (select)=\"onClick($event)\"\r\n                (activate)=\"onActivate($event)\"\r\n                (deactivate)=\"onDeactivate($event)\"\r\n              />\r\n            </svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n      <svg:g\r\n        ngx-charts-timeline\r\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\r\n        [attr.transform]=\"timelineTransform\"\r\n        [results]=\"results\"\r\n        [view]=\"[timelineWidth, height]\"\r\n        [height]=\"timelineHeight\"\r\n        [scheme]=\"scheme\"\r\n        [customColors]=\"customColors\"\r\n        [scaleType]=\"scaleType\"\r\n        [legend]=\"legend\"\r\n        (onDomainChange)=\"updateDomain($event)\"\r\n      >\r\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\r\n          <svg:g\r\n            ngx-charts-line-series\r\n            [xScale]=\"timelineXScale\"\r\n            [yScale]=\"timelineYScale\"\r\n            [colors]=\"colors\"\r\n            [data]=\"series\"\r\n            [scaleType]=\"scaleType\"\r\n            [curve]=\"curve\"\r\n            [hasRange]=\"hasRange\"\r\n            [animations]=\"animations\"\r\n            [hiddenEntries]=\"hiddenEntries\"\r\n          />\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class LineChartComponent extends BaseChartComponent {\r\n  @Input() legend;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() canHideSerie: boolean = false;\r\n  @Input() xAxis;\r\n  @Input() yAxis;\r\n  @Input() showXAxisLabel;\r\n  @Input() showYAxisLabel;\r\n  @Input() xAxisLabel;\r\n  @Input() yAxisLabel;\r\n  @Input() autoScale;\r\n  @Input() timeline;\r\n  @Input() gradient: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveLinear;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() hiddenEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() trimXAxisTicks: boolean = true;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() rotateXAxisTicks: boolean = true;\r\n  @Input() maxXAxisTickLength: number = 16;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: any;\r\n  @Input() yAxisTickFormatting: any;\r\n  @Input() xAxisTicks: any[];\r\n  @Input() yAxisTicks: any[];\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() showRefLines: boolean = false;\r\n  @Input() referenceLines: any;\r\n  @Input() showRefLabels: boolean = true;\r\n  @Input() xScaleMin: any;\r\n  @Input() xScaleMax: any;\r\n  @Input() yScaleMin: number;\r\n  @Input() yScaleMax: number;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  xSet: any;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  yScale: any;\r\n  xScale: any;\r\n  colors: ColorHelper;\r\n  scaleType: string;\r\n  transform: string;\r\n  clipPath: string;\r\n  clipPathId: string;\r\n  series: any;\r\n  areaPath: any;\r\n  margin = [10, 20, 10, 20];\r\n  hoveredVertical: any; // the value of the x axis that is hovered over\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n  hasRange: boolean; // whether the line has a min-max range around it\r\n  timelineWidth: any;\r\n  timelineHeight: number = 50;\r\n  timelineXScale: any;\r\n  timelineYScale: any;\r\n  timelineXDomain: any;\r\n  timelineTransform: any;\r\n  timelinePadding: number = 10;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    if (this.timeline) {\r\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\r\n    }\r\n\r\n    this.xDomain = this.getXDomain();\r\n    if (this.filteredDomain) {\r\n      this.xDomain = this.filteredDomain;\r\n    }\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\r\n\r\n    this.updateTimeline();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    this.clipPathId = 'clip' + id().toString();\r\n    this.clipPath = `url(#${this.clipPathId})`;\r\n  }\r\n\r\n  updateTimeline(): void {\r\n    if (this.timeline) {\r\n      this.timelineWidth = this.dims.width;\r\n      this.timelineXDomain = this.getXDomain();\r\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\r\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\r\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\r\n    }\r\n  }\r\n\r\n  getXDomain(): any[] {\r\n    let values = getUniqueXDomainValues(this.results);\r\n\r\n    this.scaleType = getScaleType(values);\r\n    let domain = [];\r\n\r\n    if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n    }\r\n\r\n    let min;\r\n    let max;\r\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\r\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\r\n\r\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\r\n    }\r\n\r\n    if (this.scaleType === 'time') {\r\n      domain = [new Date(min), new Date(max)];\r\n      this.xSet = [...values].sort((a, b) => {\r\n        const aDate = a.getTime();\r\n        const bDate = b.getTime();\r\n        if (aDate > bDate) return 1;\r\n        if (bDate > aDate) return -1;\r\n        return 0;\r\n      });\r\n    } else if (this.scaleType === 'linear') {\r\n      domain = [min, max];\r\n      // Use compare function to sort numbers numerically\r\n      this.xSet = [...values].sort((a, b) => a - b);\r\n    } else {\r\n      domain = values;\r\n      this.xSet = values;\r\n    }\r\n\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(): any[] {\r\n    const domain = [];\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (domain.indexOf(d.value) < 0) {\r\n          domain.push(d.value);\r\n        }\r\n        if (d.min !== undefined) {\r\n          this.hasRange = true;\r\n          if (domain.indexOf(d.min) < 0) {\r\n            domain.push(d.min);\r\n          }\r\n        }\r\n        if (d.max !== undefined) {\r\n          this.hasRange = true;\r\n          if (domain.indexOf(d.max) < 0) {\r\n            domain.push(d.max);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const values = [...domain];\r\n    if (!this.autoScale) {\r\n      values.push(0);\r\n    }\r\n\r\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\r\n\r\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    let scale;\r\n\r\n    if (this.scaleType === 'time') {\r\n      scale = scaleTime().range([0, width]).domain(domain);\r\n    } else if (this.scaleType === 'linear') {\r\n      scale = scaleLinear().range([0, width]).domain(domain);\r\n\r\n      if (this.roundDomains) {\r\n        scale = scale.nice();\r\n      }\r\n    } else if (this.scaleType === 'ordinal') {\r\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\r\n    }\r\n\r\n    return scale;\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([height, 0]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  updateDomain(domain): void {\r\n    this.filteredDomain = domain;\r\n    this.xDomain = this.filteredDomain;\r\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\r\n  }\r\n\r\n  updateHoveredVertical(item): void {\r\n    this.hoveredVertical = item.value;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  hideCircles(): void {\r\n    this.hoveredVertical = null;\r\n    this.deactivateAll();\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.name;\r\n  }\r\n\r\n  setColors(): void {\r\n    let domain;\r\n    if (this.schemeType === 'ordinal') {\r\n      domain = this.seriesDomain;\r\n    } else {\r\n      domain = this.yDomain;\r\n    }\r\n\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    const opts = {\r\n      scaleType: this.schemeType,\r\n      colors: undefined,\r\n      domain: [],\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n    if (opts.scaleType === 'ordinal') {\r\n      opts.domain = this.seriesDomain;\r\n      opts.colors = this.colors;\r\n      opts.title = this.legendTitle;\r\n    } else {\r\n      opts.domain = this.yDomain;\r\n      opts.colors = this.colors.scale;\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    this.deactivateAll();\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  onToggle(item) {\r\n    if(!this.canHideSerie) return;\r\n    const toggleResult = toggleEntry(item, this.hiddenEntries);\r\n    this.hiddenEntries = toggleResult.hiddenEntries;\r\n    this.toggle.emit({ value: item, hidden: toggleResult.hidden, hiddenEntries: this.hiddenEntries });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { area, line } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-line-series]',\r\n  template: `\r\n    <svg:g>\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-linear-gradient\r\n          *ngIf=\"hasGradient && !isHidden(data)\"\r\n          orientation=\"vertical\"\r\n          [name]=\"gradientId\"\r\n          [stops]=\"gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:g\r\n        ngx-charts-area\r\n        *ngIf=\"!isHidden(data)\"\r\n        class=\"line-highlight\"\r\n        [data]=\"data\"\r\n        [path]=\"areaPath\"\r\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\r\n        [opacity]=\"0.25\"\r\n        [startOpacity]=\"0\"\r\n        [gradient]=\"true\"\r\n        [stops]=\"areaGradientStops\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n        [animations]=\"animations\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-line\r\n        *ngIf=\"!isHidden(data)\"\r\n        class=\"line-series\"\r\n        [data]=\"data\"\r\n        [path]=\"path\"\r\n        [stroke]=\"stroke\"\r\n        [animations]=\"animations\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-area\r\n        *ngIf=\"hasRange && !isHidden(data)\"\r\n        class=\"line-series-range\"\r\n        [data]=\"data\"\r\n        [path]=\"outerPath\"\r\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\r\n        [class.active]=\"isActive(data)\"\r\n        [class.inactive]=\"isInactive(data)\"\r\n        [opacity]=\"rangeFillOpacity\"\r\n        [animations]=\"animations\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LineSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() xScale;\r\n  @Input() yScale;\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() curve: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() hiddenEntries: any[];\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() hasRange: boolean;\r\n  @Input() animations: boolean = true;\r\n\r\n  path: string;\r\n  outerPath: string;\r\n  areaPath: string;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n  areaGradientStops: any[];\r\n  stroke: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradients();\r\n\r\n    const data = this.sortData(this.data.series);\r\n\r\n    const lineGen = this.getLineGenerator();\r\n    this.path = lineGen(data) || '';\r\n\r\n    const areaGen = this.getAreaGenerator();\r\n    this.areaPath = areaGen(data) || '';\r\n\r\n    if (this.hasRange) {\r\n      const range = this.getRangeGenerator();\r\n      this.outerPath = range(data) || '';\r\n    }\r\n\r\n    if (this.hasGradient) {\r\n      this.stroke = this.gradientUrl;\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      if (max === min) {\r\n        this.stroke = this.colors.getColor(max);\r\n      }\r\n    } else {\r\n      this.stroke = this.colors.getColor(this.data.name);\r\n    }\r\n  }\r\n\r\n  getLineGenerator(): any {\r\n    return line<any>()\r\n      .x(d => {\r\n        const label = d.name;\r\n        let value;\r\n        if (this.scaleType === 'time') {\r\n          value = this.xScale(label);\r\n        } else if (this.scaleType === 'linear') {\r\n          value = this.xScale(Number(label));\r\n        } else {\r\n          value = this.xScale(label);\r\n        }\r\n        return value;\r\n      })\r\n      .y(d => this.yScale(d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  getRangeGenerator(): any {\r\n    return area<any>()\r\n      .x(d => {\r\n        const label = d.name;\r\n        let value;\r\n        if (this.scaleType === 'time') {\r\n          value = this.xScale(label);\r\n        } else if (this.scaleType === 'linear') {\r\n          value = this.xScale(Number(label));\r\n        } else {\r\n          value = this.xScale(label);\r\n        }\r\n        return value;\r\n      })\r\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\r\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  getAreaGenerator(): any {\r\n    const xProperty = d => {\r\n      const label = d.name;\r\n      return this.xScale(label);\r\n    };\r\n\r\n    return area<any>()\r\n      .x(xProperty)\r\n      .y0(() => this.yScale.range()[0])\r\n      .y1(d => this.yScale(d.value))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  sortData(data) {\r\n    if (this.scaleType === 'linear') {\r\n      data = sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      data = sortByTime(data, 'name');\r\n    } else {\r\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  updateGradients() {\r\n    if (this.colors.scaleType === 'linear') {\r\n      this.hasGradient = true;\r\n      this.gradientId = 'grad' + id().toString();\r\n      this.gradientUrl = `url(#${this.gradientId})`;\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\r\n    } else {\r\n      this.hasGradient = false;\r\n      this.gradientStops = undefined;\r\n      this.areaGradientStops = undefined;\r\n    }\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n\r\n  isHidden(entry): boolean {\r\n    if (!this.hiddenEntries || this.hiddenEntries.length === 0) return false;\r\n    const item = this.hiddenEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { LineComponent } from './line.component';\r\nimport { LineChartComponent } from './line-chart.component';\r\nimport { LineSeriesComponent } from './line-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\r\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\r\n})\r\nexport class LineChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\r\nimport { curveCardinalClosed } from 'd3-shape';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { getScaleType } from '../common/domain.helper';\r\nimport { isDate } from '../utils/types';\r\n\r\nconst twoPI = 2 * Math.PI;\r\n\r\n@Component({\r\n  selector: 'ngx-charts-polar-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\r\n        <svg:g [attr.transform]=\"transformPlot\">\r\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\r\n          <svg:g *ngIf=\"showGridLines\">\r\n            <svg:circle\r\n              *ngFor=\"let r of radiusTicks\"\r\n              class=\"gridline-path radial-gridline-path\"\r\n              cx=\"0\"\r\n              cy=\"0\"\r\n              [attr.r]=\"r\"\r\n            />\r\n          </svg:g>\r\n          <svg:g *ngIf=\"xAxis\">\r\n            <svg:g\r\n              ngx-charts-pie-label\r\n              *ngFor=\"let tick of thetaTicks\"\r\n              [data]=\"tick\"\r\n              [radius]=\"outerRadius\"\r\n              [label]=\"tick.label\"\r\n              [max]=\"outerRadius\"\r\n              [value]=\"showGridLines ? 1 : outerRadius\"\r\n              [explodeSlices]=\"true\"\r\n              [animations]=\"animations\"\r\n              [labelTrim]=\"labelTrim\"\r\n              [labelTrimSize]=\"labelTrimSize\"\r\n            ></svg:g>\r\n          </svg:g>\r\n        </svg:g>\r\n        <svg:g\r\n          ngx-charts-y-axis\r\n          [attr.transform]=\"transformYAxis\"\r\n          *ngIf=\"yAxis\"\r\n          [yScale]=\"yAxisScale\"\r\n          [dims]=\"yAxisDims\"\r\n          [showGridLines]=\"showGridLines\"\r\n          [showLabel]=\"showYAxisLabel\"\r\n          [labelText]=\"yAxisLabel\"\r\n          [trimTicks]=\"trimYAxisTicks\"\r\n          [maxTickLength]=\"maxYAxisTickLength\"\r\n          [tickFormatting]=\"yAxisTickFormatting\"\r\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-axis-label\r\n          *ngIf=\"xAxis && showXAxisLabel\"\r\n          [label]=\"xAxisLabel\"\r\n          [offset]=\"labelOffset\"\r\n          [orient]=\"'bottom'\"\r\n          [height]=\"dims.height\"\r\n          [width]=\"dims.width\"\r\n        ></svg:g>\r\n        <svg:g [attr.transform]=\"transformPlot\">\r\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\r\n            <svg:g\r\n              ngx-charts-polar-series\r\n              [gradient]=\"gradient\"\r\n              [xScale]=\"xScale\"\r\n              [yScale]=\"yScale\"\r\n              [colors]=\"colors\"\r\n              [data]=\"series\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [scaleType]=\"scaleType\"\r\n              [curve]=\"curve\"\r\n              [rangeFillOpacity]=\"rangeFillOpacity\"\r\n              [animations]=\"animations\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              (select)=\"onClick($event)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n            />\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: [\r\n    '../common/base-chart.component.scss',\r\n    '../pie-chart/pie-chart.component.scss',\r\n    './polar-chart.component.scss'\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  animations: [\r\n    trigger('animationState', [\r\n      transition(':leave', [\r\n        style({\r\n          opacity: 1\r\n        }),\r\n        animate(\r\n          500,\r\n          style({\r\n            opacity: 0\r\n          })\r\n        )\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class PolarChartComponent extends BaseChartComponent {\r\n  @Input() legend: boolean;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() xAxis: boolean;\r\n  @Input() yAxis: boolean;\r\n  @Input() showXAxisLabel: boolean;\r\n  @Input() showYAxisLabel: boolean;\r\n  @Input() xAxisLabel: string;\r\n  @Input() yAxisLabel: string;\r\n  @Input() autoScale: boolean;\r\n  @Input() showGridLines: boolean = true;\r\n  @Input() curve: any = curveCardinalClosed;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() schemeType: string;\r\n  @Input() rangeFillOpacity: number = 0.15;\r\n  @Input() trimYAxisTicks: boolean = true;\r\n  @Input() maxYAxisTickLength: number = 16;\r\n  @Input() xAxisTickFormatting: (o: any) => any;\r\n  @Input() yAxisTickFormatting: (o: any) => any;\r\n  @Input() roundDomains: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() showSeriesOnHover: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() yAxisMinScale: number = 0;\r\n  @Input() labelTrim: boolean = true;\r\n  @Input() labelTrimSize: number = 10;\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: ViewDimensions;\r\n  yAxisDims: ViewDimensions;\r\n  labelOffset: number;\r\n  xDomain: any;\r\n  yDomain: any;\r\n  seriesDomain: any;\r\n  yScale: any; // -> rScale\r\n  xScale: any; // -> tScale\r\n  yAxisScale: any; // -> yScale\r\n  colors: ColorHelper;\r\n  scaleType: string;\r\n  transform: string;\r\n  transformPlot: string;\r\n  transformYAxis: string;\r\n  transformXAxis: string;\r\n  series: any; // ???\r\n  margin = [10, 20, 10, 20];\r\n  xAxisHeight: number = 0;\r\n  yAxisWidth: number = 0;\r\n  filteredDomain: any;\r\n  legendOptions: any;\r\n  thetaTicks: any[];\r\n  radiusTicks: number[];\r\n  outerRadius: number;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.setDims();\r\n\r\n    this.setScales();\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    this.setTicks();\r\n  }\r\n\r\n  setDims() {\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showXAxis: this.xAxis,\r\n      showYAxis: this.yAxis,\r\n      xAxisHeight: this.xAxisHeight,\r\n      yAxisWidth: this.yAxisWidth,\r\n      showXLabel: this.showXAxisLabel,\r\n      showYLabel: this.showYAxisLabel,\r\n      showLegend: this.legend,\r\n      legendType: this.schemeType,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    const halfWidth = Math.floor(this.dims.width / 2);\r\n    const halfHeight = Math.floor(this.dims.height / 2);\r\n\r\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\r\n\r\n    const yOffset = Math.max(0, halfHeight - outerRadius);\r\n\r\n    this.yAxisDims = {\r\n      ...this.dims,\r\n      width: halfWidth\r\n    };\r\n\r\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\r\n    this.transformYAxis = `translate(0, ${yOffset})`;\r\n    this.labelOffset = this.dims.height + 40;\r\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\r\n  }\r\n\r\n  setScales() {\r\n    const xValues = this.getXValues();\r\n    this.scaleType = getScaleType(xValues);\r\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\r\n\r\n    this.yDomain = this.getYDomain();\r\n    this.seriesDomain = this.getSeriesDomain();\r\n\r\n    this.xScale = this.getXScale(this.xDomain, twoPI);\r\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\r\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\r\n  }\r\n\r\n  setTicks() {\r\n    let tickFormat;\r\n    if (this.xAxisTickFormatting) {\r\n      tickFormat = this.xAxisTickFormatting;\r\n    } else if (this.xScale.tickFormat) {\r\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\r\n    } else {\r\n      tickFormat = d => {\r\n        if (isDate(d)) {\r\n          return d.toLocaleDateString();\r\n        }\r\n        return d.toLocaleString();\r\n      };\r\n    }\r\n\r\n    const outerRadius = this.outerRadius;\r\n    const s = 1.1;\r\n\r\n    this.thetaTicks = this.xDomain.map(d => {\r\n      const startAngle = this.xScale(d);\r\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\r\n      const label = tickFormat(d);\r\n\r\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\r\n      const pos = [dd, s * startPos[1]];\r\n      return {\r\n        innerRadius: 0,\r\n        outerRadius,\r\n        startAngle,\r\n        endAngle: startAngle,\r\n        value: outerRadius,\r\n        label,\r\n        startPos,\r\n        pos\r\n      };\r\n    });\r\n\r\n    const minDistance = 10;\r\n\r\n    /* from pie chart, abstract out -*/\r\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\r\n      const a = this.thetaTicks[i];\r\n\r\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\r\n        const b = this.thetaTicks[j];\r\n        // if they're on the same side\r\n        if (b.pos[0] * a.pos[0] > 0) {\r\n          // if they're overlapping\r\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\r\n          if (o > 0) {\r\n            // push the second up or down\r\n            b.pos[1] += Math.sign(b.pos[0]) * o;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\r\n  }\r\n\r\n  getXValues(): any[] {\r\n    const values = [];\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (!values.includes(d.name)) {\r\n          values.push(d.name);\r\n        }\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  getXDomain(values = this.getXValues()): any[] {\r\n    if (this.scaleType === 'time') {\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      return [min, max];\r\n    } else if (this.scaleType === 'linear') {\r\n      values = values.map(v => Number(v));\r\n      const min = Math.min(...values);\r\n      const max = Math.max(...values);\r\n      return [min, max];\r\n    }\r\n    return values;\r\n  }\r\n\r\n  getYValues(): any[] {\r\n    const domain = [];\r\n\r\n    for (const results of this.results) {\r\n      for (const d of results.series) {\r\n        if (domain.indexOf(d.value) < 0) {\r\n          domain.push(d.value);\r\n        }\r\n        if (d.min !== undefined) {\r\n          if (domain.indexOf(d.min) < 0) {\r\n            domain.push(d.min);\r\n          }\r\n        }\r\n        if (d.max !== undefined) {\r\n          if (domain.indexOf(d.max) < 0) {\r\n            domain.push(d.max);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return domain;\r\n  }\r\n\r\n  getYDomain(domain = this.getYValues()): any[] {\r\n    let min = Math.min(...domain);\r\n    const max = Math.max(this.yAxisMinScale, ...domain);\r\n\r\n    min = Math.max(0, min);\r\n    if (!this.autoScale) {\r\n      min = Math.min(0, min);\r\n    }\r\n\r\n    return [min, max];\r\n  }\r\n\r\n  getSeriesDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getXScale(domain, width): any {\r\n    switch (this.scaleType) {\r\n      case 'time':\r\n        return scaleTime().range([0, width]).domain(domain);\r\n      case 'linear':\r\n        const scale = scaleLinear().range([0, width]).domain(domain);\r\n        return this.roundDomains ? scale.nice() : scale;\r\n      default:\r\n        return scalePoint()\r\n          .range([0, width - twoPI / domain.length])\r\n          .padding(0)\r\n          .domain(domain);\r\n    }\r\n  }\r\n\r\n  getYScale(domain, height): any {\r\n    const scale = scaleLinear().range([0, height]).domain(domain);\r\n\r\n    return this.roundDomains ? scale.nice() : scale;\r\n  }\r\n\r\n  onClick(data, series?): void {\r\n    if (series) {\r\n      data.series = series.name;\r\n    }\r\n\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\r\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    if (this.schemeType === 'ordinal') {\r\n      return {\r\n        scaleType: this.schemeType,\r\n        colors: this.colors,\r\n        domain: this.seriesDomain,\r\n        title: this.legendTitle,\r\n        position: this.legendPosition\r\n      };\r\n    }\r\n    return {\r\n      scaleType: this.schemeType,\r\n      colors: this.colors.scale,\r\n      domain: this.yDomain,\r\n      title: undefined,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  updateYAxisWidth({ width }): void {\r\n    this.yAxisWidth = width;\r\n    this.update();\r\n  }\r\n\r\n  updateXAxisHeight({ height }): void {\r\n    this.xAxisHeight = height;\r\n    this.update();\r\n  }\r\n\r\n  onActivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item) {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  deactivateAll() {\r\n    this.activeEntries = [...this.activeEntries];\r\n    for (const entry of this.activeEntries) {\r\n      this.deactivate.emit({ value: entry, entries: [] });\r\n    }\r\n    this.activeEntries = [];\r\n  }\r\n\r\n  trackBy(index, item) {\r\n    return item.name;\r\n  }\r\n}\r\n","export function isDate(value) {\r\n  return toString.call(value) === '[object Date]';\r\n}\r\n\r\nexport function isNumber(value) {\r\n  return typeof value === 'number';\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { lineRadial } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\r\nimport { escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-polar-series]',\r\n  template: `\r\n    <svg:g class=\"polar-charts-series\">\r\n      <defs>\r\n        <svg:g\r\n          ngx-charts-svg-radial-gradient\r\n          *ngIf=\"hasGradient\"\r\n          orientation=\"vertical\"\r\n          [color]=\"seriesColor\"\r\n          [name]=\"gradientId\"\r\n          [startOpacity]=\"0.25\"\r\n          [endOpacity]=\"1\"\r\n          [stops]=\"gradientStops\"\r\n        />\r\n      </defs>\r\n      <svg:g\r\n        ngx-charts-line\r\n        class=\"polar-series-path\"\r\n        [path]=\"path\"\r\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\r\n        [class.active]=\"active\"\r\n        [class.inactive]=\"inactive\"\r\n        [attr.fill-opacity]=\"rangeFillOpacity\"\r\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\r\n        [animations]=\"animations\"\r\n      />\r\n      <svg:g\r\n        ngx-charts-circle\r\n        *ngFor=\"let circle of circles\"\r\n        class=\"circle\"\r\n        [cx]=\"circle.cx\"\r\n        [cy]=\"circle.cy\"\r\n        [r]=\"circleRadius\"\r\n        [fill]=\"circle.color\"\r\n        [style.opacity]=\"inactive ? 0.2 : 1\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        tooltipType=\"tooltip\"\r\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"circle.data\"\r\n        (select)=\"select.emit(circle.data)\"\r\n        (activate)=\"activate.emit({ name: circle.data.series })\"\r\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PolarSeriesComponent implements OnChanges {\r\n  @Input() name;\r\n  @Input() data;\r\n  @Input() xScale; // Theta\r\n  @Input() yScale; // R\r\n  @Input() colors;\r\n  @Input() scaleType;\r\n  @Input() curve: any;\r\n  @Input() activeEntries: any[];\r\n  @Input() rangeFillOpacity: number;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: (o: any) => string;\r\n  @Input() gradient: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  path: string;\r\n  circles: any[];\r\n  circleRadius: number = 3;\r\n\r\n  outerPath: string;\r\n  areaPath: string;\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n  hasGradient: boolean;\r\n  gradientStops: any[];\r\n  areaGradientStops: any[];\r\n  seriesColor: string;\r\n\r\n  active: boolean;\r\n  inactive: boolean;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.updateGradients();\r\n\r\n    const line = this.getLineGenerator();\r\n\r\n    const data = this.sortData(this.data.series);\r\n\r\n    const seriesName = this.data.name;\r\n    const linearScaleType = this.colors.scaleType === 'linear';\r\n    const min = this.yScale.domain()[0];\r\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\r\n\r\n    this.path = line(data) || '';\r\n\r\n    this.circles = data.map(d => {\r\n      const a = this.getAngle(d);\r\n      const r = this.getRadius(d);\r\n      const value = d.value;\r\n\r\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\r\n\r\n      const cData = Object.assign({}, d, {\r\n        series: seriesName,\r\n        value,\r\n        name: d.name\r\n      });\r\n\r\n      return {\r\n        data: cData,\r\n        cx: r * Math.sin(a),\r\n        cy: -r * Math.cos(a),\r\n        value,\r\n        color,\r\n        label: d.name\r\n      };\r\n    });\r\n\r\n    this.active = this.isActive(this.data);\r\n    this.inactive = this.isInactive(this.data);\r\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\r\n  }\r\n\r\n  getAngle(d) {\r\n    const label = d.name;\r\n    if (this.scaleType === 'time') {\r\n      return this.xScale(label);\r\n    } else if (this.scaleType === 'linear') {\r\n      return this.xScale(Number(label));\r\n    }\r\n    return this.xScale(label);\r\n  }\r\n\r\n  getRadius(d) {\r\n    return this.yScale(d.value);\r\n  }\r\n\r\n  getLineGenerator(): any {\r\n    return lineRadial<any>()\r\n      .angle(d => this.getAngle(d))\r\n      .radius(d => this.getRadius(d))\r\n      .curve(this.curve);\r\n  }\r\n\r\n  sortData(data) {\r\n    if (this.scaleType === 'linear') {\r\n      return sortLinear(data, 'name');\r\n    } else if (this.scaleType === 'time') {\r\n      return sortByTime(data, 'name');\r\n    }\r\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  isInactive(entry): boolean {\r\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name;\r\n    });\r\n    return item === undefined;\r\n  }\r\n\r\n  defaultTooltipText({ label, value }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  updateGradients() {\r\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\r\n\r\n    if (!this.hasGradient) {\r\n      return;\r\n    }\r\n\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n\r\n    if (this.colors.scaleType === 'linear') {\r\n      const values = this.data.series.map(d => d.value);\r\n      const max = Math.max(...values);\r\n      const min = Math.min(...values);\r\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\r\n    } else {\r\n      this.gradientStops = undefined;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-advanced-pie-chart',\r\n  template: `\r\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\r\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\r\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\r\n            <svg:g\r\n              ngx-charts-pie-series\r\n              [colors]=\"colors\"\r\n              [series]=\"results\"\r\n              [innerRadius]=\"innerRadius\"\r\n              [activeEntries]=\"activeEntries\"\r\n              [outerRadius]=\"outerRadius\"\r\n              [gradient]=\"gradient\"\r\n              [tooltipDisabled]=\"tooltipDisabled\"\r\n              [tooltipTemplate]=\"tooltipTemplate\"\r\n              [tooltipText]=\"tooltipText\"\r\n              (select)=\"onClick($event)\"\r\n              (activate)=\"onActivate($event)\"\r\n              (deactivate)=\"onDeactivate($event)\"\r\n              [animations]=\"animations\"\r\n            ></svg:g>\r\n          </svg:g>\r\n        </ngx-charts-chart>\r\n      </div>\r\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\r\n        <ngx-charts-advanced-legend\r\n          [data]=\"results\"\r\n          [colors]=\"colors\"\r\n          [width]=\"width - dims.width - margin[1]\"\r\n          [label]=\"label\"\r\n          [animations]=\"animations\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"nameFormatting\"\r\n          [percentageFormatting]=\"percentageFormatting\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event, true)\"\r\n          (deactivate)=\"onDeactivate($event, true)\"\r\n        >\r\n        </ngx-charts-advanced-legend>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AdvancedPieChartComponent extends BaseChartComponent {\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: any;\r\n  @Input() label: string = 'Total';\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  data: any;\r\n  dims: ViewDimensions;\r\n  domain: any[];\r\n  outerRadius: number;\r\n  innerRadius: number;\r\n  transform: string;\r\n  colors: ColorHelper;\r\n  legendWidth: number;\r\n  margin = [20, 20, 20, 20];\r\n\r\n  @Input() valueFormatting: (value: number) => any;\r\n  @Input() nameFormatting: (value: string) => any;\r\n  @Input() percentageFormatting: (value: number) => any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: (this.width * 4) / 12.0,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n    this.setColors();\r\n\r\n    const xOffset = this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\r\n\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\r\n    this.innerRadius = this.outerRadius * 0.75;\r\n\r\n    this.transform = `translate(${xOffset} , ${yOffset})`;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data: DataItem) {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { arc } from 'd3-shape';\r\n\r\nimport { trimLabel } from '../common/trim-label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-label]',\r\n  template: `\r\n    <title>{{ label }}</title>\r\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\r\n      <svg:text\r\n        class=\"pie-label\"\r\n        [class.animation]=\"animations\"\r\n        dy=\".35em\"\r\n        [style.textAnchor]=\"textAnchor()\"\r\n        [style.shapeRendering]=\"'crispEdges'\"\r\n      >\r\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\r\n      </svg:text>\r\n    </svg:g>\r\n    <svg:path\r\n      [attr.d]=\"line\"\r\n      [attr.stroke]=\"color\"\r\n      fill=\"none\"\r\n      class=\"pie-label-line line\"\r\n      [class.animation]=\"animations\"\r\n    ></svg:path>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieLabelComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() radius;\r\n  @Input() label;\r\n  @Input() color;\r\n  @Input() max;\r\n  @Input() value;\r\n  @Input() explodeSlices;\r\n  @Input() animations: boolean = true;\r\n  @Input() labelTrim: boolean = true;\r\n  @Input() labelTrimSize: number = 10;\r\n\r\n  trimLabel: (label: string, max?: number) => string;\r\n  line: string;\r\n\r\n  private readonly isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\r\n\r\n  constructor() {\r\n    this.trimLabel = trimLabel;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    let startRadius = this.radius;\r\n    if (this.explodeSlices) {\r\n      startRadius = (this.radius * this.value) / this.max;\r\n    }\r\n\r\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\r\n\r\n    // Calculate innerPos then scale outer position to match label position\r\n    const innerPos = innerArc.centroid(this.data);\r\n\r\n    let scale = this.data.pos[1] / innerPos[1];\r\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\r\n      scale = 1;\r\n    }\r\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\r\n\r\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\r\n  }\r\n\r\n  get textX(): number {\r\n    return this.data.pos[0];\r\n  }\r\n\r\n  get textY(): number {\r\n    return this.data.pos[1];\r\n  }\r\n\r\n  get styleTransform(): string {\r\n    return this.isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\r\n  }\r\n\r\n  get attrTransform(): string {\r\n    return !this.isIE ? null : `translate(${this.textX},${this.textY})`;\r\n  }\r\n\r\n  get textTransition(): string {\r\n    return this.isIE || !this.animations ? null : 'transform 0.75s';\r\n  }\r\n\r\n  textAnchor(): any {\r\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\r\n  }\r\n\r\n  midAngle(d): number {\r\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { interpolate } from 'd3-interpolate';\r\nimport { select } from 'd3-selection';\r\nimport { arc } from 'd3-shape';\r\n\r\nimport { id } from '../utils/id';\r\n/* tslint:disable */\r\nimport { MouseEvent } from '../events';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-arc]',\r\n  template: `\r\n    <svg:g class=\"arc-group\">\r\n      <svg:defs *ngIf=\"gradient\">\r\n        <svg:g\r\n          ngx-charts-svg-radial-gradient\r\n          [color]=\"fill\"\r\n          orientation=\"vertical\"\r\n          [name]=\"radialGradientId\"\r\n          [startOpacity]=\"startOpacity\"\r\n        />\r\n      </svg:defs>\r\n      <svg:path\r\n        [attr.d]=\"path\"\r\n        class=\"arc\"\r\n        [class.active]=\"isActive\"\r\n        [attr.fill]=\"getGradient()\"\r\n        (click)=\"onClick()\"\r\n        (dblclick)=\"onDblClick($event)\"\r\n        (mouseenter)=\"activate.emit(data)\"\r\n        (mouseleave)=\"deactivate.emit(data)\"\r\n        [style.pointer-events]=\"getPointerEvents()\"\r\n      />\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieArcComponent implements OnChanges {\r\n  @Input() fill;\r\n  @Input() startAngle: number = 0;\r\n  @Input() endAngle: number = Math.PI * 2;\r\n  @Input() innerRadius;\r\n  @Input() outerRadius;\r\n  @Input() cornerRadius: number = 0;\r\n  @Input() value;\r\n  @Input() max;\r\n  @Input() data;\r\n  @Input() explodeSlices: boolean = false;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animate: boolean = true;\r\n  @Input() pointerEvents: boolean = true;\r\n  @Input() isActive: boolean = false;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dblclick = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  path: any;\r\n  startOpacity: number;\r\n  radialGradientId: string;\r\n  linearGradientId: string;\r\n  gradientFill: string;\r\n  initialized: boolean = false;\r\n  private _timeout;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  getGradient() {\r\n    return this.gradient ? this.gradientFill : this.fill;\r\n  }\r\n\r\n  getPointerEvents() {\r\n    return this.pointerEvents ? 'auto' : 'none';\r\n  }\r\n\r\n  update(): void {\r\n    const calc = this.calculateArc();\r\n    this.startOpacity = 0.5;\r\n    this.radialGradientId = 'linearGrad' + id().toString();\r\n    this.gradientFill = `url(#${this.radialGradientId})`;\r\n\r\n    if (this.animate) {\r\n      if (this.initialized) {\r\n        this.updateAnimation();\r\n      } else {\r\n        this.loadAnimation();\r\n        this.initialized = true;\r\n      }\r\n    } else {\r\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\r\n    }\r\n  }\r\n\r\n  calculateArc(): any {\r\n    let outerRadius = this.outerRadius;\r\n    if (this.explodeSlices && this.innerRadius === 0) {\r\n      outerRadius = (this.outerRadius * this.value) / this.max;\r\n    }\r\n\r\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element)\r\n      .selectAll('.arc')\r\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\r\n\r\n    const calc = this.calculateArc();\r\n\r\n    node\r\n      .transition()\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const copyOfD = Object.assign({}, d);\r\n        copyOfD.endAngle = copyOfD.startAngle;\r\n        const interpolater = interpolate(copyOfD, copyOfD);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      })\r\n      .transition()\r\n      .duration(750)\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const interpolater = interpolate((<any>this)._current, d);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      });\r\n  }\r\n\r\n  updateAnimation(): void {\r\n    const node = select(this.element)\r\n      .selectAll('.arc')\r\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\r\n\r\n    const calc = this.calculateArc();\r\n\r\n    node\r\n      .transition()\r\n      .duration(750)\r\n      .attrTween('d', function (d) {\r\n        (<any>this)._current = (<any>this)._current || d;\r\n        const interpolater = interpolate((<any>this)._current, d);\r\n        (<any>this)._current = interpolater(0);\r\n        return function (t) {\r\n          return calc(interpolater(t));\r\n        };\r\n      });\r\n  }\r\n\r\n  onClick(): void {\r\n    clearTimeout(this._timeout);\r\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\r\n  }\r\n\r\n  onDblClick(event: MouseEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    clearTimeout(this._timeout);\r\n\r\n    this.dblclick.emit({\r\n      data: this.data,\r\n      nativeEvent: event\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-pie-chart',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelActivate)=\"onActivate($event, true)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\r\n        <svg:g\r\n          ngx-charts-pie-series\r\n          [colors]=\"colors\"\r\n          [series]=\"data\"\r\n          [showLabels]=\"labels\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [trimLabels]=\"trimLabels\"\r\n          [maxLabelLength]=\"maxLabelLength\"\r\n          [activeEntries]=\"activeEntries\"\r\n          [innerRadius]=\"innerRadius\"\r\n          [outerRadius]=\"outerRadius\"\r\n          [explodeSlices]=\"explodeSlices\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [tooltipText]=\"tooltipText\"\r\n          (dblclick)=\"dblclick.emit($event)\"\r\n          (select)=\"onClick($event)\"\r\n          (activate)=\"onActivate($event)\"\r\n          (deactivate)=\"onDeactivate($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieChartComponent extends BaseChartComponent {\r\n  @Input() labels = false;\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() explodeSlices = false;\r\n  @Input() doughnut = false;\r\n  @Input() arcWidth = 0.25;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() labelFormatting: any;\r\n  @Input() trimLabels: boolean = true;\r\n  @Input() maxLabelLength: number = 10;\r\n  @Input() tooltipText: any;\r\n  @Output() dblclick = new EventEmitter();\r\n  // optional margins\r\n  @Input() margins: number[];\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  translation: string;\r\n  outerRadius: number;\r\n  innerRadius: number;\r\n  data: any;\r\n  colors: ColorHelper;\r\n  domain: any;\r\n  dims: any;\r\n  legendOptions: any;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\r\n      this.margins = [30, 80, 30, 80];\r\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\r\n      // default value for margins\r\n      this.margins = [20, 20, 20, 20];\r\n    }\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margins,\r\n      showLegend: this.legend,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    const xOffset = this.margins[3] + this.dims.width / 2;\r\n    const yOffset = this.margins[0] + this.dims.height / 2;\r\n    this.translation = `translate(${xOffset}, ${yOffset})`;\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\r\n    if (this.labels) {\r\n      // make room for labels\r\n      this.outerRadius /= 3;\r\n    } else {\r\n      this.outerRadius /= 2;\r\n    }\r\n    this.innerRadius = 0;\r\n    if (this.doughnut) {\r\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\r\n    }\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    // sort data according to domain\r\n    this.data = this.results.sort((a, b) => {\r\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\r\n    });\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  getLegendOptions() {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      domain: this.domain,\r\n      colors: this.colors,\r\n      title: this.legendTitle,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  private hasNoOptionalMarginsSet(): boolean {\r\n    return !this.margins || this.margins.length <= 0;\r\n  }\r\n}\r\n","import { scaleBand } from 'd3-scale';\r\n\r\nexport function gridSize(dims, len, minWidth) {\r\n  let rows = 1;\r\n  let cols = len;\r\n  const width = dims.width;\r\n\r\n  if (width > minWidth) {\r\n    while (width / cols < minWidth) {\r\n      rows += 1;\r\n      cols = Math.ceil(len / rows);\r\n    }\r\n  }\r\n\r\n  return [cols, rows];\r\n}\r\n\r\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\r\n  const xScale: any = scaleBand<number>();\r\n  const yScale: any = scaleBand<number>();\r\n  const width = dims.width;\r\n  const height = dims.height;\r\n\r\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\r\n\r\n  const xDomain = [];\r\n  const yDomain = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    yDomain.push(i);\r\n  }\r\n  for (let i = 0; i < columns; i++) {\r\n    xDomain.push(i);\r\n  }\r\n  xScale.domain(xDomain);\r\n  yScale.domain(yDomain);\r\n\r\n  xScale.rangeRound([0, width], 0.1);\r\n  yScale.rangeRound([0, height], 0.1);\r\n\r\n  const res = [];\r\n  const total = designatedTotal ? designatedTotal : getTotal(data);\r\n  const cardWidth = xScale.bandwidth();\r\n  const cardHeight = yScale.bandwidth();\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    res[i] = {};\r\n    res[i].data = {\r\n      name: data[i] ? data[i].name : '',\r\n      value: data[i] ? data[i].value : undefined,\r\n      extra: data[i] ? data[i].extra : undefined,\r\n      label: data[i] ? data[i].label : ''\r\n    };\r\n    res[i].x = xScale(i % columns);\r\n    res[i].y = yScale(Math.floor(i / columns));\r\n    res[i].width = cardWidth;\r\n    res[i].height = cardHeight;\r\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\r\n    res[i].data.total = total;\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nfunction getTotal(results) {\r\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { min } from 'd3-array';\r\nimport { format } from 'd3-format';\r\n\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { gridLayout } from '../common/grid-layout.helper';\r\nimport { formatLabel } from '../common/label.helper';\r\nimport { DataItem } from '../models/chart-data.model';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-pie-grid',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\r\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\r\n          <svg:g\r\n            ngx-charts-pie-grid-series\r\n            [colors]=\"series.colors\"\r\n            [data]=\"series.data\"\r\n            [innerRadius]=\"series.innerRadius\"\r\n            [outerRadius]=\"series.outerRadius\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event)\"\r\n            ngx-tooltip\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipPlacement]=\"'top'\"\r\n            [tooltipType]=\"'tooltip'\"\r\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [tooltipContext]=\"series.data[0].data\"\r\n            (activate)=\"onActivate($event)\"\r\n            (deactivate)=\"onDeactivate($event)\"\r\n          />\r\n          <svg:text\r\n            *ngIf=\"animations\"\r\n            class=\"label percent-label\"\r\n            dy=\"-0.5em\"\r\n            x=\"0\"\r\n            y=\"5\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"series.percent\"\r\n            [countSuffix]=\"'%'\"\r\n            text-anchor=\"middle\"\r\n          ></svg:text>\r\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\r\n            {{ series.percent.toLocaleString() }}\r\n          </svg:text>\r\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\r\n            {{ series.label }}\r\n          </svg:text>\r\n          <svg:text\r\n            *ngIf=\"animations\"\r\n            class=\"label\"\r\n            dy=\"1.23em\"\r\n            x=\"0\"\r\n            [attr.y]=\"series.outerRadius\"\r\n            text-anchor=\"middle\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"series.total\"\r\n            [countPrefix]=\"label + ': '\"\r\n          ></svg:text>\r\n          <svg:text\r\n            *ngIf=\"!animations\"\r\n            class=\"label\"\r\n            dy=\"1.23em\"\r\n            x=\"0\"\r\n            [attr.y]=\"series.outerRadius\"\r\n            text-anchor=\"middle\"\r\n          >\r\n            {{ label }}: {{ series.total.toLocaleString() }}\r\n          </svg:text>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieGridComponent extends BaseChartComponent {\r\n  @Input() designatedTotal: number;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipText: (o: any) => any;\r\n  @Input() label: string = 'Total';\r\n  @Input() minWidth: number = 150;\r\n  @Input() activeEntries: any[] = [];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  dims: ViewDimensions;\r\n  data: any[];\r\n  transform: string;\r\n  series: any[];\r\n  domain: any[];\r\n  colorScale: ColorHelper;\r\n  margin = [20, 20, 20, 20];\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\r\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\r\n\r\n    this.series = this.getSeries();\r\n    this.setColors();\r\n\r\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\r\n  }\r\n\r\n  defaultTooltipText({ data }): string {\r\n    const label = trimLabel(formatLabel(data.name));\r\n    const val = data.value.toLocaleString();\r\n    return `\r\n      <span class=\"tooltip-label\">${label}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  getSeries(): any[] {\r\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\r\n\r\n    return this.data.map(d => {\r\n      const baselineLabelHeight = 20;\r\n      const padding = 10;\r\n      const name = d.data.name;\r\n      const label = formatLabel(name);\r\n      const value = d.data.value;\r\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\r\n      const innerRadius = radius * 0.9;\r\n\r\n      let count = 0;\r\n      const colors = () => {\r\n        count += 1;\r\n        if (count === 1) {\r\n          return 'rgba(100,100,100,0.3)';\r\n        } else {\r\n          return this.colorScale.getColor(label);\r\n        }\r\n      };\r\n\r\n      const xPos = d.x + (d.width - padding) / 2;\r\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\r\n\r\n      return {\r\n        transform: `translate(${xPos}, ${yPos})`,\r\n        colors,\r\n        innerRadius,\r\n        outerRadius: radius,\r\n        name,\r\n        label: trimLabel(label),\r\n        total: value,\r\n        value,\r\n        percent: format('.1%')(d.data.percent),\r\n        data: [\r\n          d,\r\n          {\r\n            data: {\r\n              other: true,\r\n              value: total - value,\r\n              name: d.data.name\r\n            }\r\n          }\r\n        ]\r\n      };\r\n    });\r\n  }\r\n\r\n  getTotal(): any {\r\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\r\n  }\r\n\r\n  onClick(data: DataItem): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item, fromLegend = false) {\r\n    item = this.results.find(d => {\r\n      if (fromLegend) {\r\n        return d.label === item.name;\r\n      } else {\r\n        return d.name === item.name;\r\n      }\r\n    });\r\n\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value && d.series === item.series;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { pie } from 'd3-shape';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-grid-series]',\r\n  template: `\r\n    <svg:g class=\"pie-grid-arcs\">\r\n      <svg:g\r\n        ngx-charts-pie-arc\r\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\r\n        [attr.class]=\"arc.class\"\r\n        [startAngle]=\"arc.startAngle\"\r\n        [endAngle]=\"arc.endAngle\"\r\n        [innerRadius]=\"innerRadius\"\r\n        [outerRadius]=\"outerRadius\"\r\n        [fill]=\"color(arc)\"\r\n        [value]=\"arc.data.value\"\r\n        [data]=\"arc.data\"\r\n        [gradient]=\"false\"\r\n        [pointerEvents]=\"arc.pointerEvents\"\r\n        [animate]=\"arc.animate\"\r\n        (select)=\"onClick($event)\"\r\n        (activate)=\"activate.emit($event)\"\r\n        (deactivate)=\"deactivate.emit($event)\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieGridSeriesComponent implements OnChanges {\r\n  @Input() colors;\r\n  @Input() data;\r\n  @Input() innerRadius = 70;\r\n  @Input() outerRadius = 80;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  element: HTMLElement;\r\n  layout: any;\r\n  arcs: any;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.layout = pie<any, any>()\r\n      .value(d => d.data.value)\r\n      .sort(null);\r\n\r\n    this.arcs = this.getArcs();\r\n  }\r\n\r\n  getArcs(): any[] {\r\n    return this.layout(this.data).map((arc, index) => {\r\n      const label = arc.data.data.name;\r\n      const other = arc.data.data.other;\r\n\r\n      if (index === 0) {\r\n        arc.startAngle = 0;\r\n      }\r\n\r\n      const color = this.colors(label);\r\n      return {\r\n        data: arc.data.data,\r\n        class: 'arc ' + 'arc' + index,\r\n        fill: color,\r\n        startAngle: other ? 0 : arc.startAngle,\r\n        endAngle: arc.endAngle,\r\n        animate: this.animations && !other,\r\n        pointerEvents: !other\r\n      };\r\n    });\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(this.data[0].data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.data.name;\r\n  }\r\n\r\n  label(arc): string {\r\n    return arc.data.name;\r\n  }\r\n\r\n  color(arc): any {\r\n    return this.colors(this.label(arc));\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  SimpleChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { max } from 'd3-array';\r\nimport { arc, pie } from 'd3-shape';\r\n\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-pie-series]',\r\n  template: `\r\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\r\n      <svg:g\r\n        ngx-charts-pie-label\r\n        *ngIf=\"labelVisible(arc)\"\r\n        [data]=\"arc\"\r\n        [radius]=\"outerRadius\"\r\n        [color]=\"color(arc)\"\r\n        [label]=\"labelText(arc)\"\r\n        [labelTrim]=\"trimLabels\"\r\n        [labelTrimSize]=\"maxLabelLength\"\r\n        [max]=\"max\"\r\n        [value]=\"arc.value\"\r\n        [explodeSlices]=\"explodeSlices\"\r\n        [animations]=\"animations\"\r\n      ></svg:g>\r\n      <svg:g\r\n        ngx-charts-pie-arc\r\n        [startAngle]=\"arc.startAngle\"\r\n        [endAngle]=\"arc.endAngle\"\r\n        [innerRadius]=\"innerRadius\"\r\n        [outerRadius]=\"outerRadius\"\r\n        [fill]=\"color(arc)\"\r\n        [value]=\"arc.data.value\"\r\n        [gradient]=\"gradient\"\r\n        [data]=\"arc.data\"\r\n        [max]=\"max\"\r\n        [explodeSlices]=\"explodeSlices\"\r\n        [isActive]=\"isActive(arc.data)\"\r\n        [animate]=\"animations\"\r\n        (select)=\"onClick($event)\"\r\n        (activate)=\"activate.emit($event)\"\r\n        (deactivate)=\"deactivate.emit($event)\"\r\n        (dblclick)=\"dblclick.emit($event)\"\r\n        ngx-tooltip\r\n        [tooltipDisabled]=\"tooltipDisabled\"\r\n        [tooltipPlacement]=\"'top'\"\r\n        [tooltipType]=\"'tooltip'\"\r\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\r\n        [tooltipTemplate]=\"tooltipTemplate\"\r\n        [tooltipContext]=\"arc.data\"\r\n      ></svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PieSeriesComponent implements OnChanges {\r\n  @Input() colors;\r\n  @Input() series: any = [];\r\n  @Input() dims;\r\n  @Input() innerRadius = 60;\r\n  @Input() outerRadius = 80;\r\n  @Input() explodeSlices;\r\n  @Input() showLabels;\r\n  @Input() gradient: boolean;\r\n  @Input() activeEntries: any[];\r\n  @Input() labelFormatting: any;\r\n  @Input() trimLabels: boolean = true;\r\n  @Input() maxLabelLength: number = 10;\r\n  @Input() tooltipText: (o: any) => any;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n  @Output() dblclick = new EventEmitter();\r\n\r\n  max: number;\r\n  data: any;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    const pieGenerator = pie<any, any>()\r\n      .value(d => d.value)\r\n      .sort(null);\r\n\r\n    const arcData = pieGenerator(this.series);\r\n\r\n    this.max = max(arcData, d => {\r\n      return d.value;\r\n    });\r\n\r\n    this.data = this.calculateLabelPositions(arcData);\r\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\r\n  }\r\n\r\n  midAngle(d): number {\r\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\r\n  }\r\n\r\n  outerArc(): any {\r\n    const factor = 1.5;\r\n\r\n    return arc()\r\n      .innerRadius(this.outerRadius * factor)\r\n      .outerRadius(this.outerRadius * factor);\r\n  }\r\n\r\n  calculateLabelPositions(pieData): any {\r\n    const factor = 1.5;\r\n    const minDistance = 10;\r\n    const labelPositions = pieData;\r\n\r\n    labelPositions.forEach(d => {\r\n      d.pos = this.outerArc().centroid(d);\r\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\r\n    });\r\n\r\n    for (let i = 0; i < labelPositions.length - 1; i++) {\r\n      const a = labelPositions[i];\r\n      if (!this.labelVisible(a)) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = i + 1; j < labelPositions.length; j++) {\r\n        const b = labelPositions[j];\r\n        if (!this.labelVisible(b)) {\r\n          continue;\r\n        }\r\n        // if they're on the same side\r\n        if (b.pos[0] * a.pos[0] > 0) {\r\n          // if they're overlapping\r\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\r\n          if (o > 0) {\r\n            // push the second up or down\r\n            b.pos[1] += Math.sign(b.pos[0]) * o;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return labelPositions;\r\n  }\r\n\r\n  labelVisible(myArc): boolean {\r\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\r\n  }\r\n\r\n  getTooltipTitle(a) {\r\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\r\n  }\r\n\r\n  labelText(myArc): string {\r\n    if (this.labelFormatting) {\r\n      return this.labelFormatting(myArc.data.name);\r\n    }\r\n    return this.label(myArc);\r\n  }\r\n\r\n  label(myArc): string {\r\n    return formatLabel(myArc.data.name);\r\n  }\r\n\r\n  defaultTooltipText(myArc): string {\r\n    const label = this.label(myArc);\r\n    const val = formatLabel(myArc.data.value);\r\n\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n\r\n  color(myArc): any {\r\n    return this.colors.getColor(this.label(myArc));\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.data.name;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\r\nimport { PieLabelComponent } from './pie-label.component';\r\nimport { PieArcComponent } from './pie-arc.component';\r\nimport { PieChartComponent } from './pie-chart.component';\r\nimport { PieGridComponent } from './pie-grid.component';\r\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\r\nimport { PieSeriesComponent } from './pie-series.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [\r\n    AdvancedPieChartComponent,\r\n    PieLabelComponent,\r\n    PieArcComponent,\r\n    PieChartComponent,\r\n    PieGridComponent,\r\n    PieGridSeriesComponent,\r\n    PieSeriesComponent\r\n  ],\r\n  exports: [\r\n    AdvancedPieChartComponent,\r\n    PieLabelComponent,\r\n    PieArcComponent,\r\n    PieChartComponent,\r\n    PieGridComponent,\r\n    PieGridSeriesComponent,\r\n    PieSeriesComponent\r\n  ]\r\n})\r\nexport class PieChartModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { PolarChartComponent } from './polar-chart.component';\r\nimport { PolarSeriesComponent } from './polar-series.component';\r\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\r\nimport { LineChartModule } from '../line-chart/line-chart.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\r\n  declarations: [PolarChartComponent, PolarSeriesComponent],\r\n  exports: [PolarChartComponent, PolarSeriesComponent]\r\n})\r\nexport class PolarChartModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  SimpleChanges,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  NgZone,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { roundedRect } from '../common/shape.helper';\r\nimport { escapeLabel } from '../common/label.helper';\r\nimport { decimalChecker, count } from '../common/count/count.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-card]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\r\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\r\n      <svg:path\r\n        *ngIf=\"bandColor && bandColor !== color\"\r\n        class=\"card-band\"\r\n        [attr.fill]=\"bandColor\"\r\n        [attr.transform]=\"transformBand\"\r\n        stroke=\"none\"\r\n        [attr.d]=\"bandPath\"\r\n      />\r\n      <title>{{ label }}</title>\r\n      <svg:foreignObject\r\n        class=\"trimmed-label\"\r\n        x=\"5\"\r\n        [attr.x]=\"textPadding[3]\"\r\n        [attr.y]=\"cardHeight - textPadding[2]\"\r\n        [attr.width]=\"textWidth\"\r\n        [attr.height]=\"labelFontSize + textPadding[2]\"\r\n        alignment-baseline=\"hanging\"\r\n      >\r\n        <xhtml:p\r\n          [style.color]=\"textColor\"\r\n          [style.fontSize.px]=\"labelFontSize\"\r\n          [style.lineHeight.px]=\"labelFontSize\"\r\n          [innerHTML]=\"formattedLabel\"\r\n        >\r\n        </xhtml:p>\r\n      </svg:foreignObject>\r\n      <svg:text\r\n        #textEl\r\n        class=\"value-text\"\r\n        [attr.x]=\"textPadding[3]\"\r\n        [attr.y]=\"textPadding[0]\"\r\n        [style.fill]=\"textColor\"\r\n        text-anchor=\"start\"\r\n        alignment-baseline=\"hanging\"\r\n        [style.font-size.pt]=\"textFontSize\"\r\n      >\r\n        {{ value }}\r\n      </svg:text>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CardComponent implements OnChanges, OnDestroy {\r\n  @Input() color;\r\n  @Input() bandColor;\r\n  @Input() textColor;\r\n\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() label;\r\n  @Input() data;\r\n  @Input() medianSize: number;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\r\n\r\n  element: HTMLElement;\r\n  value: string = '';\r\n  transform: string;\r\n  formattedLabel: string;\r\n  cardWidth: number;\r\n  cardHeight: number;\r\n  textWidth: number;\r\n  textFontSize: number = 12;\r\n  textTransform: string = '';\r\n  initialized: boolean = false;\r\n  animationReq: any;\r\n\r\n  bandHeight: number = 10;\r\n  transformBand: string;\r\n  textPadding = [10, 20, 5, 20];\r\n  labelFontSize = 15;\r\n\r\n  bandPath: string;\r\n\r\n  constructor(element: ElementRef, private cd: ChangeDetectorRef, private zone: NgZone) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    cancelAnimationFrame(this.animationReq);\r\n  }\r\n\r\n  update(): void {\r\n    this.zone.run(() => {\r\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\r\n\r\n      this.transform = `translate(${this.x} , ${this.y})`;\r\n\r\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\r\n      this.cardWidth = Math.max(0, this.width);\r\n      this.cardHeight = Math.max(0, this.height);\r\n\r\n      this.label = this.label ? this.label : this.data.name;\r\n\r\n      const cardData = {\r\n        label: this.label,\r\n        data: this.data,\r\n        value: this.data.value\r\n      };\r\n\r\n      this.formattedLabel = labelFormatting(cardData);\r\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\r\n\r\n      const value = hasValue ? valueFormatting(cardData) : '';\r\n\r\n      this.value = this.paddedValue(value);\r\n      this.setPadding();\r\n\r\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\r\n\r\n      setTimeout(() => {\r\n        this.scaleText();\r\n        this.value = value;\r\n        if (hasValue && !this.initialized) {\r\n          setTimeout(() => this.startCount(), 20);\r\n        }\r\n      }, 8);\r\n    });\r\n  }\r\n\r\n  paddedValue(value: string) {\r\n    if (this.medianSize && this.medianSize > value.length) {\r\n      value += '\\u2007'.repeat(this.medianSize - value.length);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  startCount(): void {\r\n    if (!this.initialized && this.animations) {\r\n      cancelAnimationFrame(this.animationReq);\r\n\r\n      const val = this.data.value;\r\n      const decs = decimalChecker(val);\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n\r\n      const callback = ({ value, finished }) => {\r\n        this.zone.run(() => {\r\n          value = finished ? val : value;\r\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\r\n          if (!finished) {\r\n            this.value = this.paddedValue(this.value);\r\n          }\r\n          this.cd.markForCheck();\r\n        });\r\n      };\r\n\r\n      this.animationReq = count(0, val, decs, 1, callback);\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  scaleText(): void {\r\n    this.zone.run(() => {\r\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\r\n      if (width === 0 || height === 0) {\r\n        return;\r\n      }\r\n\r\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\r\n      const availableWidth = this.cardWidth - 2 * textPadding;\r\n      const availableHeight = this.cardHeight / 3;\r\n\r\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\r\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\r\n      this.labelFontSize = Math.min(this.textFontSize, 15);\r\n\r\n      this.setPadding();\r\n      this.cd.markForCheck();\r\n    });\r\n  }\r\n\r\n  setPadding() {\r\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\r\n    const padding = this.cardHeight / 2;\r\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\r\n    this.textPadding[2] = padding - this.labelFontSize;\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit(this.data);\r\n  }\r\n}\r\n","import * as d3_color from 'd3-color';\r\n\r\n/**\r\n * Converts a hex to RGB\r\n *\r\n * @export\r\n */\r\nexport function hexToRgb(value: string): any {\r\n  // deprecated, use d3.color()\r\n  return d3_color.rgb(value);\r\n}\r\n\r\n/**\r\n * Accepts a color (string) and returns a inverted hex color (string)\r\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\r\n *\r\n * @export\r\n */\r\nexport function invertColor(value: string): string {\r\n  const color = d3_color.rgb(value);\r\n  const { r, g, b, opacity } = color;\r\n  if (opacity === 0) {\r\n    return color.toString();\r\n  }\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n  const depth = yiq >= 128 ? -0.8 : 0.8;\r\n\r\n  return shadeRGBColor(color, depth);\r\n}\r\n\r\n/**\r\n * Given a rgb, it will darken/lighten\r\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\r\n *\r\n * @export\r\n * @param \\{ r, g, b }\r\n */\r\nexport function shadeRGBColor({ r, g, b }, percent) {\r\n  const t = percent < 0 ? 0 : 255;\r\n  const p = percent < 0 ? percent * -1 : percent;\r\n\r\n  r = Math.round((t - r) * p) + r;\r\n  g = Math.round((t - g) * p) + g;\r\n  b = Math.round((t - b) * p) + b;\r\n\r\n  return `rgb(${r}, ${g}, ${b})`;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { invertColor } from '../utils/color-utils';\r\n\r\nexport interface CardModel {\r\n  x;\r\n  y;\r\n  width: number;\r\n  height: number;\r\n  color: string;\r\n  label: string;\r\n  data;\r\n  tooltipText: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-card-series]',\r\n  template: `\r\n    <svg:rect\r\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\r\n      class=\"card-empty\"\r\n      [attr.x]=\"c.x\"\r\n      [attr.y]=\"c.y\"\r\n      [style.fill]=\"emptyColor\"\r\n      [attr.width]=\"c.width\"\r\n      [attr.height]=\"c.height\"\r\n      rx=\"3\"\r\n      ry=\"3\"\r\n    />\r\n    <svg:g\r\n      ngx-charts-card\r\n      *ngFor=\"let c of cards; trackBy: trackBy\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [color]=\"c.color\"\r\n      [bandColor]=\"c.bandColor\"\r\n      [textColor]=\"c.textColor\"\r\n      [data]=\"c.data\"\r\n      [label]=\"c.label\"\r\n      [medianSize]=\"medianSize\"\r\n      [valueFormatting]=\"valueFormatting\"\r\n      [labelFormatting]=\"labelFormatting\"\r\n      [animations]=\"animations\"\r\n      (select)=\"onClick($event)\"\r\n    />\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CardSeriesComponent implements OnChanges {\r\n  @Input() data: any[];\r\n  @Input() slots: any[];\r\n  @Input() dims;\r\n  @Input() colors;\r\n  @Input() innerPadding = 15;\r\n\r\n  @Input() cardColor;\r\n  @Input() bandColor;\r\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\r\n  @Input() textColor;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  cards: CardModel[];\r\n  emptySlots: any[];\r\n  medianSize: number;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.data.length > 2) {\r\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\r\n\r\n      const sortedLengths = this.data\r\n        .map(d => {\r\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\r\n          return hasValue\r\n            ? valueFormatting({\r\n                data: d.data,\r\n                label: d ? d.data.name : '',\r\n                value: d && d.data ? d.data.value : ''\r\n              }).length\r\n            : 0;\r\n        })\r\n        .sort((a, b) => b - a);\r\n      const idx = Math.ceil(this.data.length / 2);\r\n      this.medianSize = sortedLengths[idx];\r\n    }\r\n\r\n    const cards = this.getCards();\r\n    this.cards = cards.filter(d => d.data.value !== null);\r\n    this.emptySlots = cards.filter(d => d.data.value === null);\r\n  }\r\n\r\n  getCards(): any[] {\r\n    const yPadding =\r\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\r\n    const xPadding =\r\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\r\n\r\n    return this.data.map((d, index) => {\r\n      let label = d.data.name;\r\n      if (label && label.constructor.name === 'Date') {\r\n        label = label.toLocaleDateString();\r\n      } else {\r\n        label = label ? label.toLocaleString() : label;\r\n      }\r\n\r\n      const value = d.data.value;\r\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\r\n      const color = this.cardColor || valueColor || '#000';\r\n      return {\r\n        x: d.x,\r\n        y: d.y,\r\n        width: d.width - xPadding,\r\n        height: d.height - yPadding,\r\n        color,\r\n        bandColor: this.bandColor || valueColor,\r\n        textColor: this.textColor || invertColor(color),\r\n        label,\r\n        data: d.data,\r\n        tooltipText: `${label}: ${value}`\r\n      };\r\n    });\r\n  }\r\n\r\n  trackBy(index, card): string {\r\n    return card.label;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n}\r\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-number-card',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\r\n        <svg:g\r\n          ngx-charts-card-series\r\n          [colors]=\"colors\"\r\n          [cardColor]=\"cardColor\"\r\n          [bandColor]=\"bandColor\"\r\n          [textColor]=\"textColor\"\r\n          [emptyColor]=\"emptyColor\"\r\n          [data]=\"data\"\r\n          [dims]=\"dims\"\r\n          [innerPadding]=\"innerPadding\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [animations]=\"animations\"\r\n          (select)=\"onClick($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NumberCardComponent extends BaseChartComponent {\r\n  @Input() cardColor: string;\r\n  @Input() bandColor: string;\r\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\r\n  @Input() innerPadding = 15;\r\n  @Input() textColor: string;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() designatedTotal: number;\r\n\r\n  dims: ViewDimensions;\r\n  data: any[];\r\n  slots: any[];\r\n  colors: ColorHelper;\r\n  transform: string;\r\n  domain: any[];\r\n  margin = [10, 10, 10, 10];\r\n\r\n  backgroundCards: any[];\r\n\r\n  get clickable() {\r\n    return !!this.select.observers.length;\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.formatDates();\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.setColors();\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n\r\n    const size = gridSize(this.dims, this.results.length, 150);\r\n    const N = size[0] * size[1];\r\n\r\n    const data = this.results.slice();\r\n\r\n    while (data.length < N) {\r\n      data.push({ value: null });\r\n    }\r\n\r\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.label);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { CardComponent } from './card.component';\r\nimport { CardSeriesComponent } from './card-series.component';\r\nimport { NumberCardComponent } from './number-card.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\r\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\r\n})\r\nexport class NumberCardModule {}\r\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { select } from 'd3-selection';\r\n\r\nimport { invertColor } from '../utils/color-utils';\r\nimport { trimLabel } from '../common/trim-label.helper';\r\nimport { escapeLabel } from '../common/label.helper';\r\nimport { id } from '../utils/id';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tree-map-cell]',\r\n  template: `\r\n    <svg:g>\r\n      <defs *ngIf=\"gradient\">\r\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\r\n      </defs>\r\n      <svg:rect\r\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        [attr.x]=\"x\"\r\n        [attr.y]=\"y\"\r\n        [style.cursor]=\"'pointer'\"\r\n        class=\"cell\"\r\n        (click)=\"onClick()\"\r\n      />\r\n      <svg:foreignObject\r\n        *ngIf=\"width >= 70 && height >= 35\"\r\n        [attr.x]=\"x\"\r\n        [attr.y]=\"y\"\r\n        [attr.width]=\"width\"\r\n        [attr.height]=\"height\"\r\n        class=\"treemap-label\"\r\n        [style.pointer-events]=\"'none'\"\r\n      >\r\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\r\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\r\n          <xhtml:br />\r\n          <xhtml:span\r\n            *ngIf=\"animations\"\r\n            class=\"treemap-val\"\r\n            ngx-charts-count-up\r\n            [countTo]=\"value\"\r\n            [valueFormatting]=\"valueFormatting\"\r\n          >\r\n          </xhtml:span>\r\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\r\n            {{ formattedValue }}\r\n          </xhtml:span>\r\n        </xhtml:p>\r\n      </svg:foreignObject>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapCellComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() fill;\r\n  @Input() x;\r\n  @Input() y;\r\n  @Input() width;\r\n  @Input() height;\r\n  @Input() label;\r\n  @Input() value;\r\n  @Input() valueType;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  gradientStops: any[];\r\n  gradientId: string;\r\n  gradientUrl: string;\r\n\r\n  element: HTMLElement;\r\n  transform: string;\r\n  formattedLabel: string;\r\n  formattedValue: string;\r\n  initialized: boolean = false;\r\n\r\n  constructor(element: ElementRef) {\r\n    this.element = element.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.update();\r\n\r\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\r\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\r\n\r\n    const cellData = {\r\n      data: this.data,\r\n      label: this.label,\r\n      value: this.value\r\n    };\r\n\r\n    this.formattedValue = this.valueFormatting(cellData.value);\r\n    this.formattedLabel = labelFormatting(cellData);\r\n\r\n    this.gradientId = 'grad' + id().toString();\r\n    this.gradientUrl = `url(#${this.gradientId})`;\r\n    this.gradientStops = this.getGradientStops();\r\n  }\r\n\r\n  update(): void {\r\n    if (this.initialized) {\r\n      this.animateToCurrentForm();\r\n    } else {\r\n      if (this.animations) {\r\n        this.loadAnimation();\r\n      }\r\n      this.initialized = true;\r\n    }\r\n  }\r\n\r\n  loadAnimation(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\r\n\r\n    this.animateToCurrentForm();\r\n  }\r\n\r\n  getTextColor(): string {\r\n    return invertColor(this.fill);\r\n  }\r\n\r\n  animateToCurrentForm(): void {\r\n    const node = select(this.element).select('.cell');\r\n\r\n    if (this.animations) {\r\n      node\r\n        .transition()\r\n        .duration(750)\r\n        .attr('opacity', 1)\r\n        .attr('x', this.x)\r\n        .attr('y', this.y)\r\n        .attr('width', this.width)\r\n        .attr('height', this.height);\r\n    } else {\r\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\r\n    }\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit(this.data);\r\n  }\r\n\r\n  getGradientStops() {\r\n    return [\r\n      {\r\n        offset: 0,\r\n        color: this.fill,\r\n        opacity: 0.3\r\n      },\r\n      {\r\n        offset: 100,\r\n        color: this.fill,\r\n        opacity: 1\r\n      }\r\n    ];\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  ChangeDetectionStrategy,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { escapeLabel } from '../common/label.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-tree-map-cell-series]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-tree-map-cell\r\n      *ngFor=\"let c of cells; trackBy: trackBy\"\r\n      [data]=\"c.data\"\r\n      [x]=\"c.x\"\r\n      [y]=\"c.y\"\r\n      [width]=\"c.width\"\r\n      [height]=\"c.height\"\r\n      [fill]=\"c.fill\"\r\n      [label]=\"c.label\"\r\n      [value]=\"c.value\"\r\n      [valueType]=\"c.valueType\"\r\n      [valueFormatting]=\"valueFormatting\"\r\n      [labelFormatting]=\"labelFormatting\"\r\n      [gradient]=\"gradient\"\r\n      [animations]=\"animations\"\r\n      (select)=\"onClick($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"c.data\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapCellSeriesComponent implements OnChanges {\r\n  @Input() data;\r\n  @Input() dims;\r\n  @Input() colors;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  cells: any[];\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.cells = this.getCells();\r\n  }\r\n\r\n  getCells(): any[] {\r\n    return this.data.children\r\n      .filter(d => {\r\n        return d.depth === 1;\r\n      })\r\n      .map((d, index) => {\r\n        const label = d.id;\r\n\r\n        return {\r\n          data: d.data,\r\n          x: d.x0,\r\n          y: d.y0,\r\n          width: d.x1 - d.x0,\r\n          height: d.y1 - d.y0,\r\n          fill: this.colors.getColor(label),\r\n          label,\r\n          value: d.value,\r\n          valueType: d.valueType\r\n        };\r\n      });\r\n  }\r\n\r\n  getTooltipText({ label, value }): string {\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\r\n    `;\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.label;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { treemap, stratify } from 'd3-hierarchy';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-tree-map',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\r\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\r\n        <svg:g\r\n          ngx-charts-tree-map-cell-series\r\n          [colors]=\"colors\"\r\n          [data]=\"data\"\r\n          [dims]=\"dims\"\r\n          [tooltipDisabled]=\"tooltipDisabled\"\r\n          [tooltipTemplate]=\"tooltipTemplate\"\r\n          [valueFormatting]=\"valueFormatting\"\r\n          [labelFormatting]=\"labelFormatting\"\r\n          [gradient]=\"gradient\"\r\n          [animations]=\"animations\"\r\n          (select)=\"onClick($event)\"\r\n        />\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['./tree-map.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TreeMapComponent extends BaseChartComponent {\r\n  @Input() results;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: any;\r\n  @Input() labelFormatting: any;\r\n  @Input() gradient: boolean = false;\r\n\r\n  @Output() select = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  dims: any;\r\n  domain: any;\r\n  transform: any;\r\n  colors: ColorHelper;\r\n  treemap: any;\r\n  data: any;\r\n  margin = [10, 10, 10, 10];\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.domain = this.getDomain();\r\n\r\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\r\n\r\n    const rootNode = {\r\n      name: 'root',\r\n      value: 0,\r\n      isRoot: true\r\n    };\r\n\r\n    const root = stratify<any>()\r\n      .id(d => {\r\n        let label = d.name;\r\n\r\n        if (label.constructor.name === 'Date') {\r\n          label = label.toLocaleDateString();\r\n        } else {\r\n          label = label.toLocaleString();\r\n        }\r\n        return label;\r\n      })\r\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\r\n      .sum(d => d.value);\r\n\r\n    this.data = this.treemap(root);\r\n\r\n    this.setColors();\r\n\r\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { TreeMapCellComponent } from './tree-map-cell.component';\r\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\r\nimport { TreeMapComponent } from './tree-map.component';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule],\r\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\r\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\r\n})\r\nexport class TreeMapModule {}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy\r\n} from '@angular/core';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-linear-gauge',\r\n  template: `\r\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\r\n      <svg:g class=\"linear-gauge chart\">\r\n        <svg:g\r\n          ngx-charts-bar\r\n          class=\"background-bar\"\r\n          [width]=\"dims.width\"\r\n          [height]=\"3\"\r\n          [x]=\"margin[3]\"\r\n          [y]=\"dims.height / 2 + margin[0] - 2\"\r\n          [data]=\"{}\"\r\n          [orientation]=\"'horizontal'\"\r\n          [roundEdges]=\"true\"\r\n          [animations]=\"animations\"\r\n        ></svg:g>\r\n        <svg:g\r\n          ngx-charts-bar\r\n          [width]=\"valueScale(value)\"\r\n          [height]=\"3\"\r\n          [x]=\"margin[3]\"\r\n          [y]=\"dims.height / 2 + margin[0] - 2\"\r\n          [fill]=\"colors.getColor(units)\"\r\n          [data]=\"{}\"\r\n          [orientation]=\"'horizontal'\"\r\n          [roundEdges]=\"true\"\r\n          [animations]=\"animations\"\r\n        ></svg:g>\r\n\r\n        <svg:line\r\n          *ngIf=\"hasPreviousValue\"\r\n          [attr.transform]=\"transformLine\"\r\n          x1=\"0\"\r\n          y1=\"5\"\r\n          x2=\"0\"\r\n          y2=\"15\"\r\n          [attr.stroke]=\"colors.getColor(units)\"\r\n        />\r\n\r\n        <svg:line\r\n          *ngIf=\"hasPreviousValue\"\r\n          [attr.transform]=\"transformLine\"\r\n          x1=\"0\"\r\n          y1=\"-5\"\r\n          x2=\"0\"\r\n          y2=\"-15\"\r\n          [attr.stroke]=\"colors.getColor(units)\"\r\n        />\r\n\r\n        <svg:g [attr.transform]=\"transform\">\r\n          <svg:g [attr.transform]=\"valueTranslate\">\r\n            <svg:text\r\n              #valueTextEl\r\n              class=\"value\"\r\n              [style.textAnchor]=\"'middle'\"\r\n              [attr.transform]=\"valueTextTransform\"\r\n              alignment-baseline=\"after-edge\"\r\n            >\r\n              {{ displayValue }}\r\n            </svg:text>\r\n          </svg:g>\r\n\r\n          <svg:g [attr.transform]=\"unitsTranslate\">\r\n            <svg:text\r\n              #unitsTextEl\r\n              class=\"units\"\r\n              [style.textAnchor]=\"'middle'\"\r\n              [attr.transform]=\"unitsTextTransform\"\r\n              alignment-baseline=\"before-edge\"\r\n            >\r\n              {{ units }}\r\n            </svg:text>\r\n          </svg:g>\r\n        </svg:g>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() value: number = 0;\r\n  @Input() units: string;\r\n  @Input() previousValue;\r\n  @Input() valueFormatting: any;\r\n\r\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\r\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\r\n\r\n  dims: ViewDimensions;\r\n  valueDomain: any;\r\n  valueScale: any;\r\n\r\n  colors: ColorHelper;\r\n  transform: string;\r\n  margin: any[] = [10, 20, 10, 20];\r\n  transformLine: string;\r\n\r\n  valueResizeScale: number = 1;\r\n  unitsResizeScale: number = 1;\r\n  valueTextTransform: string = '';\r\n  valueTranslate: string = '';\r\n  unitsTextTransform: string = '';\r\n  unitsTranslate: string = '';\r\n  displayValue: string;\r\n  hasPreviousValue: boolean;\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => {\r\n      this.scaleText('value');\r\n      this.scaleText('units');\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    this.hasPreviousValue = this.previousValue !== undefined;\r\n    this.max = Math.max(this.max, this.value);\r\n    this.min = Math.min(this.min, this.value);\r\n    if (this.hasPreviousValue) {\r\n      this.max = Math.max(this.max, this.previousValue);\r\n      this.min = Math.min(this.min, this.previousValue);\r\n    }\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin\r\n    });\r\n\r\n    this.valueDomain = this.getValueDomain();\r\n    this.valueScale = this.getValueScale();\r\n    this.displayValue = this.getDisplayValue();\r\n\r\n    this.setColors();\r\n\r\n    const xOffset = this.margin[3] + this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n\r\n    this.transform = `translate(${xOffset}, ${yOffset})`;\r\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\r\n    this.valueTranslate = `translate(0, -15)`;\r\n    this.unitsTranslate = `translate(0, 15)`;\r\n    setTimeout(() => this.scaleText('value'), 50);\r\n    setTimeout(() => this.scaleText('units'), 50);\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    return [this.min, this.max];\r\n  }\r\n\r\n  getValueScale(): any {\r\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\r\n  }\r\n\r\n  getDisplayValue(): string {\r\n    if (this.valueFormatting) {\r\n      return this.valueFormatting(this.value);\r\n    }\r\n    return this.value.toLocaleString();\r\n  }\r\n\r\n  scaleText(element, repeat: boolean = true): void {\r\n    let el;\r\n    let resizeScale;\r\n    if (element === 'value') {\r\n      el = this.valueTextEl;\r\n      resizeScale = this.valueResizeScale;\r\n    } else {\r\n      el = this.unitsTextEl;\r\n      resizeScale = this.unitsResizeScale;\r\n    }\r\n\r\n    const { width, height } = el.nativeElement.getBoundingClientRect();\r\n    if (width === 0 || height === 0) return;\r\n    const oldScale = resizeScale;\r\n    const availableWidth = this.dims.width;\r\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\r\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\r\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\r\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\r\n\r\n    if (resizeScale !== oldScale) {\r\n      if (element === 'value') {\r\n        this.valueResizeScale = resizeScale;\r\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\r\n      } else {\r\n        this.unitsResizeScale = resizeScale;\r\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\r\n      }\r\n      this.cd.markForCheck();\r\n      if (repeat) {\r\n        setTimeout(() => {\r\n          this.scaleText(element, false);\r\n        }, 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(): void {\r\n    this.select.emit({\r\n      name: 'Value',\r\n      value: this.value\r\n    });\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ElementRef,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Output,\r\n  EventEmitter,\r\n  ViewEncapsulation,\r\n  ContentChild,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nimport { BaseChartComponent } from '../common/base-chart.component';\r\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'ngx-charts-gauge',\r\n  template: `\r\n    <ngx-charts-chart\r\n      [view]=\"[width, height]\"\r\n      [showLegend]=\"legend\"\r\n      [legendOptions]=\"legendOptions\"\r\n      [activeEntries]=\"activeEntries\"\r\n      [animations]=\"animations\"\r\n      (legendLabelClick)=\"onClick($event)\"\r\n      (legendLabelActivate)=\"onActivate($event)\"\r\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\r\n    >\r\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\r\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\r\n          <svg:g\r\n            ngx-charts-gauge-arc\r\n            [backgroundArc]=\"arc.backgroundArc\"\r\n            [valueArc]=\"arc.valueArc\"\r\n            [cornerRadius]=\"cornerRadius\"\r\n            [colors]=\"colors\"\r\n            [isActive]=\"isActive(arc.valueArc.data)\"\r\n            [tooltipDisabled]=\"tooltipDisabled\"\r\n            [tooltipTemplate]=\"tooltipTemplate\"\r\n            [valueFormatting]=\"valueFormatting\"\r\n            [animations]=\"animations\"\r\n            (select)=\"onClick($event)\"\r\n            (activate)=\"onActivate($event)\"\r\n            (deactivate)=\"onDeactivate($event)\"\r\n          ></svg:g>\r\n        </svg:g>\r\n\r\n        <svg:g\r\n          ngx-charts-gauge-axis\r\n          *ngIf=\"showAxis\"\r\n          [bigSegments]=\"bigSegments\"\r\n          [smallSegments]=\"smallSegments\"\r\n          [min]=\"min\"\r\n          [max]=\"max\"\r\n          [radius]=\"outerRadius\"\r\n          [angleSpan]=\"angleSpan\"\r\n          [valueScale]=\"valueScale\"\r\n          [startAngle]=\"startAngle\"\r\n          [tickFormatting]=\"axisTickFormatting\"\r\n        ></svg:g>\r\n\r\n        <svg:text\r\n          #textEl\r\n          *ngIf=\"showText\"\r\n          [style.textAnchor]=\"'middle'\"\r\n          [attr.transform]=\"textTransform\"\r\n          alignment-baseline=\"central\"\r\n        >\r\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\r\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\r\n        </svg:text>\r\n      </svg:g>\r\n    </ngx-charts-chart>\r\n  `,\r\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\r\n  @Input() legend = false;\r\n  @Input() legendTitle: string = 'Legend';\r\n  @Input() legendPosition: string = 'right';\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() textValue: string;\r\n  @Input() units: string;\r\n  @Input() bigSegments: number = 10;\r\n  @Input() smallSegments: number = 5;\r\n  @Input() results: any[];\r\n  @Input() showAxis: boolean = true;\r\n  @Input() startAngle: number = -120;\r\n  @Input() angleSpan: number = 240;\r\n  @Input() activeEntries: any[] = [];\r\n  @Input() axisTickFormatting: any;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: (value: any) => string;\r\n  @Input() showText: boolean = true;\r\n\r\n  // Specify margins\r\n  @Input() margin: any[];\r\n\r\n  @Output() activate: EventEmitter<any> = new EventEmitter();\r\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\r\n\r\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\r\n\r\n  @ViewChild('textEl') textEl: ElementRef;\r\n\r\n  dims: ViewDimensions;\r\n  domain: any[];\r\n  valueDomain: any;\r\n  valueScale: any;\r\n\r\n  colors: ColorHelper;\r\n  transform: string;\r\n\r\n  outerRadius: number;\r\n  textRadius: number; // max available radius for the text\r\n  resizeScale: number = 1;\r\n  rotation: string = '';\r\n  textTransform: string = 'scale(1, 1)';\r\n  cornerRadius: number = 10;\r\n  arcs: any[];\r\n  displayValue: string;\r\n  legendOptions: any;\r\n\r\n  ngAfterViewInit(): void {\r\n    super.ngAfterViewInit();\r\n    setTimeout(() => this.scaleText());\r\n  }\r\n\r\n  update(): void {\r\n    super.update();\r\n\r\n    if (!this.showAxis) {\r\n      if (!this.margin) {\r\n        this.margin = [10, 20, 10, 20];\r\n      }\r\n    } else {\r\n      if (!this.margin) {\r\n        this.margin = [60, 100, 60, 100];\r\n      }\r\n    }\r\n\r\n    // make the starting angle positive\r\n    if (this.startAngle < 0) {\r\n      this.startAngle = (this.startAngle % 360) + 360;\r\n    }\r\n\r\n    this.angleSpan = Math.min(this.angleSpan, 360);\r\n\r\n    this.dims = calculateViewDimensions({\r\n      width: this.width,\r\n      height: this.height,\r\n      margins: this.margin,\r\n      showLegend: this.legend,\r\n      legendPosition: this.legendPosition\r\n    });\r\n\r\n    this.domain = this.getDomain();\r\n    this.valueDomain = this.getValueDomain();\r\n    this.valueScale = this.getValueScale();\r\n    this.displayValue = this.getDisplayValue();\r\n\r\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\r\n\r\n    this.arcs = this.getArcs();\r\n\r\n    this.setColors();\r\n    this.legendOptions = this.getLegendOptions();\r\n\r\n    const xOffset = this.margin[3] + this.dims.width / 2;\r\n    const yOffset = this.margin[0] + this.dims.height / 2;\r\n\r\n    this.transform = `translate(${xOffset}, ${yOffset})`;\r\n    this.rotation = `rotate(${this.startAngle})`;\r\n    setTimeout(() => this.scaleText(), 50);\r\n  }\r\n\r\n  getArcs(): any[] {\r\n    const arcs = [];\r\n\r\n    const availableRadius = this.outerRadius * 0.7;\r\n\r\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\r\n    const arcWidth = radiusPerArc * 0.7;\r\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\r\n    this.cornerRadius = Math.floor(arcWidth / 2);\r\n\r\n    let i = 0;\r\n    for (const d of this.results) {\r\n      const outerRadius = this.outerRadius - i * radiusPerArc;\r\n      const innerRadius = outerRadius - arcWidth;\r\n\r\n      const backgroundArc = {\r\n        endAngle: (this.angleSpan * Math.PI) / 180,\r\n        innerRadius,\r\n        outerRadius,\r\n        data: {\r\n          value: this.max,\r\n          name: d.name\r\n        }\r\n      };\r\n\r\n      const valueArc = {\r\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\r\n        innerRadius,\r\n        outerRadius,\r\n        data: {\r\n          value: d.value,\r\n          name: d.name\r\n        }\r\n      };\r\n\r\n      const arc = {\r\n        backgroundArc,\r\n        valueArc\r\n      };\r\n\r\n      arcs.push(arc);\r\n      i++;\r\n    }\r\n\r\n    return arcs;\r\n  }\r\n\r\n  getDomain(): any[] {\r\n    return this.results.map(d => d.name);\r\n  }\r\n\r\n  getValueDomain(): any[] {\r\n    const values = this.results.map(d => d.value);\r\n    const dataMin = Math.min(...values);\r\n    const dataMax = Math.max(...values);\r\n\r\n    if (this.min !== undefined) {\r\n      this.min = Math.min(this.min, dataMin);\r\n    } else {\r\n      this.min = dataMin;\r\n    }\r\n\r\n    if (this.max !== undefined) {\r\n      this.max = Math.max(this.max, dataMax);\r\n    } else {\r\n      this.max = dataMax;\r\n    }\r\n\r\n    return [this.min, this.max];\r\n  }\r\n\r\n  getValueScale(): any {\r\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\r\n  }\r\n\r\n  getDisplayValue(): string {\r\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\r\n\r\n    if (this.textValue && 0 !== this.textValue.length) {\r\n      return this.textValue.toLocaleString();\r\n    }\r\n\r\n    if (this.valueFormatting) {\r\n      return this.valueFormatting(value);\r\n    }\r\n\r\n    return value.toLocaleString();\r\n  }\r\n\r\n  scaleText(repeat: boolean = true): void {\r\n    if (!this.showText) {\r\n      return;\r\n    }\r\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\r\n    const oldScale = this.resizeScale;\r\n\r\n    if (width === 0) {\r\n      this.resizeScale = 1;\r\n    } else {\r\n      const availableSpace = this.textRadius;\r\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\r\n    }\r\n\r\n    if (this.resizeScale !== oldScale) {\r\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\r\n      this.cd.markForCheck();\r\n      if (repeat) {\r\n        setTimeout(() => this.scaleText(false), 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  onClick(data): void {\r\n    this.select.emit(data);\r\n  }\r\n\r\n  getLegendOptions(): any {\r\n    return {\r\n      scaleType: 'ordinal',\r\n      colors: this.colors,\r\n      domain: this.domain,\r\n      title: this.legendTitle,\r\n      position: this.legendPosition\r\n    };\r\n  }\r\n\r\n  setColors(): void {\r\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\r\n  }\r\n\r\n  onActivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n    if (idx > -1) {\r\n      return;\r\n    }\r\n\r\n    this.activeEntries = [item, ...this.activeEntries];\r\n    this.activate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  onDeactivate(item): void {\r\n    const idx = this.activeEntries.findIndex(d => {\r\n      return d.name === item.name && d.value === item.value;\r\n    });\r\n\r\n    this.activeEntries.splice(idx, 1);\r\n    this.activeEntries = [...this.activeEntries];\r\n\r\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\r\n  }\r\n\r\n  isActive(entry): boolean {\r\n    if (!this.activeEntries) return false;\r\n    const item = this.activeEntries.find(d => {\r\n      return entry.name === d.name && entry.series === d.series;\r\n    });\r\n    return item !== undefined;\r\n  }\r\n\r\n  trackBy(index, item): string {\r\n    return item.valueArc.data.name;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\r\nimport { formatLabel, escapeLabel } from '../common/label.helper';\r\nimport { ColorHelper } from '../common/color.helper';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-gauge-arc]',\r\n  template: `\r\n    <svg:g\r\n      ngx-charts-pie-arc\r\n      class=\"background-arc\"\r\n      [startAngle]=\"0\"\r\n      [endAngle]=\"backgroundArc.endAngle\"\r\n      [innerRadius]=\"backgroundArc.innerRadius\"\r\n      [outerRadius]=\"backgroundArc.outerRadius\"\r\n      [cornerRadius]=\"cornerRadius\"\r\n      [data]=\"backgroundArc.data\"\r\n      [animate]=\"false\"\r\n      [pointerEvents]=\"false\"\r\n    ></svg:g>\r\n    <svg:g\r\n      ngx-charts-pie-arc\r\n      [startAngle]=\"0\"\r\n      [endAngle]=\"valueArc.endAngle\"\r\n      [innerRadius]=\"valueArc.innerRadius\"\r\n      [outerRadius]=\"valueArc.outerRadius\"\r\n      [cornerRadius]=\"cornerRadius\"\r\n      [fill]=\"colors.getColor(valueArc.data.name)\"\r\n      [data]=\"valueArc.data\"\r\n      [animate]=\"animations\"\r\n      [isActive]=\"isActive\"\r\n      (select)=\"select.emit($event)\"\r\n      (activate)=\"activate.emit($event)\"\r\n      (deactivate)=\"deactivate.emit($event)\"\r\n      ngx-tooltip\r\n      [tooltipDisabled]=\"tooltipDisabled\"\r\n      [tooltipPlacement]=\"'top'\"\r\n      [tooltipType]=\"'tooltip'\"\r\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\r\n      [tooltipTemplate]=\"tooltipTemplate\"\r\n      [tooltipContext]=\"valueArc.data\"\r\n    ></svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeArcComponent {\r\n  @Input() backgroundArc: any;\r\n  @Input() valueArc: any;\r\n  @Input() cornerRadius: any;\r\n  @Input() colors: ColorHelper;\r\n  @Input() isActive: boolean = false;\r\n  @Input() tooltipDisabled: boolean = false;\r\n  @Input() valueFormatting: (value: any) => string;\r\n  @Input() tooltipTemplate: TemplateRef<any>;\r\n  @Input() animations: boolean = true;\r\n\r\n  @Output() select = new EventEmitter();\r\n  @Output() activate = new EventEmitter();\r\n  @Output() deactivate = new EventEmitter();\r\n\r\n  tooltipText(arc): string {\r\n    const label = formatLabel(arc.data.name);\r\n    let val;\r\n\r\n    if (this.valueFormatting) {\r\n      val = this.valueFormatting(arc.data.value);\r\n    } else {\r\n      val = formatLabel(arc.data.value);\r\n    }\r\n\r\n    return `\r\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\r\n      <span class=\"tooltip-val\">${val}</span>\r\n    `;\r\n  }\r\n}\r\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { line } from 'd3-shape';\r\n\r\n@Component({\r\n  selector: 'g[ngx-charts-gauge-axis]',\r\n  template: `\r\n    <svg:g [attr.transform]=\"rotate\">\r\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\r\n        <svg:path [attr.d]=\"tick.line\" />\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\r\n        <svg:text\r\n          [style.textAnchor]=\"tick.textAnchor\"\r\n          [attr.transform]=\"tick.textTransform\"\r\n          alignment-baseline=\"central\"\r\n        >\r\n          {{ tick.text }}\r\n        </svg:text>\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\r\n        <svg:path [attr.d]=\"tick.line\" />\r\n      </svg:g>\r\n    </svg:g>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GaugeAxisComponent implements OnChanges {\r\n  @Input() bigSegments: any;\r\n  @Input() smallSegments: any;\r\n  @Input() min: any;\r\n  @Input() max: any;\r\n  @Input() angleSpan: number;\r\n  @Input() startAngle: number;\r\n  @Input() radius: any;\r\n  @Input() valueScale: any;\r\n  @Input() tickFormatting: any;\r\n\r\n  ticks: any;\r\n  rotationAngle: number;\r\n  rotate: string = '';\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.update();\r\n  }\r\n\r\n  update(): void {\r\n    this.rotationAngle = -90 + this.startAngle;\r\n    this.rotate = `rotate(${this.rotationAngle})`;\r\n    this.ticks = this.getTicks();\r\n  }\r\n\r\n  getTicks(): any {\r\n    const bigTickSegment = this.angleSpan / this.bigSegments;\r\n    const smallTickSegment = bigTickSegment / this.smallSegments;\r\n    const tickLength = 20;\r\n    const ticks = {\r\n      big: [],\r\n      small: []\r\n    };\r\n\r\n    const startDistance = this.radius + 10;\r\n    const textDist = startDistance + tickLength + 10;\r\n\r\n    for (let i = 0; i <= this.bigSegments; i++) {\r\n      const angleDeg = i * bigTickSegment;\r\n      const angle = (angleDeg * Math.PI) / 180;\r\n\r\n      const textAnchor = this.getTextAnchor(angleDeg);\r\n\r\n      let skip = false;\r\n      if (i === 0 && this.angleSpan === 360) {\r\n        skip = true;\r\n      }\r\n\r\n      if (!skip) {\r\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\r\n        if (this.tickFormatting) {\r\n          text = this.tickFormatting(text);\r\n        }\r\n        ticks.big.push({\r\n          line: this.getTickPath(startDistance, tickLength, angle),\r\n          textAnchor,\r\n          text,\r\n          textTransform: `\r\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\r\n          `\r\n        });\r\n      }\r\n\r\n      if (i === this.bigSegments) {\r\n        continue;\r\n      }\r\n\r\n      for (let j = 1; j <= this.smallSegments; j++) {\r\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\r\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\r\n\r\n        ticks.small.push({\r\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\r\n        });\r\n      }\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  getTextAnchor(angle) {\r\n    // [0, 45] = 'middle';\r\n    // [46, 135] = 'start';\r\n    // [136, 225] = 'middle';\r\n    // [226, 315] = 'end';\r\n\r\n    angle = (this.startAngle + angle) % 360;\r\n    let textAnchor = 'middle';\r\n    if (angle > 45 && angle <= 135) {\r\n      textAnchor = 'start';\r\n    } else if (angle > 225 && angle <= 315) {\r\n      textAnchor = 'end';\r\n    }\r\n    return textAnchor;\r\n  }\r\n\r\n  getTickPath(startDistance, tickLength, angle): any {\r\n    const y1 = startDistance * Math.sin(angle);\r\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\r\n    const x1 = startDistance * Math.cos(angle);\r\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\r\n\r\n    const points = [\r\n      { x: x1, y: y1 },\r\n      { x: x2, y: y2 }\r\n    ];\r\n    const lineGenerator = line<any>()\r\n      .x(d => d.x)\r\n      .y(d => d.y);\r\n    return lineGenerator(points);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from '../common/chart-common.module';\r\nimport { LinearGaugeComponent } from './linear-gauge.component';\r\nimport { GaugeComponent } from './gauge.component';\r\nimport { GaugeArcComponent } from './gauge-arc.component';\r\nimport { GaugeAxisComponent } from './gauge-axis.component';\r\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\r\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\r\n\r\n@NgModule({\r\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\r\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\r\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\r\n})\r\nexport class GaugeModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { ChartCommonModule } from './common/chart-common.module';\r\nimport { AreaChartModule } from './area-chart/area-chart.module';\r\nimport { BarChartModule } from './bar-chart/bar-chart.module';\r\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\r\nimport { HeatMapModule } from './heat-map/heat-map.module';\r\nimport { LineChartModule } from './line-chart/line-chart.module';\r\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\r\nimport { NumberCardModule } from './number-card/number-card.module';\r\nimport { PieChartModule } from './pie-chart/pie-chart.module';\r\nimport { TreeMapModule } from './tree-map/tree-map.module';\r\nimport { GaugeModule } from './gauge/gauge.module';\r\nimport { ngxChartsPolyfills } from './polyfills';\r\n\r\n@NgModule({\r\n  exports: [\r\n    ChartCommonModule,\r\n    AreaChartModule,\r\n    BarChartModule,\r\n    BubbleChartModule,\r\n    HeatMapModule,\r\n    LineChartModule,\r\n    PolarChartModule,\r\n    NumberCardModule,\r\n    PieChartModule,\r\n    TreeMapModule,\r\n    GaugeModule\r\n  ]\r\n})\r\nexport class NgxChartsModule {\r\n  constructor() {\r\n    ngxChartsPolyfills();\r\n  }\r\n}\r\n","// The export is needed here to generate a valid polyfills.metadata.json file\r\nexport function ngxChartsPolyfills() {\r\n  // IE11 fix\r\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\r\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\r\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\r\n  }\r\n}\r\n","import { timeFormat } from 'd3-time-format';\r\n\r\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\r\n  return function (label: string): string {\r\n    if (label === 'No Value' || label === 'Other') {\r\n      return label;\r\n    }\r\n    if (fieldType === 'date' && groupByType === 'groupBy') {\r\n      const formatter = timeFormat('MM/DD/YYYY');\r\n      return formatter(<any>label);\r\n    }\r\n\r\n    return label.toString();\r\n  };\r\n}\r\n"]}